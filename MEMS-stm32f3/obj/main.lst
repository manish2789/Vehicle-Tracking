   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.NVIC_SetPriority,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	NVIC_SetPriority:
  25              	.LFB101:
  26              		.file 1 "inc/core_cm4.h"
   1:inc/core_cm4.h **** /**************************************************************************//**
   2:inc/core_cm4.h ****  * @file     core_cm4.h
   3:inc/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:inc/core_cm4.h ****  * @version  V2.10
   5:inc/core_cm4.h ****  * @date     19. July 2011
   6:inc/core_cm4.h ****  *
   7:inc/core_cm4.h ****  * @note
   8:inc/core_cm4.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:inc/core_cm4.h ****  *
  10:inc/core_cm4.h ****  * @par
  11:inc/core_cm4.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:inc/core_cm4.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:inc/core_cm4.h ****  * within development tools that are supporting such ARM based processors.
  14:inc/core_cm4.h ****  *
  15:inc/core_cm4.h ****  * @par
  16:inc/core_cm4.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:inc/core_cm4.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:inc/core_cm4.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:inc/core_cm4.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:inc/core_cm4.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:inc/core_cm4.h ****  *
  22:inc/core_cm4.h ****  ******************************************************************************/
  23:inc/core_cm4.h **** #if defined ( __ICCARM__ )
  24:inc/core_cm4.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:inc/core_cm4.h **** #endif
  26:inc/core_cm4.h **** 
  27:inc/core_cm4.h **** #ifdef __cplusplus
  28:inc/core_cm4.h ****  extern "C" {
  29:inc/core_cm4.h **** #endif
  30:inc/core_cm4.h **** 
  31:inc/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:inc/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:inc/core_cm4.h **** 
  34:inc/core_cm4.h **** 
  35:inc/core_cm4.h **** /** \mainpage CMSIS Cortex-M4
  36:inc/core_cm4.h **** 
  37:inc/core_cm4.h ****   This documentation describes the CMSIS Cortex-M Core Peripheral Access Layer.
  38:inc/core_cm4.h ****   It consists of:
  39:inc/core_cm4.h **** 
  40:inc/core_cm4.h ****      - Cortex-M Core Register Definitions
  41:inc/core_cm4.h ****      - Cortex-M functions
  42:inc/core_cm4.h ****      - Cortex-M instructions
  43:inc/core_cm4.h ****      - Cortex-M SIMD instructions
  44:inc/core_cm4.h **** 
  45:inc/core_cm4.h ****   The CMSIS Cortex-M4 Core Peripheral Access Layer contains C and assembly functions that ease
  46:inc/core_cm4.h ****   access to the Cortex-M Core
  47:inc/core_cm4.h ****  */
  48:inc/core_cm4.h **** 
  49:inc/core_cm4.h **** /** \defgroup CMSIS_MISRA_Exceptions  CMSIS MISRA-C:2004 Compliance Exceptions
  50:inc/core_cm4.h ****   CMSIS violates following MISRA-C2004 Rules:
  51:inc/core_cm4.h ****   
  52:inc/core_cm4.h ****    - Violates MISRA 2004 Required Rule 8.5, object/function definition in header file.<br>
  53:inc/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'. 
  54:inc/core_cm4.h **** 
  55:inc/core_cm4.h ****    - Violates MISRA 2004 Required Rule 18.4, declaration of union type or object of union type: '{.
  56:inc/core_cm4.h ****      Unions are used for effective representation of core registers.
  57:inc/core_cm4.h ****    
  58:inc/core_cm4.h ****    - Violates MISRA 2004 Advisory Rule 19.7, Function-like macro defined.<br>
  59:inc/core_cm4.h ****      Function-like macros are used to allow more efficient code. 
  60:inc/core_cm4.h **** 
  61:inc/core_cm4.h ****  */
  62:inc/core_cm4.h **** 
  63:inc/core_cm4.h **** 
  64:inc/core_cm4.h **** /*******************************************************************************
  65:inc/core_cm4.h ****  *                 CMSIS definitions
  66:inc/core_cm4.h ****  ******************************************************************************/
  67:inc/core_cm4.h **** /** \defgroup CMSIS_core_definitions CMSIS Core Definitions
  68:inc/core_cm4.h ****   This file defines all structures and symbols for CMSIS core:
  69:inc/core_cm4.h ****    - CMSIS version number
  70:inc/core_cm4.h ****    - Cortex-M core
  71:inc/core_cm4.h ****    - Cortex-M core Revision Number
  72:inc/core_cm4.h ****   @{
  73:inc/core_cm4.h ****  */
  74:inc/core_cm4.h **** 
  75:inc/core_cm4.h **** /*  CMSIS CM4 definitions */
  76:inc/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  77:inc/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x10)                                                       /*!<
  78:inc/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16) | __CM4_CMSIS_VERSION_SUB) /*!<
  79:inc/core_cm4.h **** 
  80:inc/core_cm4.h **** #define __CORTEX_M                (0x04)                                                       /*!<
  81:inc/core_cm4.h **** 
  82:inc/core_cm4.h **** 
  83:inc/core_cm4.h **** #if   defined ( __CC_ARM )
  84:inc/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  85:inc/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  86:inc/core_cm4.h **** 
  87:inc/core_cm4.h **** #elif defined ( __ICCARM__ )
  88:inc/core_cm4.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  89:inc/core_cm4.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  90:inc/core_cm4.h **** 
  91:inc/core_cm4.h **** #elif defined ( __GNUC__ )
  92:inc/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  93:inc/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  94:inc/core_cm4.h **** 
  95:inc/core_cm4.h **** #elif defined ( __TASKING__ )
  96:inc/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  97:inc/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  98:inc/core_cm4.h **** 
  99:inc/core_cm4.h **** #endif
 100:inc/core_cm4.h **** 
 101:inc/core_cm4.h **** /*!< __FPU_USED to be checked prior to making use of FPU specific registers and functions */
 102:inc/core_cm4.h **** #if defined ( __CC_ARM )
 103:inc/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 104:inc/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 105:inc/core_cm4.h ****       #define __FPU_USED       1
 106:inc/core_cm4.h ****     #else
 107:inc/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 108:inc/core_cm4.h ****       #define __FPU_USED       0
 109:inc/core_cm4.h ****     #endif
 110:inc/core_cm4.h ****   #else
 111:inc/core_cm4.h ****     #define __FPU_USED         0
 112:inc/core_cm4.h ****   #endif
 113:inc/core_cm4.h **** 
 114:inc/core_cm4.h **** #elif defined ( __ICCARM__ )
 115:inc/core_cm4.h ****   #if defined __ARMVFP__
 116:inc/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 117:inc/core_cm4.h ****       #define __FPU_USED       1
 118:inc/core_cm4.h ****     #else
 119:inc/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 120:inc/core_cm4.h ****       #define __FPU_USED       0
 121:inc/core_cm4.h ****     #endif
 122:inc/core_cm4.h ****   #else
 123:inc/core_cm4.h ****     #define __FPU_USED         0
 124:inc/core_cm4.h ****   #endif
 125:inc/core_cm4.h **** 
 126:inc/core_cm4.h **** #elif defined ( __GNUC__ )
 127:inc/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 128:inc/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 129:inc/core_cm4.h ****       #define __FPU_USED       1
 130:inc/core_cm4.h ****     #else
 131:inc/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 132:inc/core_cm4.h ****       #define __FPU_USED       0
 133:inc/core_cm4.h ****     #endif
 134:inc/core_cm4.h ****   #else
 135:inc/core_cm4.h ****     #define __FPU_USED         0
 136:inc/core_cm4.h ****   #endif
 137:inc/core_cm4.h **** 
 138:inc/core_cm4.h **** #elif defined ( __TASKING__ )
 139:inc/core_cm4.h ****     /* add preprocessor checks to define __FPU_USED */
 140:inc/core_cm4.h ****     #define __FPU_USED         0
 141:inc/core_cm4.h **** #endif
 142:inc/core_cm4.h **** 
 143:inc/core_cm4.h **** #include <stdint.h>                      /*!< standard types definitions                      */
 144:inc/core_cm4.h **** #include <core_cmInstr.h>                /*!< Core Instruction Access                         */
 145:inc/core_cm4.h **** #include <core_cmFunc.h>                 /*!< Core Function Access                            */
 146:inc/core_cm4.h **** #include <core_cm4_simd.h>               /*!< Compiler specific SIMD Intrinsics               */
 147:inc/core_cm4.h **** 
 148:inc/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 149:inc/core_cm4.h **** 
 150:inc/core_cm4.h **** #ifndef __CMSIS_GENERIC
 151:inc/core_cm4.h **** 
 152:inc/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 153:inc/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 154:inc/core_cm4.h **** 
 155:inc/core_cm4.h **** /* check device defines and use defaults */
 156:inc/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 157:inc/core_cm4.h ****   #ifndef __CM4_REV
 158:inc/core_cm4.h ****     #define __CM4_REV               0x0000
 159:inc/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 160:inc/core_cm4.h ****   #endif
 161:inc/core_cm4.h **** 
 162:inc/core_cm4.h ****   #ifndef __FPU_PRESENT
 163:inc/core_cm4.h ****     #define __FPU_PRESENT             0
 164:inc/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 165:inc/core_cm4.h ****   #endif
 166:inc/core_cm4.h **** 
 167:inc/core_cm4.h ****   #ifndef __MPU_PRESENT
 168:inc/core_cm4.h ****     #define __MPU_PRESENT             0
 169:inc/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 170:inc/core_cm4.h ****   #endif
 171:inc/core_cm4.h **** 
 172:inc/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 173:inc/core_cm4.h ****     #define __NVIC_PRIO_BITS          4
 174:inc/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 175:inc/core_cm4.h ****   #endif
 176:inc/core_cm4.h **** 
 177:inc/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 178:inc/core_cm4.h ****     #define __Vendor_SysTickConfig    0
 179:inc/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 180:inc/core_cm4.h ****   #endif
 181:inc/core_cm4.h **** #endif
 182:inc/core_cm4.h **** 
 183:inc/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 184:inc/core_cm4.h **** #ifdef __cplusplus
 185:inc/core_cm4.h ****   #define   __I     volatile             /*!< defines 'read only' permissions                 */
 186:inc/core_cm4.h **** #else
 187:inc/core_cm4.h ****   #define   __I     volatile const       /*!< defines 'read only' permissions                 */
 188:inc/core_cm4.h **** #endif
 189:inc/core_cm4.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
 190:inc/core_cm4.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
 191:inc/core_cm4.h **** 
 192:inc/core_cm4.h **** /*@} end of group CMSIS_core_definitions */
 193:inc/core_cm4.h **** 
 194:inc/core_cm4.h **** 
 195:inc/core_cm4.h **** 
 196:inc/core_cm4.h **** /*******************************************************************************
 197:inc/core_cm4.h ****  *                 Register Abstraction
 198:inc/core_cm4.h ****  ******************************************************************************/
 199:inc/core_cm4.h **** /** \defgroup CMSIS_core_register CMSIS Core Register
 200:inc/core_cm4.h ****   Core Register contain:
 201:inc/core_cm4.h ****   - Core Register
 202:inc/core_cm4.h ****   - Core NVIC Register
 203:inc/core_cm4.h ****   - Core SCB Register
 204:inc/core_cm4.h ****   - Core SysTick Register
 205:inc/core_cm4.h ****   - Core Debug Register
 206:inc/core_cm4.h ****   - Core MPU Register
 207:inc/core_cm4.h ****   - Core FPU Register
 208:inc/core_cm4.h **** */
 209:inc/core_cm4.h **** 
 210:inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 211:inc/core_cm4.h ****     \defgroup CMSIS_CORE CMSIS Core
 212:inc/core_cm4.h ****   Type definitions for the Cortex-M Core Registers
 213:inc/core_cm4.h ****   @{
 214:inc/core_cm4.h ****  */
 215:inc/core_cm4.h **** 
 216:inc/core_cm4.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 217:inc/core_cm4.h ****  */
 218:inc/core_cm4.h **** typedef union
 219:inc/core_cm4.h **** {
 220:inc/core_cm4.h ****   struct
 221:inc/core_cm4.h ****   {
 222:inc/core_cm4.h **** #if (__CORTEX_M != 0x04)
 223:inc/core_cm4.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 224:inc/core_cm4.h **** #else
 225:inc/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 226:inc/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 227:inc/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 228:inc/core_cm4.h **** #endif
 229:inc/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 230:inc/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 231:inc/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 232:inc/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 233:inc/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 234:inc/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 235:inc/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 236:inc/core_cm4.h **** } APSR_Type;
 237:inc/core_cm4.h **** 
 238:inc/core_cm4.h **** 
 239:inc/core_cm4.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 240:inc/core_cm4.h ****  */
 241:inc/core_cm4.h **** typedef union
 242:inc/core_cm4.h **** {
 243:inc/core_cm4.h ****   struct
 244:inc/core_cm4.h ****   {
 245:inc/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 246:inc/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 247:inc/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 248:inc/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 249:inc/core_cm4.h **** } IPSR_Type;
 250:inc/core_cm4.h **** 
 251:inc/core_cm4.h **** 
 252:inc/core_cm4.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 253:inc/core_cm4.h ****  */
 254:inc/core_cm4.h **** typedef union
 255:inc/core_cm4.h **** {
 256:inc/core_cm4.h ****   struct
 257:inc/core_cm4.h ****   {
 258:inc/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 259:inc/core_cm4.h **** #if (__CORTEX_M != 0x04)
 260:inc/core_cm4.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 261:inc/core_cm4.h **** #else
 262:inc/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 263:inc/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 264:inc/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 265:inc/core_cm4.h **** #endif
 266:inc/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 267:inc/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 268:inc/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 269:inc/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 270:inc/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 271:inc/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 272:inc/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 273:inc/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 274:inc/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 275:inc/core_cm4.h **** } xPSR_Type;
 276:inc/core_cm4.h **** 
 277:inc/core_cm4.h **** 
 278:inc/core_cm4.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 279:inc/core_cm4.h ****  */
 280:inc/core_cm4.h **** typedef union
 281:inc/core_cm4.h **** {
 282:inc/core_cm4.h ****   struct
 283:inc/core_cm4.h ****   {
 284:inc/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 285:inc/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 286:inc/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 287:inc/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 288:inc/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 289:inc/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 290:inc/core_cm4.h **** } CONTROL_Type;
 291:inc/core_cm4.h **** 
 292:inc/core_cm4.h **** /*@} end of group CMSIS_CORE */
 293:inc/core_cm4.h **** 
 294:inc/core_cm4.h **** 
 295:inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 296:inc/core_cm4.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 297:inc/core_cm4.h ****   Type definitions for the Cortex-M NVIC Registers
 298:inc/core_cm4.h ****   @{
 299:inc/core_cm4.h ****  */
 300:inc/core_cm4.h **** 
 301:inc/core_cm4.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 302:inc/core_cm4.h ****  */
 303:inc/core_cm4.h **** typedef struct
 304:inc/core_cm4.h **** {
 305:inc/core_cm4.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 306:inc/core_cm4.h ****        uint32_t RESERVED0[24];
 307:inc/core_cm4.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 308:inc/core_cm4.h ****        uint32_t RSERVED1[24];
 309:inc/core_cm4.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 310:inc/core_cm4.h ****        uint32_t RESERVED2[24];
 311:inc/core_cm4.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 312:inc/core_cm4.h ****        uint32_t RESERVED3[24];
 313:inc/core_cm4.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 314:inc/core_cm4.h ****        uint32_t RESERVED4[56];
 315:inc/core_cm4.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 316:inc/core_cm4.h ****        uint32_t RESERVED5[644];
 317:inc/core_cm4.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 318:inc/core_cm4.h **** }  NVIC_Type;
 319:inc/core_cm4.h **** 
 320:inc/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 321:inc/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 322:inc/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 323:inc/core_cm4.h **** 
 324:inc/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 325:inc/core_cm4.h **** 
 326:inc/core_cm4.h **** 
 327:inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 328:inc/core_cm4.h ****     \defgroup CMSIS_SCB CMSIS SCB
 329:inc/core_cm4.h ****   Type definitions for the Cortex-M System Control Block Registers
 330:inc/core_cm4.h ****   @{
 331:inc/core_cm4.h ****  */
 332:inc/core_cm4.h **** 
 333:inc/core_cm4.h **** /** \brief  Structure type to access the System Control Block (SCB).
 334:inc/core_cm4.h ****  */
 335:inc/core_cm4.h **** typedef struct
 336:inc/core_cm4.h **** {
 337:inc/core_cm4.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 338:inc/core_cm4.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 339:inc/core_cm4.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 340:inc/core_cm4.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 341:inc/core_cm4.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 342:inc/core_cm4.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 343:inc/core_cm4.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 344:inc/core_cm4.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 345:inc/core_cm4.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 346:inc/core_cm4.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 347:inc/core_cm4.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 348:inc/core_cm4.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 349:inc/core_cm4.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 350:inc/core_cm4.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 351:inc/core_cm4.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 352:inc/core_cm4.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 353:inc/core_cm4.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 354:inc/core_cm4.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 355:inc/core_cm4.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 356:inc/core_cm4.h ****        uint32_t RESERVED0[5];
 357:inc/core_cm4.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 358:inc/core_cm4.h **** } SCB_Type;
 359:inc/core_cm4.h **** 
 360:inc/core_cm4.h **** /* SCB CPUID Register Definitions */
 361:inc/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 362:inc/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 363:inc/core_cm4.h **** 
 364:inc/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 365:inc/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 366:inc/core_cm4.h **** 
 367:inc/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 368:inc/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 369:inc/core_cm4.h **** 
 370:inc/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 371:inc/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 372:inc/core_cm4.h **** 
 373:inc/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 374:inc/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 375:inc/core_cm4.h **** 
 376:inc/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 377:inc/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 378:inc/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 379:inc/core_cm4.h **** 
 380:inc/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 381:inc/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 382:inc/core_cm4.h **** 
 383:inc/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 384:inc/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 385:inc/core_cm4.h **** 
 386:inc/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 387:inc/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 388:inc/core_cm4.h **** 
 389:inc/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 390:inc/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 391:inc/core_cm4.h **** 
 392:inc/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 393:inc/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 394:inc/core_cm4.h **** 
 395:inc/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 396:inc/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 397:inc/core_cm4.h **** 
 398:inc/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 399:inc/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 400:inc/core_cm4.h **** 
 401:inc/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 402:inc/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 403:inc/core_cm4.h **** 
 404:inc/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 405:inc/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 406:inc/core_cm4.h **** 
 407:inc/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 408:inc/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 409:inc/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 410:inc/core_cm4.h **** 
 411:inc/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 412:inc/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 413:inc/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 414:inc/core_cm4.h **** 
 415:inc/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 416:inc/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 417:inc/core_cm4.h **** 
 418:inc/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 419:inc/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 420:inc/core_cm4.h **** 
 421:inc/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 422:inc/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 423:inc/core_cm4.h **** 
 424:inc/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 425:inc/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 426:inc/core_cm4.h **** 
 427:inc/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 428:inc/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 429:inc/core_cm4.h **** 
 430:inc/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 431:inc/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 432:inc/core_cm4.h **** 
 433:inc/core_cm4.h **** /* SCB System Control Register Definitions */
 434:inc/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 435:inc/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 436:inc/core_cm4.h **** 
 437:inc/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 438:inc/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 439:inc/core_cm4.h **** 
 440:inc/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 441:inc/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 442:inc/core_cm4.h **** 
 443:inc/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 444:inc/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 445:inc/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 446:inc/core_cm4.h **** 
 447:inc/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 448:inc/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 449:inc/core_cm4.h **** 
 450:inc/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 451:inc/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 452:inc/core_cm4.h **** 
 453:inc/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 454:inc/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 455:inc/core_cm4.h **** 
 456:inc/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 457:inc/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 458:inc/core_cm4.h **** 
 459:inc/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 460:inc/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 461:inc/core_cm4.h **** 
 462:inc/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 463:inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 464:inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 465:inc/core_cm4.h **** 
 466:inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 467:inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 468:inc/core_cm4.h **** 
 469:inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 470:inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 471:inc/core_cm4.h **** 
 472:inc/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 473:inc/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 474:inc/core_cm4.h **** 
 475:inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 476:inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 477:inc/core_cm4.h **** 
 478:inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 479:inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 480:inc/core_cm4.h **** 
 481:inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 482:inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 483:inc/core_cm4.h **** 
 484:inc/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 485:inc/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 486:inc/core_cm4.h **** 
 487:inc/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 488:inc/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 489:inc/core_cm4.h **** 
 490:inc/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 491:inc/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 492:inc/core_cm4.h **** 
 493:inc/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 494:inc/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 495:inc/core_cm4.h **** 
 496:inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 497:inc/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 498:inc/core_cm4.h **** 
 499:inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 500:inc/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 501:inc/core_cm4.h **** 
 502:inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 503:inc/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 504:inc/core_cm4.h **** 
 505:inc/core_cm4.h **** /* SCB Configurable Fault Status Registers Definitions */
 506:inc/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 507:inc/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 508:inc/core_cm4.h **** 
 509:inc/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 510:inc/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 511:inc/core_cm4.h **** 
 512:inc/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 513:inc/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 514:inc/core_cm4.h **** 
 515:inc/core_cm4.h **** /* SCB Hard Fault Status Registers Definitions */
 516:inc/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 517:inc/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 518:inc/core_cm4.h **** 
 519:inc/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 520:inc/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 521:inc/core_cm4.h **** 
 522:inc/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 523:inc/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 524:inc/core_cm4.h **** 
 525:inc/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 526:inc/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 527:inc/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 528:inc/core_cm4.h **** 
 529:inc/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 530:inc/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 531:inc/core_cm4.h **** 
 532:inc/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 533:inc/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 534:inc/core_cm4.h **** 
 535:inc/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 536:inc/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 537:inc/core_cm4.h **** 
 538:inc/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 539:inc/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 540:inc/core_cm4.h **** 
 541:inc/core_cm4.h **** /*@} end of group CMSIS_SCB */
 542:inc/core_cm4.h **** 
 543:inc/core_cm4.h **** 
 544:inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 545:inc/core_cm4.h ****     \defgroup CMSIS_SCnSCB CMSIS System Control and ID Register not in the SCB
 546:inc/core_cm4.h ****   Type definitions for the Cortex-M System Control and ID Register not in the SCB
 547:inc/core_cm4.h ****   @{
 548:inc/core_cm4.h ****  */
 549:inc/core_cm4.h **** 
 550:inc/core_cm4.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 551:inc/core_cm4.h ****  */
 552:inc/core_cm4.h **** typedef struct
 553:inc/core_cm4.h **** {
 554:inc/core_cm4.h ****        uint32_t RESERVED0[1];
 555:inc/core_cm4.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 556:inc/core_cm4.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 557:inc/core_cm4.h **** } SCnSCB_Type;
 558:inc/core_cm4.h **** 
 559:inc/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 560:inc/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 561:inc/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 562:inc/core_cm4.h **** 
 563:inc/core_cm4.h **** /* Auxiliary Control Register Definitions */
 564:inc/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9                                          /*!< ACTLR: 
 565:inc/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 566:inc/core_cm4.h **** 
 567:inc/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8                                          /*!< ACTLR: 
 568:inc/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 569:inc/core_cm4.h **** 
 570:inc/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 571:inc/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 572:inc/core_cm4.h **** 
 573:inc/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 574:inc/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 575:inc/core_cm4.h **** 
 576:inc/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 577:inc/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 578:inc/core_cm4.h **** 
 579:inc/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 580:inc/core_cm4.h **** 
 581:inc/core_cm4.h **** 
 582:inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 583:inc/core_cm4.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 584:inc/core_cm4.h ****   Type definitions for the Cortex-M System Timer Registers
 585:inc/core_cm4.h ****   @{
 586:inc/core_cm4.h ****  */
 587:inc/core_cm4.h **** 
 588:inc/core_cm4.h **** /** \brief  Structure type to access the System Timer (SysTick).
 589:inc/core_cm4.h ****  */
 590:inc/core_cm4.h **** typedef struct
 591:inc/core_cm4.h **** {
 592:inc/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 593:inc/core_cm4.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 594:inc/core_cm4.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 595:inc/core_cm4.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 596:inc/core_cm4.h **** } SysTick_Type;
 597:inc/core_cm4.h **** 
 598:inc/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 599:inc/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 600:inc/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 601:inc/core_cm4.h **** 
 602:inc/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 603:inc/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 604:inc/core_cm4.h **** 
 605:inc/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 606:inc/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 607:inc/core_cm4.h **** 
 608:inc/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 609:inc/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 610:inc/core_cm4.h **** 
 611:inc/core_cm4.h **** /* SysTick Reload Register Definitions */
 612:inc/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 613:inc/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 614:inc/core_cm4.h **** 
 615:inc/core_cm4.h **** /* SysTick Current Register Definitions */
 616:inc/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 617:inc/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 618:inc/core_cm4.h **** 
 619:inc/core_cm4.h **** /* SysTick Calibration Register Definitions */
 620:inc/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 621:inc/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 622:inc/core_cm4.h **** 
 623:inc/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 624:inc/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 625:inc/core_cm4.h **** 
 626:inc/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 627:inc/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 628:inc/core_cm4.h **** 
 629:inc/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 630:inc/core_cm4.h **** 
 631:inc/core_cm4.h **** 
 632:inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 633:inc/core_cm4.h ****     \defgroup CMSIS_ITM CMSIS ITM
 634:inc/core_cm4.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 635:inc/core_cm4.h ****   @{
 636:inc/core_cm4.h ****  */
 637:inc/core_cm4.h **** 
 638:inc/core_cm4.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 639:inc/core_cm4.h ****  */
 640:inc/core_cm4.h **** typedef struct
 641:inc/core_cm4.h **** {
 642:inc/core_cm4.h ****   __O  union
 643:inc/core_cm4.h ****   {
 644:inc/core_cm4.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 645:inc/core_cm4.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 646:inc/core_cm4.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 647:inc/core_cm4.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 648:inc/core_cm4.h ****        uint32_t RESERVED0[864];
 649:inc/core_cm4.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 650:inc/core_cm4.h ****        uint32_t RESERVED1[15];
 651:inc/core_cm4.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 652:inc/core_cm4.h ****        uint32_t RESERVED2[15];
 653:inc/core_cm4.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 654:inc/core_cm4.h **** } ITM_Type;
 655:inc/core_cm4.h **** 
 656:inc/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 657:inc/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0                                          /*!< ITM TPR
 658:inc/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)             /*!< ITM TPR
 659:inc/core_cm4.h **** 
 660:inc/core_cm4.h **** /* ITM Trace Control Register Definitions */
 661:inc/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23                                          /*!< ITM TCR
 662:inc/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                   /*!< ITM TCR
 663:inc/core_cm4.h **** 
 664:inc/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16                                          /*!< ITM TCR
 665:inc/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)          /*!< ITM TCR
 666:inc/core_cm4.h **** 
 667:inc/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10                                          /*!< ITM TCR
 668:inc/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                /*!< ITM TCR
 669:inc/core_cm4.h **** 
 670:inc/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8                                          /*!< ITM TCR
 671:inc/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)             /*!< ITM TCR
 672:inc/core_cm4.h **** 
 673:inc/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4                                          /*!< ITM TCR
 674:inc/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                 /*!< ITM TCR
 675:inc/core_cm4.h **** 
 676:inc/core_cm4.h **** #define ITM_TCR_TXENA_Pos                   3                                          /*!< ITM TCR
 677:inc/core_cm4.h **** #define ITM_TCR_TXENA_Msk                  (1UL << ITM_TCR_TXENA_Pos)                  /*!< ITM TCR
 678:inc/core_cm4.h **** 
 679:inc/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2                                          /*!< ITM TCR
 680:inc/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                /*!< ITM TCR
 681:inc/core_cm4.h **** 
 682:inc/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1                                          /*!< ITM TCR
 683:inc/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                  /*!< ITM TCR
 684:inc/core_cm4.h **** 
 685:inc/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0                                          /*!< ITM TCR
 686:inc/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                 /*!< ITM TCR
 687:inc/core_cm4.h **** 
 688:inc/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 689:inc/core_cm4.h **** 
 690:inc/core_cm4.h **** 
 691:inc/core_cm4.h **** #if (__MPU_PRESENT == 1)
 692:inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 693:inc/core_cm4.h ****     \defgroup CMSIS_MPU CMSIS MPU
 694:inc/core_cm4.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 695:inc/core_cm4.h ****   @{
 696:inc/core_cm4.h ****  */
 697:inc/core_cm4.h **** 
 698:inc/core_cm4.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 699:inc/core_cm4.h ****  */
 700:inc/core_cm4.h **** typedef struct
 701:inc/core_cm4.h **** {
 702:inc/core_cm4.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 703:inc/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 704:inc/core_cm4.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 705:inc/core_cm4.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 706:inc/core_cm4.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 707:inc/core_cm4.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 708:inc/core_cm4.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 709:inc/core_cm4.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 710:inc/core_cm4.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 711:inc/core_cm4.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 712:inc/core_cm4.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 713:inc/core_cm4.h **** } MPU_Type;
 714:inc/core_cm4.h **** 
 715:inc/core_cm4.h **** /* MPU Type Register */
 716:inc/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 717:inc/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 718:inc/core_cm4.h **** 
 719:inc/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 720:inc/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 721:inc/core_cm4.h **** 
 722:inc/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 723:inc/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 724:inc/core_cm4.h **** 
 725:inc/core_cm4.h **** /* MPU Control Register */
 726:inc/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 727:inc/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 728:inc/core_cm4.h **** 
 729:inc/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 730:inc/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 731:inc/core_cm4.h **** 
 732:inc/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 733:inc/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 734:inc/core_cm4.h **** 
 735:inc/core_cm4.h **** /* MPU Region Number Register */
 736:inc/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 737:inc/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 738:inc/core_cm4.h **** 
 739:inc/core_cm4.h **** /* MPU Region Base Address Register */
 740:inc/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 741:inc/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 742:inc/core_cm4.h **** 
 743:inc/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 744:inc/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 745:inc/core_cm4.h **** 
 746:inc/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 747:inc/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 748:inc/core_cm4.h **** 
 749:inc/core_cm4.h **** /* MPU Region Attribute and Size Register */
 750:inc/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
 751:inc/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 752:inc/core_cm4.h **** 
 753:inc/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 754:inc/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 755:inc/core_cm4.h **** 
 756:inc/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 757:inc/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 758:inc/core_cm4.h **** 
 759:inc/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
 760:inc/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
 761:inc/core_cm4.h **** 
 762:inc/core_cm4.h **** /*@} end of group CMSIS_MPU */
 763:inc/core_cm4.h **** #endif
 764:inc/core_cm4.h **** 
 765:inc/core_cm4.h **** 
 766:inc/core_cm4.h **** #if (__FPU_PRESENT == 1)
 767:inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 768:inc/core_cm4.h ****     \defgroup CMSIS_FPU CMSIS FPU
 769:inc/core_cm4.h ****   Type definitions for the Cortex-M Floating Point Unit (FPU)
 770:inc/core_cm4.h ****   @{
 771:inc/core_cm4.h ****  */
 772:inc/core_cm4.h **** 
 773:inc/core_cm4.h **** /** \brief  Structure type to access the Floating Point Unit (FPU).
 774:inc/core_cm4.h ****  */
 775:inc/core_cm4.h **** typedef struct
 776:inc/core_cm4.h **** {
 777:inc/core_cm4.h ****        uint32_t RESERVED0[1];
 778:inc/core_cm4.h ****   __IO uint32_t FPCCR;                   /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
 779:inc/core_cm4.h ****   __IO uint32_t FPCAR;                   /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
 780:inc/core_cm4.h ****   __IO uint32_t FPDSCR;                  /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
 781:inc/core_cm4.h ****   __I  uint32_t MVFR0;                   /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
 782:inc/core_cm4.h ****   __I  uint32_t MVFR1;                   /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
 783:inc/core_cm4.h **** } FPU_Type;
 784:inc/core_cm4.h **** 
 785:inc/core_cm4.h **** /* Floating-Point Context Control Register */
 786:inc/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31                                             /*!< FPCC
 787:inc/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
 788:inc/core_cm4.h **** 
 789:inc/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30                                             /*!< FPCC
 790:inc/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
 791:inc/core_cm4.h **** 
 792:inc/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8                                             /*!< FPCC
 793:inc/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
 794:inc/core_cm4.h **** 
 795:inc/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6                                             /*!< FPCC
 796:inc/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
 797:inc/core_cm4.h **** 
 798:inc/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5                                             /*!< FPCC
 799:inc/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
 800:inc/core_cm4.h **** 
 801:inc/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4                                             /*!< FPCC
 802:inc/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
 803:inc/core_cm4.h **** 
 804:inc/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3                                             /*!< FPCC
 805:inc/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
 806:inc/core_cm4.h **** 
 807:inc/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1                                             /*!< FPCC
 808:inc/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
 809:inc/core_cm4.h **** 
 810:inc/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0                                             /*!< FPCC
 811:inc/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL << FPU_FPCCR_LSPACT_Pos)                  /*!< FPCC
 812:inc/core_cm4.h **** 
 813:inc/core_cm4.h **** /* Floating-Point Context Address Register */
 814:inc/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3                                             /*!< FPCA
 815:inc/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
 816:inc/core_cm4.h **** 
 817:inc/core_cm4.h **** /* Floating-Point Default Status Control Register */
 818:inc/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26                                             /*!< FPDS
 819:inc/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
 820:inc/core_cm4.h **** 
 821:inc/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25                                             /*!< FPDS
 822:inc/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
 823:inc/core_cm4.h **** 
 824:inc/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24                                             /*!< FPDS
 825:inc/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
 826:inc/core_cm4.h **** 
 827:inc/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22                                             /*!< FPDS
 828:inc/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
 829:inc/core_cm4.h **** 
 830:inc/core_cm4.h **** /* Media and FP Feature Register 0 */
 831:inc/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28                                             /*!< MVFR
 832:inc/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
 833:inc/core_cm4.h **** 
 834:inc/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24                                             /*!< MVFR
 835:inc/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
 836:inc/core_cm4.h **** 
 837:inc/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20                                             /*!< MVFR
 838:inc/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
 839:inc/core_cm4.h **** 
 840:inc/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16                                             /*!< MVFR
 841:inc/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
 842:inc/core_cm4.h **** 
 843:inc/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12                                             /*!< MVFR
 844:inc/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
 845:inc/core_cm4.h **** 
 846:inc/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8                                             /*!< MVFR
 847:inc/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
 848:inc/core_cm4.h **** 
 849:inc/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4                                             /*!< MVFR
 850:inc/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
 851:inc/core_cm4.h **** 
 852:inc/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0                                             /*!< MVFR
 853:inc/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL << FPU_MVFR0_A_SIMD_registers_Pos)      /*!< MVFR
 854:inc/core_cm4.h **** 
 855:inc/core_cm4.h **** /* Media and FP Feature Register 1 */
 856:inc/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28                                             /*!< MVFR
 857:inc/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
 858:inc/core_cm4.h **** 
 859:inc/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24                                             /*!< MVFR
 860:inc/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
 861:inc/core_cm4.h **** 
 862:inc/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4                                             /*!< MVFR
 863:inc/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
 864:inc/core_cm4.h **** 
 865:inc/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0                                             /*!< MVFR
 866:inc/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL << FPU_MVFR1_FtZ_mode_Pos)              /*!< MVFR
 867:inc/core_cm4.h **** 
 868:inc/core_cm4.h **** /*@} end of group CMSIS_FPU */
 869:inc/core_cm4.h **** #endif
 870:inc/core_cm4.h **** 
 871:inc/core_cm4.h **** 
 872:inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 873:inc/core_cm4.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 874:inc/core_cm4.h ****   Type definitions for the Cortex-M Core Debug Registers
 875:inc/core_cm4.h ****   @{
 876:inc/core_cm4.h ****  */
 877:inc/core_cm4.h **** 
 878:inc/core_cm4.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 879:inc/core_cm4.h ****  */
 880:inc/core_cm4.h **** typedef struct
 881:inc/core_cm4.h **** {
 882:inc/core_cm4.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 883:inc/core_cm4.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 884:inc/core_cm4.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 885:inc/core_cm4.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 886:inc/core_cm4.h **** } CoreDebug_Type;
 887:inc/core_cm4.h **** 
 888:inc/core_cm4.h **** /* Debug Halting Control and Status Register */
 889:inc/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 890:inc/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 891:inc/core_cm4.h **** 
 892:inc/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 893:inc/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 894:inc/core_cm4.h **** 
 895:inc/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 896:inc/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 897:inc/core_cm4.h **** 
 898:inc/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 899:inc/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 900:inc/core_cm4.h **** 
 901:inc/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 902:inc/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 903:inc/core_cm4.h **** 
 904:inc/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 905:inc/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 906:inc/core_cm4.h **** 
 907:inc/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 908:inc/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 909:inc/core_cm4.h **** 
 910:inc/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 911:inc/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 912:inc/core_cm4.h **** 
 913:inc/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 914:inc/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 915:inc/core_cm4.h **** 
 916:inc/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 917:inc/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 918:inc/core_cm4.h **** 
 919:inc/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 920:inc/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 921:inc/core_cm4.h **** 
 922:inc/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 923:inc/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 924:inc/core_cm4.h **** 
 925:inc/core_cm4.h **** /* Debug Core Register Selector Register */
 926:inc/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 927:inc/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 928:inc/core_cm4.h **** 
 929:inc/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 930:inc/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 931:inc/core_cm4.h **** 
 932:inc/core_cm4.h **** /* Debug Exception and Monitor Control Register */
 933:inc/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 934:inc/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 935:inc/core_cm4.h **** 
 936:inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 937:inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 938:inc/core_cm4.h **** 
 939:inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 940:inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 941:inc/core_cm4.h **** 
 942:inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 943:inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 944:inc/core_cm4.h **** 
 945:inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 946:inc/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 947:inc/core_cm4.h **** 
 948:inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 949:inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 950:inc/core_cm4.h **** 
 951:inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 952:inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 953:inc/core_cm4.h **** 
 954:inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 955:inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 956:inc/core_cm4.h **** 
 957:inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 958:inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 959:inc/core_cm4.h **** 
 960:inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 961:inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 962:inc/core_cm4.h **** 
 963:inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 964:inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 965:inc/core_cm4.h **** 
 966:inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 967:inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 968:inc/core_cm4.h **** 
 969:inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 970:inc/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 971:inc/core_cm4.h **** 
 972:inc/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
 973:inc/core_cm4.h **** 
 974:inc/core_cm4.h **** 
 975:inc/core_cm4.h **** /** \ingroup  CMSIS_core_register
 976:inc/core_cm4.h ****   @{
 977:inc/core_cm4.h ****  */
 978:inc/core_cm4.h **** 
 979:inc/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
 980:inc/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 981:inc/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 982:inc/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 983:inc/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 984:inc/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 985:inc/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 986:inc/core_cm4.h **** 
 987:inc/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
 988:inc/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 989:inc/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 990:inc/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 991:inc/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
 992:inc/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 993:inc/core_cm4.h **** 
 994:inc/core_cm4.h **** #if (__MPU_PRESENT == 1)
 995:inc/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 996:inc/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
 997:inc/core_cm4.h **** #endif
 998:inc/core_cm4.h **** 
 999:inc/core_cm4.h **** #if (__FPU_PRESENT == 1)
1000:inc/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit     
1001:inc/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit     
1002:inc/core_cm4.h **** #endif
1003:inc/core_cm4.h **** 
1004:inc/core_cm4.h **** /*@} */
1005:inc/core_cm4.h **** 
1006:inc/core_cm4.h **** 
1007:inc/core_cm4.h **** 
1008:inc/core_cm4.h **** /*******************************************************************************
1009:inc/core_cm4.h ****  *                Hardware Abstraction Layer
1010:inc/core_cm4.h ****  ******************************************************************************/
1011:inc/core_cm4.h **** /** \defgroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
1012:inc/core_cm4.h ****   Core Function Interface contains:
1013:inc/core_cm4.h ****   - Core NVIC Functions
1014:inc/core_cm4.h ****   - Core SysTick Functions
1015:inc/core_cm4.h ****   - Core Debug Functions
1016:inc/core_cm4.h ****   - Core Register Access Functions
1017:inc/core_cm4.h **** */
1018:inc/core_cm4.h **** 
1019:inc/core_cm4.h **** 
1020:inc/core_cm4.h **** 
1021:inc/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1022:inc/core_cm4.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1023:inc/core_cm4.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
1024:inc/core_cm4.h ****   @{
1025:inc/core_cm4.h ****  */
1026:inc/core_cm4.h **** 
1027:inc/core_cm4.h **** /** \brief  Set Priority Grouping
1028:inc/core_cm4.h **** 
1029:inc/core_cm4.h ****   This function sets the priority grouping field using the required unlock sequence.
1030:inc/core_cm4.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1031:inc/core_cm4.h ****   Only values from 0..7 are used.
1032:inc/core_cm4.h ****   In case of a conflict between priority grouping and available
1033:inc/core_cm4.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1034:inc/core_cm4.h **** 
1035:inc/core_cm4.h ****     \param [in]      PriorityGroup  Priority grouping field
1036:inc/core_cm4.h ****  */
1037:inc/core_cm4.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1038:inc/core_cm4.h **** {
1039:inc/core_cm4.h ****   uint32_t reg_value;
1040:inc/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1041:inc/core_cm4.h **** 
1042:inc/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1043:inc/core_cm4.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1044:inc/core_cm4.h ****   reg_value  =  (reg_value                                 |
1045:inc/core_cm4.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1046:inc/core_cm4.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1047:inc/core_cm4.h ****   SCB->AIRCR =  reg_value;
1048:inc/core_cm4.h **** }
1049:inc/core_cm4.h **** 
1050:inc/core_cm4.h **** 
1051:inc/core_cm4.h **** /** \brief  Get Priority Grouping
1052:inc/core_cm4.h **** 
1053:inc/core_cm4.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
1054:inc/core_cm4.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1055:inc/core_cm4.h **** 
1056:inc/core_cm4.h ****     \return                Priority grouping field
1057:inc/core_cm4.h ****  */
1058:inc/core_cm4.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1059:inc/core_cm4.h **** {
1060:inc/core_cm4.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1061:inc/core_cm4.h **** }
1062:inc/core_cm4.h **** 
1063:inc/core_cm4.h **** 
1064:inc/core_cm4.h **** /** \brief  Enable External Interrupt
1065:inc/core_cm4.h **** 
1066:inc/core_cm4.h ****     This function enables a device specific interrupt in the NVIC interrupt controller.
1067:inc/core_cm4.h ****     The interrupt number cannot be a negative value.
1068:inc/core_cm4.h **** 
1069:inc/core_cm4.h ****     \param [in]      IRQn  Number of the external interrupt to enable
1070:inc/core_cm4.h ****  */
1071:inc/core_cm4.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1072:inc/core_cm4.h **** {
1073:inc/core_cm4.h **** /*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
1074:inc/core_cm4.h ****   NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32
1075:inc/core_cm4.h **** }
1076:inc/core_cm4.h **** 
1077:inc/core_cm4.h **** 
1078:inc/core_cm4.h **** /** \brief  Disable External Interrupt
1079:inc/core_cm4.h **** 
1080:inc/core_cm4.h ****     This function disables a device specific interrupt in the NVIC interrupt controller.
1081:inc/core_cm4.h ****     The interrupt number cannot be a negative value.
1082:inc/core_cm4.h **** 
1083:inc/core_cm4.h ****     \param [in]      IRQn  Number of the external interrupt to disable
1084:inc/core_cm4.h ****  */
1085:inc/core_cm4.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1086:inc/core_cm4.h **** {
1087:inc/core_cm4.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1088:inc/core_cm4.h **** }
1089:inc/core_cm4.h **** 
1090:inc/core_cm4.h **** 
1091:inc/core_cm4.h **** /** \brief  Get Pending Interrupt
1092:inc/core_cm4.h **** 
1093:inc/core_cm4.h ****     This function reads the pending register in the NVIC and returns the pending bit
1094:inc/core_cm4.h ****     for the specified interrupt.
1095:inc/core_cm4.h **** 
1096:inc/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for get pending
1097:inc/core_cm4.h ****     \return             0  Interrupt status is not pending
1098:inc/core_cm4.h ****     \return             1  Interrupt status is pending
1099:inc/core_cm4.h ****  */
1100:inc/core_cm4.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1101:inc/core_cm4.h **** {
1102:inc/core_cm4.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1103:inc/core_cm4.h **** }
1104:inc/core_cm4.h **** 
1105:inc/core_cm4.h **** 
1106:inc/core_cm4.h **** /** \brief  Set Pending Interrupt
1107:inc/core_cm4.h **** 
1108:inc/core_cm4.h ****     This function sets the pending bit for the specified interrupt.
1109:inc/core_cm4.h ****     The interrupt number cannot be a negative value.
1110:inc/core_cm4.h **** 
1111:inc/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for set pending
1112:inc/core_cm4.h ****  */
1113:inc/core_cm4.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1114:inc/core_cm4.h **** {
1115:inc/core_cm4.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1116:inc/core_cm4.h **** }
1117:inc/core_cm4.h **** 
1118:inc/core_cm4.h **** 
1119:inc/core_cm4.h **** /** \brief  Clear Pending Interrupt
1120:inc/core_cm4.h **** 
1121:inc/core_cm4.h ****     This function clears the pending bit for the specified interrupt.
1122:inc/core_cm4.h ****     The interrupt number cannot be a negative value.
1123:inc/core_cm4.h **** 
1124:inc/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for clear pending
1125:inc/core_cm4.h ****  */
1126:inc/core_cm4.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1127:inc/core_cm4.h **** {
1128:inc/core_cm4.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1129:inc/core_cm4.h **** }
1130:inc/core_cm4.h **** 
1131:inc/core_cm4.h **** 
1132:inc/core_cm4.h **** /** \brief  Get Active Interrupt
1133:inc/core_cm4.h **** 
1134:inc/core_cm4.h ****     This function reads the active register in NVIC and returns the active bit.
1135:inc/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for get active
1136:inc/core_cm4.h ****     \return             0  Interrupt status is not active
1137:inc/core_cm4.h ****     \return             1  Interrupt status is active
1138:inc/core_cm4.h ****  */
1139:inc/core_cm4.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1140:inc/core_cm4.h **** {
1141:inc/core_cm4.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1142:inc/core_cm4.h **** }
1143:inc/core_cm4.h **** 
1144:inc/core_cm4.h **** 
1145:inc/core_cm4.h **** /** \brief  Set Interrupt Priority
1146:inc/core_cm4.h **** 
1147:inc/core_cm4.h ****     This function sets the priority for the specified interrupt. The interrupt
1148:inc/core_cm4.h ****     number can be positive to specify an external (device specific)
1149:inc/core_cm4.h ****     interrupt, or negative to specify an internal (core) interrupt.
1150:inc/core_cm4.h **** 
1151:inc/core_cm4.h ****     Note: The priority cannot be set for every core interrupt.
1152:inc/core_cm4.h **** 
1153:inc/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for set priority
1154:inc/core_cm4.h ****     \param [in]  priority  Priority to set
1155:inc/core_cm4.h ****  */
1156:inc/core_cm4.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1157:inc/core_cm4.h **** {
  27              		.loc 1 1157 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 83B0     		sub	sp, sp, #12
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 0346     		mov	r3, r0
  43 0008 3960     		str	r1, [r7, #0]
  44 000a FB71     		strb	r3, [r7, #7]
1158:inc/core_cm4.h ****   if(IRQn < 0) {
  45              		.loc 1 1158 0
  46 000c 97F90730 		ldrsb	r3, [r7, #7]
  47 0010 002B     		cmp	r3, #0
  48 0012 0DDA     		bge	.L2
1159:inc/core_cm4.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
  49              		.loc 1 1159 0
  50 0014 0E49     		ldr	r1, .L4
  51 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  52 0018 03F00F03 		and	r3, r3, #15
  53 001c A3F10403 		sub	r3, r3, #4
  54 0020 3A68     		ldr	r2, [r7, #0]
  55 0022 D2B2     		uxtb	r2, r2
  56 0024 4FEA0212 		lsl	r2, r2, #4
  57 0028 D2B2     		uxtb	r2, r2
  58 002a CB18     		adds	r3, r1, r3
  59 002c 1A76     		strb	r2, [r3, #24]
  60 002e 0AE0     		b	.L1
  61              	.L2:
1160:inc/core_cm4.h ****   else {
1161:inc/core_cm4.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
  62              		.loc 1 1161 0
  63 0030 0849     		ldr	r1, .L4+4
  64 0032 97F90730 		ldrsb	r3, [r7, #7]
  65 0036 3A68     		ldr	r2, [r7, #0]
  66 0038 D2B2     		uxtb	r2, r2
  67 003a 4FEA0212 		lsl	r2, r2, #4
  68 003e D2B2     		uxtb	r2, r2
  69 0040 CB18     		adds	r3, r1, r3
  70 0042 83F80023 		strb	r2, [r3, #768]
  71              	.L1:
1162:inc/core_cm4.h **** }
  72              		.loc 1 1162 0
  73 0046 07F10C07 		add	r7, r7, #12
  74 004a BD46     		mov	sp, r7
  75 004c 80BC     		pop	{r7}
  76 004e 7047     		bx	lr
  77              	.L5:
  78              		.align	2
  79              	.L4:
  80 0050 00ED00E0 		.word	-536810240
  81 0054 00E100E0 		.word	-536813312
  82              		.cfi_endproc
  83              	.LFE101:
  85              		.section	.text.SysTick_Config,"ax",%progbits
  86              		.align	2
  87              		.thumb
  88              		.thumb_func
  90              	SysTick_Config:
  91              	.LFB106:
1163:inc/core_cm4.h **** 
1164:inc/core_cm4.h **** 
1165:inc/core_cm4.h **** /** \brief  Get Interrupt Priority
1166:inc/core_cm4.h **** 
1167:inc/core_cm4.h ****     This function reads the priority for the specified interrupt. The interrupt
1168:inc/core_cm4.h ****     number can be positive to specify an external (device specific)
1169:inc/core_cm4.h ****     interrupt, or negative to specify an internal (core) interrupt.
1170:inc/core_cm4.h **** 
1171:inc/core_cm4.h ****     The returned priority value is automatically aligned to the implemented
1172:inc/core_cm4.h ****     priority bits of the microcontroller.
1173:inc/core_cm4.h **** 
1174:inc/core_cm4.h ****     \param [in]   IRQn  Number of the interrupt for get priority
1175:inc/core_cm4.h ****     \return             Interrupt Priority
1176:inc/core_cm4.h ****  */
1177:inc/core_cm4.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1178:inc/core_cm4.h **** {
1179:inc/core_cm4.h **** 
1180:inc/core_cm4.h ****   if(IRQn < 0) {
1181:inc/core_cm4.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1182:inc/core_cm4.h ****   else {
1183:inc/core_cm4.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1184:inc/core_cm4.h **** }
1185:inc/core_cm4.h **** 
1186:inc/core_cm4.h **** 
1187:inc/core_cm4.h **** /** \brief  Encode Priority
1188:inc/core_cm4.h **** 
1189:inc/core_cm4.h ****     This function encodes the priority for an interrupt with the given priority group,
1190:inc/core_cm4.h ****     preemptive priority value and sub priority value.
1191:inc/core_cm4.h ****     In case of a conflict between priority grouping and available
1192:inc/core_cm4.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1193:inc/core_cm4.h **** 
1194:inc/core_cm4.h ****     The returned priority value can be used for NVIC_SetPriority(...) function
1195:inc/core_cm4.h **** 
1196:inc/core_cm4.h ****     \param [in]     PriorityGroup  Used priority group
1197:inc/core_cm4.h ****     \param [in]   PreemptPriority  Preemptive priority value (starting from 0)
1198:inc/core_cm4.h ****     \param [in]       SubPriority  Sub priority value (starting from 0)
1199:inc/core_cm4.h ****     \return                        Encoded priority for the interrupt
1200:inc/core_cm4.h ****  */
1201:inc/core_cm4.h **** static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1202:inc/core_cm4.h **** {
1203:inc/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1204:inc/core_cm4.h ****   uint32_t PreemptPriorityBits;
1205:inc/core_cm4.h ****   uint32_t SubPriorityBits;
1206:inc/core_cm4.h **** 
1207:inc/core_cm4.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1208:inc/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1209:inc/core_cm4.h **** 
1210:inc/core_cm4.h ****   return (
1211:inc/core_cm4.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1212:inc/core_cm4.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1213:inc/core_cm4.h ****          );
1214:inc/core_cm4.h **** }
1215:inc/core_cm4.h **** 
1216:inc/core_cm4.h **** 
1217:inc/core_cm4.h **** /** \brief  Decode Priority
1218:inc/core_cm4.h **** 
1219:inc/core_cm4.h ****     This function decodes an interrupt priority value with the given priority group to
1220:inc/core_cm4.h ****     preemptive priority value and sub priority value.
1221:inc/core_cm4.h ****     In case of a conflict between priority grouping and available
1222:inc/core_cm4.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1223:inc/core_cm4.h **** 
1224:inc/core_cm4.h ****     The priority value can be retrieved with NVIC_GetPriority(...) function
1225:inc/core_cm4.h **** 
1226:inc/core_cm4.h ****     \param [in]         Priority   Priority value
1227:inc/core_cm4.h ****     \param [in]     PriorityGroup  Used priority group
1228:inc/core_cm4.h ****     \param [out] pPreemptPriority  Preemptive priority value (starting from 0)
1229:inc/core_cm4.h ****     \param [out]     pSubPriority  Sub priority value (starting from 0)
1230:inc/core_cm4.h ****  */
1231:inc/core_cm4.h **** static __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1232:inc/core_cm4.h **** {
1233:inc/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1234:inc/core_cm4.h ****   uint32_t PreemptPriorityBits;
1235:inc/core_cm4.h ****   uint32_t SubPriorityBits;
1236:inc/core_cm4.h **** 
1237:inc/core_cm4.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1238:inc/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1239:inc/core_cm4.h **** 
1240:inc/core_cm4.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1241:inc/core_cm4.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1242:inc/core_cm4.h **** }
1243:inc/core_cm4.h **** 
1244:inc/core_cm4.h **** 
1245:inc/core_cm4.h **** /** \brief  System Reset
1246:inc/core_cm4.h **** 
1247:inc/core_cm4.h ****     This function initiate a system reset request to reset the MCU.
1248:inc/core_cm4.h ****  */
1249:inc/core_cm4.h **** static __INLINE void NVIC_SystemReset(void)
1250:inc/core_cm4.h **** {
1251:inc/core_cm4.h ****   __DSB();                                                     /* Ensure all outstanding memory acc
1252:inc/core_cm4.h ****                                                                   buffered write are completed befo
1253:inc/core_cm4.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
1254:inc/core_cm4.h ****                  (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
1255:inc/core_cm4.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
1256:inc/core_cm4.h ****   __DSB();                                                     /* Ensure completion of memory acces
1257:inc/core_cm4.h ****   while(1);                                                    /* wait until reset */
1258:inc/core_cm4.h **** }
1259:inc/core_cm4.h **** 
1260:inc/core_cm4.h **** /*@} end of CMSIS_Core_NVICFunctions */
1261:inc/core_cm4.h **** 
1262:inc/core_cm4.h **** 
1263:inc/core_cm4.h **** 
1264:inc/core_cm4.h **** /* ##################################    SysTick function  ########################################
1265:inc/core_cm4.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1266:inc/core_cm4.h ****     \defgroup CMSIS_Core_SysTickFunctions CMSIS Core SysTick Functions
1267:inc/core_cm4.h ****   @{
1268:inc/core_cm4.h ****  */
1269:inc/core_cm4.h **** 
1270:inc/core_cm4.h **** #if (__Vendor_SysTickConfig == 0)
1271:inc/core_cm4.h **** 
1272:inc/core_cm4.h **** /** \brief  System Tick Configuration
1273:inc/core_cm4.h **** 
1274:inc/core_cm4.h ****     This function initialises the system tick timer and its interrupt and start the system tick tim
1275:inc/core_cm4.h ****     Counter is in free running mode to generate periodical interrupts.
1276:inc/core_cm4.h **** 
1277:inc/core_cm4.h ****     \param [in]  ticks  Number of ticks between two interrupts
1278:inc/core_cm4.h ****     \return          0  Function succeeded
1279:inc/core_cm4.h ****     \return          1  Function failed
1280:inc/core_cm4.h ****  */
1281:inc/core_cm4.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
1282:inc/core_cm4.h **** {
  92              		.loc 1 1282 0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 8
  95              		@ frame_needed = 1, uses_anonymous_args = 0
  96 0000 80B5     		push	{r7, lr}
  97              	.LCFI3:
  98              		.cfi_def_cfa_offset 8
  99              		.cfi_offset 7, -8
 100              		.cfi_offset 14, -4
 101 0002 82B0     		sub	sp, sp, #8
 102              	.LCFI4:
 103              		.cfi_def_cfa_offset 16
 104 0004 00AF     		add	r7, sp, #0
 105              	.LCFI5:
 106              		.cfi_def_cfa_register 7
 107 0006 7860     		str	r0, [r7, #4]
1283:inc/core_cm4.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 108              		.loc 1 1283 0
 109 0008 7A68     		ldr	r2, [r7, #4]
 110 000a 6FF07F43 		mvn	r3, #-16777216
 111 000e 9A42     		cmp	r2, r3
 112 0010 02D9     		bls	.L7
 113              		.loc 1 1283 0 is_stmt 0 discriminator 1
 114 0012 4FF00103 		mov	r3, #1
 115 0016 16E0     		b	.L8
 116              	.L7:
1284:inc/core_cm4.h **** 
1285:inc/core_cm4.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 117              		.loc 1 1285 0 is_stmt 1
 118 0018 0D4B     		ldr	r3, .L9
 119 001a 7A68     		ldr	r2, [r7, #4]
 120 001c 22F07F42 		bic	r2, r2, #-16777216
 121 0020 02F1FF32 		add	r2, r2, #-1
 122 0024 5A60     		str	r2, [r3, #4]
1286:inc/core_cm4.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 123              		.loc 1 1286 0
 124 0026 4FF0FF30 		mov	r0, #-1
 125 002a 4FF00F01 		mov	r1, #15
 126 002e FFF7FEFF 		bl	NVIC_SetPriority
1287:inc/core_cm4.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 127              		.loc 1 1287 0
 128 0032 074B     		ldr	r3, .L9
 129 0034 4FF00002 		mov	r2, #0
 130 0038 9A60     		str	r2, [r3, #8]
1288:inc/core_cm4.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 131              		.loc 1 1288 0
 132 003a 054B     		ldr	r3, .L9
 133 003c 4FF00702 		mov	r2, #7
 134 0040 1A60     		str	r2, [r3, #0]
1289:inc/core_cm4.h ****                    SysTick_CTRL_TICKINT_Msk   |
1290:inc/core_cm4.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
1291:inc/core_cm4.h ****   return (0);                                                  /* Function successful */
 135              		.loc 1 1291 0
 136 0042 4FF00003 		mov	r3, #0
 137              	.L8:
1292:inc/core_cm4.h **** }
 138              		.loc 1 1292 0
 139 0046 1846     		mov	r0, r3
 140 0048 07F10807 		add	r7, r7, #8
 141 004c BD46     		mov	sp, r7
 142 004e 80BD     		pop	{r7, pc}
 143              	.L10:
 144              		.align	2
 145              	.L9:
 146 0050 10E000E0 		.word	-536813552
 147              		.cfi_endproc
 148              	.LFE106:
 150              		.comm	RCC_Clocks,60,4
 151              		.global	TimingDelay
 152              		.section	.bss.TimingDelay,"aw",%nobits
 153              		.align	2
 156              	TimingDelay:
 157 0000 00000000 		.space	4
 158              		.global	UserButtonPressed
 159              		.section	.bss.UserButtonPressed,"aw",%nobits
 160              		.align	2
 163              	UserButtonPressed:
 164 0000 00000000 		.space	4
 165              		.global	HeadingValue
 166              		.section	.bss.HeadingValue,"aw",%nobits
 167              		.align	2
 170              	HeadingValue:
 171 0000 00000000 		.space	4
 172              		.global	MagBuffer
 173              		.section	.bss.MagBuffer,"aw",%nobits
 174              		.align	2
 177              	MagBuffer:
 178 0000 00000000 		.space	12
 178      00000000 
 178      00000000 
 179              		.global	AccBuffer
 180              		.section	.bss.AccBuffer,"aw",%nobits
 181              		.align	2
 184              	AccBuffer:
 185 0000 00000000 		.space	12
 185      00000000 
 185      00000000 
 186              		.global	Buffer
 187              		.section	.bss.Buffer,"aw",%nobits
 188              		.align	2
 191              	Buffer:
 192 0000 00000000 		.space	12
 192      00000000 
 192      00000000 
 193              		.comm	Xval,1,1
 194              		.global	Yval
 195              		.section	.bss.Yval,"aw",%nobits
 198              	Yval:
 199 0000 00       		.space	1
 200              		.global	DataReady
 201              		.section	.bss.DataReady,"aw",%nobits
 204              	DataReady:
 205 0000 00       		.space	1
 206              		.global	PrevXferComplete
 207              		.section	.data.PrevXferComplete,"aw",%progbits
 210              	PrevXferComplete:
 211 0000 01       		.byte	1
 212              		.global	USBConnectTimeOut
 213              		.section	.data.USBConnectTimeOut,"aw",%progbits
 214              		.align	2
 217              	USBConnectTimeOut:
 218 0000 64000000 		.word	100
 219              		.comm	fNormAcc,4,4
 220              		.comm	fSinRoll,4,4
 221              		.comm	fCosRoll,4,4
 222              		.comm	fSinPitch,4,4
 223              		.global	fCosPitch
 224              		.section	.bss.fCosPitch,"aw",%nobits
 225              		.align	2
 228              	fCosPitch:
 229 0000 00000000 		.space	4
 230              		.global	RollAng
 231              		.section	.bss.RollAng,"aw",%nobits
 232              		.align	2
 235              	RollAng:
 236 0000 00000000 		.space	4
 237              		.global	PitchAng
 238              		.section	.bss.PitchAng,"aw",%nobits
 239              		.align	2
 242              	PitchAng:
 243 0000 00000000 		.space	4
 244              		.comm	fTiltedX,4,4
 245              		.global	fTiltedY
 246              		.section	.bss.fTiltedY,"aw",%nobits
 247              		.align	2
 250              	fTiltedY:
 251 0000 00000000 		.space	4
 252              		.global	__aeabi_f2d
 253              		.global	__aeabi_d2f
 254              		.global	__aeabi_dmul
 255              		.global	__aeabi_ddiv
 256              		.global	__aeabi_dadd
 257              		.section	.text.main,"ax",%progbits
 258              		.align	2
 259              		.global	main
 260              		.thumb
 261              		.thumb_func
 263              	main:
 264              	.LFB110:
 265              		.file 2 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****   ******************************************************************************
   3:src/main.c    ****   * @file    main.c 
   4:src/main.c    ****   * @author  MCD Application Team
   5:src/main.c    ****   * @version V1.1.0
   6:src/main.c    ****   * @date    20-September-2012
   7:src/main.c    ****   * @brief   Main program body
   8:src/main.c    ****   ******************************************************************************
   9:src/main.c    ****   * @attention
  10:src/main.c    ****   *
  11:src/main.c    ****   * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  12:src/main.c    ****   *
  13:src/main.c    ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  14:src/main.c    ****   * You may not use this file except in compliance with the License.
  15:src/main.c    ****   * You may obtain a copy of the License at:
  16:src/main.c    ****   *
  17:src/main.c    ****   *        http://www.st.com/software_license_agreement_liberty_v2
  18:src/main.c    ****   *
  19:src/main.c    ****   * Unless required by applicable law or agreed to in writing, software 
  20:src/main.c    ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  21:src/main.c    ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22:src/main.c    ****   * See the License for the specific language governing permissions and
  23:src/main.c    ****   * limitations under the License.
  24:src/main.c    ****   *
  25:src/main.c    ****   ******************************************************************************
  26:src/main.c    ****   */
  27:src/main.c    **** 
  28:src/main.c    **** 
  29:src/main.c    **** /* Includes ------------------------------------------------------------------*/
  30:src/main.c    **** #include "main.h"
  31:src/main.c    **** #include </home/manish/VTS/MEMS-stm32f3/libs/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rcc.h>
  32:src/main.c    **** #include </home/manish/VTS/MEMS-stm32f3/libs/STM32F30x_StdPeriph_Driver/inc/stm32f30x_gpio.h>
  33:src/main.c    **** #include </home/manish/VTS/MEMS-stm32f3/libs/STM32F30x_StdPeriph_Driver/inc/stm32f30x_misc.h>
  34:src/main.c    **** #include </home/manish/VTS/MEMS-stm32f3/libs/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h>
  35:src/main.c    **** #include </home/manish/VTS/MEMS-stm32f3/libs/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h>
  36:src/main.c    **** #include </home/manish/VTS/MEMS-stm32f3/libs/STM32F30x_StdPeriph_Driver/inc/stm32f30x_exti.h>
  37:src/main.c    **** /** @addtogroup STM32F3-Discovery_Demo
  38:src/main.c    ****   * @{
  39:src/main.c    ****   */
  40:src/main.c    **** 
  41:src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  42:src/main.c    **** /* Private define ------------------------------------------------------------*/
  43:src/main.c    **** /* Private macro -------------------------------------------------------------*/
  44:src/main.c    **** #define ABS(x)         (x < 0) ? (-x) : x
  45:src/main.c    **** 
  46:src/main.c    **** #define L3G_Sensitivity_250dps     (float)   114.285f         /*!< gyroscope sensitivity with 250 d
  47:src/main.c    **** #define L3G_Sensitivity_500dps     (float)    57.1429f        /*!< gyroscope sensitivity with 500 d
  48:src/main.c    **** #define L3G_Sensitivity_2000dps    (float)    14.285f	      /*!< gyroscope sensitivity with 2000 dp
  49:src/main.c    **** #define PI                         (float)     3.14159265f
  50:src/main.c    **** 
  51:src/main.c    **** #define LSM_Acc_Sensitivity_2g     (float)     1.0f            /*!< accelerometer sensitivity with 
  52:src/main.c    **** #define LSM_Acc_Sensitivity_4g     (float)     0.5f            /*!< accelerometer sensitivity with 
  53:src/main.c    **** #define LSM_Acc_Sensitivity_8g     (float)     0.25f           /*!< accelerometer sensitivity with 
  54:src/main.c    **** #define LSM_Acc_Sensitivity_16g    (float)     0.0834f         /*!< accelerometer sensitivity with 
  55:src/main.c    **** 
  56:src/main.c    **** /* Private variables ---------------------------------------------------------*/
  57:src/main.c    ****   RCC_ClocksTypeDef RCC_Clocks;
  58:src/main.c    **** __IO uint32_t TimingDelay = 0;
  59:src/main.c    **** __IO uint32_t UserButtonPressed = 0;
  60:src/main.c    **** __IO float HeadingValue = 0.0f;  
  61:src/main.c    **** float MagBuffer[3] = {0.0f}, AccBuffer[3] = {0.0f}, Buffer[3] = {0.0f};
  62:src/main.c    **** uint8_t Xval, Yval = 0x00;
  63:src/main.c    **** 
  64:src/main.c    **** __IO uint8_t DataReady = 0;
  65:src/main.c    **** __IO uint8_t PrevXferComplete = 1;
  66:src/main.c    **** __IO uint32_t USBConnectTimeOut = 100;
  67:src/main.c    **** 
  68:src/main.c    **** float fNormAcc,fSinRoll,fCosRoll,fSinPitch,fCosPitch = 0.0f, RollAng = 0.0f, PitchAng = 0.0f;
  69:src/main.c    **** float fTiltedX,fTiltedY = 0.0f;
  70:src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  71:src/main.c    **** /* Private functions ---------------------------------------------------------*/
  72:src/main.c    **** 
  73:src/main.c    **** /**
  74:src/main.c    ****   * @brief  Main program.
  75:src/main.c    ****   * @param  None 
  76:src/main.c    ****   * @retval None
  77:src/main.c    ****   */
  78:src/main.c    **** int main(void)
  79:src/main.c    **** {  
 266              		.loc 2 79 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 8
 269              		@ frame_needed = 1, uses_anonymous_args = 0
 270 0000 80B5     		push	{r7, lr}
 271              	.LCFI6:
 272              		.cfi_def_cfa_offset 8
 273              		.cfi_offset 7, -8
 274              		.cfi_offset 14, -4
 275 0002 82B0     		sub	sp, sp, #8
 276              	.LCFI7:
 277              		.cfi_def_cfa_offset 16
 278 0004 00AF     		add	r7, sp, #0
 279              	.LCFI8:
 280              		.cfi_def_cfa_register 7
  80:src/main.c    ****   uint8_t i = 0;
 281              		.loc 2 80 0
 282 0006 4FF00003 		mov	r3, #0
 283 000a FB71     		strb	r3, [r7, #7]
  81:src/main.c    ****   /* SysTick end of count event each 10ms */
  82:src/main.c    ****   RCC_GetClocksFreq(&RCC_Clocks);
 284              		.loc 2 82 0
 285 000c D948     		ldr	r0, .L119
 286 000e FFF7FEFF 		bl	RCC_GetClocksFreq
  83:src/main.c    ****  SysTick_Config(RCC_Clocks.HCLK_Frequency / 100);
 287              		.loc 2 83 0
 288 0012 D84B     		ldr	r3, .L119
 289 0014 5A68     		ldr	r2, [r3, #4]
 290 0016 D84B     		ldr	r3, .L119+4
 291 0018 A3FB0213 		umull	r1, r3, r3, r2
 292 001c 4FEA5313 		lsr	r3, r3, #5
 293 0020 1846     		mov	r0, r3
 294 0022 FFF7FEFF 		bl	SysTick_Config
  84:src/main.c    ****   
  85:src/main.c    ****   /* Initialize LEDs and User Button available on STM32F3-Discovery board */
  86:src/main.c    ****   STM_EVAL_LEDInit(LED3);
 295              		.loc 2 86 0
 296 0026 4FF00000 		mov	r0, #0
 297 002a FFF7FEFF 		bl	STM_EVAL_LEDInit
  87:src/main.c    ****   STM_EVAL_LEDInit(LED4);
 298              		.loc 2 87 0
 299 002e 4FF00100 		mov	r0, #1
 300 0032 FFF7FEFF 		bl	STM_EVAL_LEDInit
  88:src/main.c    ****   STM_EVAL_LEDInit(LED5);
 301              		.loc 2 88 0
 302 0036 4FF00200 		mov	r0, #2
 303 003a FFF7FEFF 		bl	STM_EVAL_LEDInit
  89:src/main.c    ****   STM_EVAL_LEDInit(LED6);
 304              		.loc 2 89 0
 305 003e 4FF00300 		mov	r0, #3
 306 0042 FFF7FEFF 		bl	STM_EVAL_LEDInit
  90:src/main.c    ****   STM_EVAL_LEDInit(LED7);
 307              		.loc 2 90 0
 308 0046 4FF00400 		mov	r0, #4
 309 004a FFF7FEFF 		bl	STM_EVAL_LEDInit
  91:src/main.c    ****   STM_EVAL_LEDInit(LED8);
 310              		.loc 2 91 0
 311 004e 4FF00500 		mov	r0, #5
 312 0052 FFF7FEFF 		bl	STM_EVAL_LEDInit
  92:src/main.c    ****   STM_EVAL_LEDInit(LED9);
 313              		.loc 2 92 0
 314 0056 4FF00600 		mov	r0, #6
 315 005a FFF7FEFF 		bl	STM_EVAL_LEDInit
  93:src/main.c    ****   STM_EVAL_LEDInit(LED10);
 316              		.loc 2 93 0
 317 005e 4FF00700 		mov	r0, #7
 318 0062 FFF7FEFF 		bl	STM_EVAL_LEDInit
  94:src/main.c    ****   
  95:src/main.c    ****   STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_EXTI); 
 319              		.loc 2 95 0
 320 0066 4FF00000 		mov	r0, #0
 321 006a 4FF00101 		mov	r1, #1
 322 006e FFF7FEFF 		bl	STM_EVAL_PBInit
  96:src/main.c    **** 
  97:src/main.c    ****   /* Configure the USB */
  98:src/main.c    ****   //Demo_USB();
  99:src/main.c    ****   
 100:src/main.c    ****   /* Reset UserButton_Pressed variable */
 101:src/main.c    ****   UserButtonPressed = 0x00; 
 323              		.loc 2 101 0
 324 0072 C24B     		ldr	r3, .L119+8
 325 0074 4FF00002 		mov	r2, #0
 326 0078 1A60     		str	r2, [r3, #0]
 327              	.L79:
 102:src/main.c    ****    
 103:src/main.c    ****   /* Infinite loop */
 104:src/main.c    ****   while (1)
 105:src/main.c    ****   {   
 106:src/main.c    ****     /* LEDs Off */
 107:src/main.c    ****     STM_EVAL_LEDOff(LED3);
 328              		.loc 2 107 0
 329 007a 4FF00000 		mov	r0, #0
 330 007e FFF7FEFF 		bl	STM_EVAL_LEDOff
 108:src/main.c    ****     STM_EVAL_LEDOff(LED6);
 331              		.loc 2 108 0
 332 0082 4FF00300 		mov	r0, #3
 333 0086 FFF7FEFF 		bl	STM_EVAL_LEDOff
 109:src/main.c    ****     STM_EVAL_LEDOff(LED7);
 334              		.loc 2 109 0
 335 008a 4FF00400 		mov	r0, #4
 336 008e FFF7FEFF 		bl	STM_EVAL_LEDOff
 110:src/main.c    ****     STM_EVAL_LEDOff(LED4);
 337              		.loc 2 110 0
 338 0092 4FF00100 		mov	r0, #1
 339 0096 FFF7FEFF 		bl	STM_EVAL_LEDOff
 111:src/main.c    ****     STM_EVAL_LEDOff(LED10);
 340              		.loc 2 111 0
 341 009a 4FF00700 		mov	r0, #7
 342 009e FFF7FEFF 		bl	STM_EVAL_LEDOff
 112:src/main.c    ****     STM_EVAL_LEDOff(LED8);
 343              		.loc 2 112 0
 344 00a2 4FF00500 		mov	r0, #5
 345 00a6 FFF7FEFF 		bl	STM_EVAL_LEDOff
 113:src/main.c    ****     STM_EVAL_LEDOff(LED9);
 346              		.loc 2 113 0
 347 00aa 4FF00600 		mov	r0, #6
 348 00ae FFF7FEFF 		bl	STM_EVAL_LEDOff
 114:src/main.c    ****     STM_EVAL_LEDOff(LED5);
 349              		.loc 2 114 0
 350 00b2 4FF00200 		mov	r0, #2
 351 00b6 FFF7FEFF 		bl	STM_EVAL_LEDOff
 115:src/main.c    ****     
 116:src/main.c    ****     /* Waiting User Button is pressed */
 117:src/main.c    ****     while (UserButtonPressed == 0x00)
 352              		.loc 2 117 0
 353 00ba 3FE0     		b	.L12
 354              	.L13:
 118:src/main.c    ****     {
 119:src/main.c    ****       /* Toggle LD3 */
 120:src/main.c    ****       STM_EVAL_LEDToggle(LED3);
 355              		.loc 2 120 0
 356 00bc 4FF00000 		mov	r0, #0
 357 00c0 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 121:src/main.c    ****       /* Insert 50 ms delay */
 122:src/main.c    ****       Delay(5);
 358              		.loc 2 122 0
 359 00c4 4FF00500 		mov	r0, #5
 360 00c8 FFF7FEFF 		bl	Delay
 123:src/main.c    ****       /* Toggle LD5 */
 124:src/main.c    ****       STM_EVAL_LEDToggle(LED5);
 361              		.loc 2 124 0
 362 00cc 4FF00200 		mov	r0, #2
 363 00d0 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 125:src/main.c    ****       /* Insert 50 ms delay */
 126:src/main.c    ****       Delay(5);
 364              		.loc 2 126 0
 365 00d4 4FF00500 		mov	r0, #5
 366 00d8 FFF7FEFF 		bl	Delay
 127:src/main.c    ****       /* Toggle LD7 */
 128:src/main.c    ****       STM_EVAL_LEDToggle(LED7);
 367              		.loc 2 128 0
 368 00dc 4FF00400 		mov	r0, #4
 369 00e0 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 129:src/main.c    ****       /* Insert 50 ms delay */
 130:src/main.c    ****       Delay(5);
 370              		.loc 2 130 0
 371 00e4 4FF00500 		mov	r0, #5
 372 00e8 FFF7FEFF 		bl	Delay
 131:src/main.c    ****       /* Toggle LD9 */
 132:src/main.c    ****       STM_EVAL_LEDToggle(LED9);
 373              		.loc 2 132 0
 374 00ec 4FF00600 		mov	r0, #6
 375 00f0 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 133:src/main.c    ****       /* Insert 50 ms delay */
 134:src/main.c    ****       Delay(5);
 376              		.loc 2 134 0
 377 00f4 4FF00500 		mov	r0, #5
 378 00f8 FFF7FEFF 		bl	Delay
 135:src/main.c    ****       /* Toggle LD10 */
 136:src/main.c    ****       STM_EVAL_LEDToggle(LED10);
 379              		.loc 2 136 0
 380 00fc 4FF00700 		mov	r0, #7
 381 0100 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 137:src/main.c    ****       /* Insert 50 ms delay */
 138:src/main.c    ****       Delay(5);
 382              		.loc 2 138 0
 383 0104 4FF00500 		mov	r0, #5
 384 0108 FFF7FEFF 		bl	Delay
 139:src/main.c    ****       /* Toggle LD8 */
 140:src/main.c    ****       STM_EVAL_LEDToggle(LED8);
 385              		.loc 2 140 0
 386 010c 4FF00500 		mov	r0, #5
 387 0110 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 141:src/main.c    ****       /* Insert 50 ms delay */
 142:src/main.c    ****       Delay(5); 
 388              		.loc 2 142 0
 389 0114 4FF00500 		mov	r0, #5
 390 0118 FFF7FEFF 		bl	Delay
 143:src/main.c    ****       /* Toggle LD6 */
 144:src/main.c    ****       STM_EVAL_LEDToggle(LED6);
 391              		.loc 2 144 0
 392 011c 4FF00300 		mov	r0, #3
 393 0120 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 145:src/main.c    ****       /* Insert 50 ms delay */
 146:src/main.c    ****       Delay(5);
 394              		.loc 2 146 0
 395 0124 4FF00500 		mov	r0, #5
 396 0128 FFF7FEFF 		bl	Delay
 147:src/main.c    ****       /* Toggle LD4 */
 148:src/main.c    ****       STM_EVAL_LEDToggle(LED4);
 397              		.loc 2 148 0
 398 012c 4FF00100 		mov	r0, #1
 399 0130 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 149:src/main.c    ****       /* Insert 50 ms delay */
 150:src/main.c    ****       Delay(5);
 400              		.loc 2 150 0
 401 0134 4FF00500 		mov	r0, #5
 402 0138 FFF7FEFF 		bl	Delay
 403              	.L12:
 117:src/main.c    ****     while (UserButtonPressed == 0x00)
 404              		.loc 2 117 0 discriminator 1
 405 013c 8F4B     		ldr	r3, .L119+8
 406 013e 1B68     		ldr	r3, [r3, #0]
 407 0140 002B     		cmp	r3, #0
 408 0142 BBD0     		beq	.L13
 151:src/main.c    ****     }
 152:src/main.c    ****     
 153:src/main.c    ****     DataReady = 0x00;
 409              		.loc 2 153 0
 410 0144 8E4B     		ldr	r3, .L119+12
 411 0146 4FF00002 		mov	r2, #0
 412 014a 1A70     		strb	r2, [r3, #0]
 154:src/main.c    ****     
 155:src/main.c    ****     /* All LEDs Off */
 156:src/main.c    ****     STM_EVAL_LEDOff(LED3);
 413              		.loc 2 156 0
 414 014c 4FF00000 		mov	r0, #0
 415 0150 FFF7FEFF 		bl	STM_EVAL_LEDOff
 157:src/main.c    ****     STM_EVAL_LEDOff(LED6);
 416              		.loc 2 157 0
 417 0154 4FF00300 		mov	r0, #3
 418 0158 FFF7FEFF 		bl	STM_EVAL_LEDOff
 158:src/main.c    ****     STM_EVAL_LEDOff(LED7);
 419              		.loc 2 158 0
 420 015c 4FF00400 		mov	r0, #4
 421 0160 FFF7FEFF 		bl	STM_EVAL_LEDOff
 159:src/main.c    ****     STM_EVAL_LEDOff(LED4);
 422              		.loc 2 159 0
 423 0164 4FF00100 		mov	r0, #1
 424 0168 FFF7FEFF 		bl	STM_EVAL_LEDOff
 160:src/main.c    ****     STM_EVAL_LEDOff(LED10);
 425              		.loc 2 160 0
 426 016c 4FF00700 		mov	r0, #7
 427 0170 FFF7FEFF 		bl	STM_EVAL_LEDOff
 161:src/main.c    ****     STM_EVAL_LEDOff(LED8);
 428              		.loc 2 161 0
 429 0174 4FF00500 		mov	r0, #5
 430 0178 FFF7FEFF 		bl	STM_EVAL_LEDOff
 162:src/main.c    ****     STM_EVAL_LEDOff(LED9);
 431              		.loc 2 162 0
 432 017c 4FF00600 		mov	r0, #6
 433 0180 FFF7FEFF 		bl	STM_EVAL_LEDOff
 163:src/main.c    ****     STM_EVAL_LEDOff(LED5); 
 434              		.loc 2 163 0
 435 0184 4FF00200 		mov	r0, #2
 436 0188 FFF7FEFF 		bl	STM_EVAL_LEDOff
 164:src/main.c    ****     
 165:src/main.c    ****     /* Demo Gyroscope */
 166:src/main.c    ****    // Demo_GyroConfig();
 167:src/main.c    **** 
 168:src/main.c    ****     /* Waiting User Button is pressed */
 169:src/main.c    ****     while (UserButtonPressed == 0x01)
 437              		.loc 2 169 0
 438 018c B1E0     		b	.L14
 439              	.L117:
 170:src/main.c    ****     {
 171:src/main.c    ****       /* Wait for data ready */
 172:src/main.c    ****       while(DataReady != 0x05)
 440              		.loc 2 172 0
 441 018e 00BF     		nop
 442              	.L15:
 443              		.loc 2 172 0 is_stmt 0 discriminator 1
 444 0190 7B4B     		ldr	r3, .L119+12
 445 0192 1B78     		ldrb	r3, [r3, #0]
 446 0194 DBB2     		uxtb	r3, r3
 447 0196 052B     		cmp	r3, #5
 448 0198 FAD1     		bne	.L15
 173:src/main.c    ****       {}
 174:src/main.c    ****       DataReady = 0x00;
 449              		.loc 2 174 0 is_stmt 1
 450 019a 794B     		ldr	r3, .L119+12
 451 019c 4FF00002 		mov	r2, #0
 452 01a0 1A70     		strb	r2, [r3, #0]
 175:src/main.c    ****       
 176:src/main.c    ****       /* LEDs Off */
 177:src/main.c    ****       STM_EVAL_LEDOff(LED3);
 453              		.loc 2 177 0
 454 01a2 4FF00000 		mov	r0, #0
 455 01a6 FFF7FEFF 		bl	STM_EVAL_LEDOff
 178:src/main.c    ****       STM_EVAL_LEDOff(LED6);
 456              		.loc 2 178 0
 457 01aa 4FF00300 		mov	r0, #3
 458 01ae FFF7FEFF 		bl	STM_EVAL_LEDOff
 179:src/main.c    ****       STM_EVAL_LEDOff(LED7);
 459              		.loc 2 179 0
 460 01b2 4FF00400 		mov	r0, #4
 461 01b6 FFF7FEFF 		bl	STM_EVAL_LEDOff
 180:src/main.c    ****       STM_EVAL_LEDOff(LED4);
 462              		.loc 2 180 0
 463 01ba 4FF00100 		mov	r0, #1
 464 01be FFF7FEFF 		bl	STM_EVAL_LEDOff
 181:src/main.c    ****       STM_EVAL_LEDOff(LED10);
 465              		.loc 2 181 0
 466 01c2 4FF00700 		mov	r0, #7
 467 01c6 FFF7FEFF 		bl	STM_EVAL_LEDOff
 182:src/main.c    ****       STM_EVAL_LEDOff(LED8);
 468              		.loc 2 182 0
 469 01ca 4FF00500 		mov	r0, #5
 470 01ce FFF7FEFF 		bl	STM_EVAL_LEDOff
 183:src/main.c    ****       STM_EVAL_LEDOff(LED9);
 471              		.loc 2 183 0
 472 01d2 4FF00600 		mov	r0, #6
 473 01d6 FFF7FEFF 		bl	STM_EVAL_LEDOff
 184:src/main.c    ****       STM_EVAL_LEDOff(LED5);
 474              		.loc 2 184 0
 475 01da 4FF00200 		mov	r0, #2
 476 01de FFF7FEFF 		bl	STM_EVAL_LEDOff
 185:src/main.c    ****       
 186:src/main.c    ****       /* Read Gyro Angular data */
 187:src/main.c    ****       Demo_GyroReadAngRate(Buffer);
 477              		.loc 2 187 0
 478 01e2 6848     		ldr	r0, .L119+16
 479 01e4 FFF7FEFF 		bl	Demo_GyroReadAngRate
 188:src/main.c    ****          
 189:src/main.c    ****       /* Update autoreload and capture compare registers value*/
 190:src/main.c    ****       Xval = ABS((int8_t)(Buffer[0]));
 480              		.loc 2 190 0
 481 01e8 664B     		ldr	r3, .L119+16
 482 01ea D3ED007A 		flds	s15, [r3, #0]
 483 01ee FDEEE77A 		ftosizs	s15, s15
 484 01f2 17EE903A 		fmrs	r3, s15	@ int
 485 01f6 DBB2     		uxtb	r3, r3
 486 01f8 5BB2     		sxtb	r3, r3
 487 01fa 002B     		cmp	r3, #0
 488 01fc B8BF     		it	lt
 489 01fe 5B42     		rsblt	r3, r3, #0
 490 0200 DAB2     		uxtb	r2, r3
 491 0202 614B     		ldr	r3, .L119+20
 492 0204 1A70     		strb	r2, [r3, #0]
 191:src/main.c    ****       Yval = ABS((int8_t)(Buffer[1])); 
 493              		.loc 2 191 0
 494 0206 5F4B     		ldr	r3, .L119+16
 495 0208 D3ED017A 		flds	s15, [r3, #4]
 496 020c FDEEE77A 		ftosizs	s15, s15
 497 0210 17EE903A 		fmrs	r3, s15	@ int
 498 0214 DBB2     		uxtb	r3, r3
 499 0216 5BB2     		sxtb	r3, r3
 500 0218 002B     		cmp	r3, #0
 501 021a B8BF     		it	lt
 502 021c 5B42     		rsblt	r3, r3, #0
 503 021e DAB2     		uxtb	r2, r3
 504 0220 5A4B     		ldr	r3, .L119+24
 505 0222 1A70     		strb	r2, [r3, #0]
 192:src/main.c    ****       
 193:src/main.c    ****       if ( Xval>Yval)
 506              		.loc 2 193 0
 507 0224 584B     		ldr	r3, .L119+20
 508 0226 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 509 0228 584B     		ldr	r3, .L119+24
 510 022a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 511 022c 9A42     		cmp	r2, r3
 512 022e 30D9     		bls	.L16
 194:src/main.c    ****       {
 195:src/main.c    ****         if ((int8_t)Buffer[0] > 5.0f)
 513              		.loc 2 195 0
 514 0230 544B     		ldr	r3, .L119+16
 515 0232 D3ED007A 		flds	s15, [r3, #0]
 516 0236 FDEEE77A 		ftosizs	s15, s15
 517 023a 17EE903A 		fmrs	r3, s15	@ int
 518 023e DBB2     		uxtb	r3, r3
 519 0240 5BB2     		sxtb	r3, r3
 520 0242 07EE903A 		fmsr	s15, r3	@ int
 521 0246 B8EEE77A 		fsitos	s14, s15
 522 024a F1EE047A 		fconsts	s15, #20
 523 024e B4EEE77A 		fcmpes	s14, s15
 524 0252 F1EE10FA 		fmstat
 525 0256 03DD     		ble	.L17
 526              	.L80:
 196:src/main.c    ****         { 
 197:src/main.c    ****           /* LD10 On */
 198:src/main.c    ****           STM_EVAL_LEDOn(LED10);
 527              		.loc 2 198 0
 528 0258 4FF00700 		mov	r0, #7
 529 025c FFF7FEFF 		bl	STM_EVAL_LEDOn
 530              	.L17:
 199:src/main.c    ****         }
 200:src/main.c    ****         if ((int8_t)Buffer[0] < -5.0f)
 531              		.loc 2 200 0
 532 0260 484B     		ldr	r3, .L119+16
 533 0262 D3ED007A 		flds	s15, [r3, #0]
 534 0266 FDEEE77A 		ftosizs	s15, s15
 535 026a 17EE903A 		fmrs	r3, s15	@ int
 536 026e DBB2     		uxtb	r3, r3
 537 0270 5BB2     		sxtb	r3, r3
 538 0272 07EE903A 		fmsr	s15, r3	@ int
 539 0276 B8EEE77A 		fsitos	s14, s15
 540 027a F9EE047A 		fconsts	s15, #148
 541 027e B4EEE77A 		fcmpes	s14, s15
 542 0282 F1EE10FA 		fmstat
 543 0286 34D5     		bpl	.L14
 544              	.L81:
 201:src/main.c    ****         { 
 202:src/main.c    ****           /* LD3 On */
 203:src/main.c    ****           STM_EVAL_LEDOn(LED3);
 545              		.loc 2 203 0
 546 0288 4FF00000 		mov	r0, #0
 547 028c FFF7FEFF 		bl	STM_EVAL_LEDOn
 548 0290 2FE0     		b	.L14
 549              	.L16:
 204:src/main.c    ****         }
 205:src/main.c    ****       }
 206:src/main.c    ****       else
 207:src/main.c    ****       {
 208:src/main.c    ****         if ((int8_t)Buffer[1] < -5.0f)
 550              		.loc 2 208 0
 551 0292 3C4B     		ldr	r3, .L119+16
 552 0294 D3ED017A 		flds	s15, [r3, #4]
 553 0298 FDEEE77A 		ftosizs	s15, s15
 554 029c 17EE903A 		fmrs	r3, s15	@ int
 555 02a0 DBB2     		uxtb	r3, r3
 556 02a2 5BB2     		sxtb	r3, r3
 557 02a4 07EE903A 		fmsr	s15, r3	@ int
 558 02a8 B8EEE77A 		fsitos	s14, s15
 559 02ac F9EE047A 		fconsts	s15, #148
 560 02b0 B4EEE77A 		fcmpes	s14, s15
 561 02b4 F1EE10FA 		fmstat
 562 02b8 03D5     		bpl	.L20
 563              	.L82:
 209:src/main.c    ****         {
 210:src/main.c    ****           /* LD6 on */
 211:src/main.c    ****           STM_EVAL_LEDOn(LED6);
 564              		.loc 2 211 0
 565 02ba 4FF00300 		mov	r0, #3
 566 02be FFF7FEFF 		bl	STM_EVAL_LEDOn
 567              	.L20:
 212:src/main.c    ****         }
 213:src/main.c    ****         if ((int8_t)Buffer[1] > 5.0f)
 568              		.loc 2 213 0
 569 02c2 304B     		ldr	r3, .L119+16
 570 02c4 D3ED017A 		flds	s15, [r3, #4]
 571 02c8 FDEEE77A 		ftosizs	s15, s15
 572 02cc 17EE903A 		fmrs	r3, s15	@ int
 573 02d0 DBB2     		uxtb	r3, r3
 574 02d2 5BB2     		sxtb	r3, r3
 575 02d4 07EE903A 		fmsr	s15, r3	@ int
 576 02d8 B8EEE77A 		fsitos	s14, s15
 577 02dc F1EE047A 		fconsts	s15, #20
 578 02e0 B4EEE77A 		fcmpes	s14, s15
 579 02e4 F1EE10FA 		fmstat
 580 02e8 03DD     		ble	.L14
 581              	.L83:
 214:src/main.c    ****         {
 215:src/main.c    ****           /* LD7 On */
 216:src/main.c    ****           STM_EVAL_LEDOn(LED7);
 582              		.loc 2 216 0
 583 02ea 4FF00400 		mov	r0, #4
 584 02ee FFF7FEFF 		bl	STM_EVAL_LEDOn
 585              	.L14:
 169:src/main.c    ****     while (UserButtonPressed == 0x01)
 586              		.loc 2 169 0 discriminator 1
 587 02f2 224B     		ldr	r3, .L119+8
 588 02f4 1B68     		ldr	r3, [r3, #0]
 589 02f6 012B     		cmp	r3, #1
 590 02f8 3FF449AF 		beq	.L117
 217:src/main.c    ****         } 
 218:src/main.c    ****       }
 219:src/main.c    ****     }
 220:src/main.c    ****         
 221:src/main.c    ****     DataReady = 0x00;
 591              		.loc 2 221 0
 592 02fc 204B     		ldr	r3, .L119+12
 593 02fe 4FF00002 		mov	r2, #0
 594 0302 1A70     		strb	r2, [r3, #0]
 222:src/main.c    ****     
 223:src/main.c    ****     /* LEDs Off */
 224:src/main.c    ****     STM_EVAL_LEDOff(LED4);
 595              		.loc 2 224 0
 596 0304 4FF00100 		mov	r0, #1
 597 0308 FFF7FEFF 		bl	STM_EVAL_LEDOff
 225:src/main.c    ****     STM_EVAL_LEDOff(LED3);
 598              		.loc 2 225 0
 599 030c 4FF00000 		mov	r0, #0
 600 0310 FFF7FEFF 		bl	STM_EVAL_LEDOff
 226:src/main.c    ****     STM_EVAL_LEDOff(LED6);
 601              		.loc 2 226 0
 602 0314 4FF00300 		mov	r0, #3
 603 0318 FFF7FEFF 		bl	STM_EVAL_LEDOff
 227:src/main.c    ****     STM_EVAL_LEDOff(LED7);
 604              		.loc 2 227 0
 605 031c 4FF00400 		mov	r0, #4
 606 0320 FFF7FEFF 		bl	STM_EVAL_LEDOff
 228:src/main.c    ****     STM_EVAL_LEDOff(LED10);
 607              		.loc 2 228 0
 608 0324 4FF00700 		mov	r0, #7
 609 0328 FFF7FEFF 		bl	STM_EVAL_LEDOff
 229:src/main.c    ****     STM_EVAL_LEDOff(LED8);
 610              		.loc 2 229 0
 611 032c 4FF00500 		mov	r0, #5
 612 0330 FFF7FEFF 		bl	STM_EVAL_LEDOff
 230:src/main.c    ****     STM_EVAL_LEDOff(LED9);
 613              		.loc 2 230 0
 614 0334 4FF00600 		mov	r0, #6
 615 0338 FFF7FEFF 		bl	STM_EVAL_LEDOff
 231:src/main.c    ****     STM_EVAL_LEDOff(LED5);
 616              		.loc 2 231 0
 617 033c 4FF00200 		mov	r0, #2
 618 0340 FFF7FEFF 		bl	STM_EVAL_LEDOff
 232:src/main.c    ****     
 233:src/main.c    ****     /* Demo Compass */
 234:src/main.c    ****     Demo_CompassConfig();
 619              		.loc 2 234 0
 620 0344 FFF7FEFF 		bl	Demo_CompassConfig
 235:src/main.c    ****     
 236:src/main.c    ****     /* Waiting User Button is pressed */
 237:src/main.c    ****     while (UserButtonPressed == 0x02)
 621              		.loc 2 237 0
 622 0348 00F03CBD 		b	.L24
 623              	.L118:
 238:src/main.c    ****     {
 239:src/main.c    ****       /* Wait for data ready */
 240:src/main.c    ****       while(DataReady !=0x05)
 624              		.loc 2 240 0
 625 034c 00BF     		nop
 626              	.L25:
 627              		.loc 2 240 0 is_stmt 0 discriminator 1
 628 034e 0C4B     		ldr	r3, .L119+12
 629 0350 1B78     		ldrb	r3, [r3, #0]
 630 0352 DBB2     		uxtb	r3, r3
 631 0354 052B     		cmp	r3, #5
 632 0356 FAD1     		bne	.L25
 241:src/main.c    ****       {}
 242:src/main.c    ****       DataReady = 0x00;
 633              		.loc 2 242 0 is_stmt 1
 634 0358 094B     		ldr	r3, .L119+12
 635 035a 4FF00002 		mov	r2, #0
 636 035e 1A70     		strb	r2, [r3, #0]
 243:src/main.c    ****       
 244:src/main.c    ****       /* Read Compass data */
 245:src/main.c    ****       Demo_CompassReadMag(MagBuffer);
 637              		.loc 2 245 0
 638 0360 0B48     		ldr	r0, .L119+28
 639 0362 FFF7FEFF 		bl	Demo_CompassReadMag
 246:src/main.c    ****       Demo_CompassReadAcc(AccBuffer);
 640              		.loc 2 246 0
 641 0366 0B48     		ldr	r0, .L119+32
 642 0368 FFF7FEFF 		bl	Demo_CompassReadAcc
 247:src/main.c    ****       
 248:src/main.c    ****       for(i=0;i<3;i++)
 643              		.loc 2 248 0
 644 036c 4FF00003 		mov	r3, #0
 645 0370 FB71     		strb	r3, [r7, #7]
 646 0372 27E0     		b	.L26
 647              	.L120:
 648              		.align	2
 649              	.L119:
 650 0374 00000000 		.word	RCC_Clocks
 651 0378 1F85EB51 		.word	1374389535
 652 037c 00000000 		.word	UserButtonPressed
 653 0380 00000000 		.word	DataReady
 654 0384 00000000 		.word	Buffer
 655 0388 00000000 		.word	Xval
 656 038c 00000000 		.word	Yval
 657 0390 00000000 		.word	MagBuffer
 658 0394 00000000 		.word	AccBuffer
 659              	.L27:
 249:src/main.c    ****         AccBuffer[i] /= 100.0f;
 660              		.loc 2 249 0 discriminator 2
 661 0398 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 662 039a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 663 039c A049     		ldr	r1, .L121+8
 664 039e 4FEA8202 		lsl	r2, r2, #2
 665 03a2 8A18     		adds	r2, r1, r2
 666 03a4 92ED007A 		flds	s14, [r2, #0]
 667 03a8 DFED9E7A 		flds	s15, .L121+12
 668 03ac C7EE277A 		fdivs	s15, s14, s15
 669 03b0 9B4A     		ldr	r2, .L121+8
 670 03b2 4FEA8303 		lsl	r3, r3, #2
 671 03b6 D318     		adds	r3, r2, r3
 672 03b8 C3ED007A 		fsts	s15, [r3, #0]
 248:src/main.c    ****       for(i=0;i<3;i++)
 673              		.loc 2 248 0 discriminator 2
 674 03bc FB79     		ldrb	r3, [r7, #7]
 675 03be 03F10103 		add	r3, r3, #1
 676 03c2 FB71     		strb	r3, [r7, #7]
 677              	.L26:
 248:src/main.c    ****       for(i=0;i<3;i++)
 678              		.loc 2 248 0 is_stmt 0 discriminator 1
 679 03c4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 680 03c6 022B     		cmp	r3, #2
 681 03c8 E6D9     		bls	.L27
 250:src/main.c    ****       
 251:src/main.c    ****       fNormAcc = sqrt((AccBuffer[0]*AccBuffer[0])+(AccBuffer[1]*AccBuffer[1])+(AccBuffer[2]*AccBuff
 682              		.loc 2 251 0 is_stmt 1
 683 03ca 954B     		ldr	r3, .L121+8
 684 03cc 93ED007A 		flds	s14, [r3, #0]
 685 03d0 934B     		ldr	r3, .L121+8
 686 03d2 D3ED007A 		flds	s15, [r3, #0]
 687 03d6 27EE277A 		fmuls	s14, s14, s15
 688 03da 914B     		ldr	r3, .L121+8
 689 03dc D3ED016A 		flds	s13, [r3, #4]
 690 03e0 8F4B     		ldr	r3, .L121+8
 691 03e2 D3ED017A 		flds	s15, [r3, #4]
 692 03e6 66EEA77A 		fmuls	s15, s13, s15
 693 03ea 37EE277A 		fadds	s14, s14, s15
 694 03ee 8C4B     		ldr	r3, .L121+8
 695 03f0 D3ED026A 		flds	s13, [r3, #8]
 696 03f4 8A4B     		ldr	r3, .L121+8
 697 03f6 D3ED027A 		flds	s15, [r3, #8]
 698 03fa 66EEA77A 		fmuls	s15, s13, s15
 699 03fe 77EE277A 		fadds	s15, s14, s15
 700 0402 17EE900A 		fmrs	r0, s15
 701 0406 FFF7FEFF 		bl	__aeabi_f2d
 702 040a 0246     		mov	r2, r0
 703 040c 0B46     		mov	r3, r1
 704 040e 1046     		mov	r0, r2
 705 0410 1946     		mov	r1, r3
 706 0412 FFF7FEFF 		bl	sqrt
 707 0416 0246     		mov	r2, r0
 708 0418 0B46     		mov	r3, r1
 709 041a 1046     		mov	r0, r2
 710 041c 1946     		mov	r1, r3
 711 041e FFF7FEFF 		bl	__aeabi_d2f
 712 0422 0246     		mov	r2, r0	@ float
 713 0424 804B     		ldr	r3, .L121+16
 714 0426 1A60     		str	r2, [r3, #0]	@ float
 252:src/main.c    ****       
 253:src/main.c    ****       fSinRoll = -AccBuffer[1]/fNormAcc;
 715              		.loc 2 253 0
 716 0428 7D4B     		ldr	r3, .L121+8
 717 042a D3ED017A 		flds	s15, [r3, #4]
 718 042e B1EE677A 		fnegs	s14, s15
 719 0432 7D4B     		ldr	r3, .L121+16
 720 0434 D3ED007A 		flds	s15, [r3, #0]
 721 0438 C7EE277A 		fdivs	s15, s14, s15
 722 043c 7B4B     		ldr	r3, .L121+20
 723 043e C3ED007A 		fsts	s15, [r3, #0]
 254:src/main.c    ****       fCosRoll = sqrt(1.0-(fSinRoll * fSinRoll));
 724              		.loc 2 254 0
 725 0442 7A4B     		ldr	r3, .L121+20
 726 0444 93ED007A 		flds	s14, [r3, #0]
 727 0448 784B     		ldr	r3, .L121+20
 728 044a D3ED007A 		flds	s15, [r3, #0]
 729 044e 67EE277A 		fmuls	s15, s14, s15
 730 0452 B7EE007A 		fconsts	s14, #112
 731 0456 77EE677A 		fsubs	s15, s14, s15
 732 045a 17EE900A 		fmrs	r0, s15
 733 045e FFF7FEFF 		bl	__aeabi_f2d
 734 0462 0246     		mov	r2, r0
 735 0464 0B46     		mov	r3, r1
 736 0466 1046     		mov	r0, r2
 737 0468 1946     		mov	r1, r3
 738 046a FFF7FEFF 		bl	sqrt
 739 046e 0246     		mov	r2, r0
 740 0470 0B46     		mov	r3, r1
 741 0472 1046     		mov	r0, r2
 742 0474 1946     		mov	r1, r3
 743 0476 FFF7FEFF 		bl	__aeabi_d2f
 744 047a 0246     		mov	r2, r0	@ float
 745 047c 6C4B     		ldr	r3, .L121+24
 746 047e 1A60     		str	r2, [r3, #0]	@ float
 255:src/main.c    ****       fSinPitch = AccBuffer[0]/fNormAcc;
 747              		.loc 2 255 0
 748 0480 674B     		ldr	r3, .L121+8
 749 0482 93ED007A 		flds	s14, [r3, #0]
 750 0486 684B     		ldr	r3, .L121+16
 751 0488 D3ED007A 		flds	s15, [r3, #0]
 752 048c C7EE277A 		fdivs	s15, s14, s15
 753 0490 684B     		ldr	r3, .L121+28
 754 0492 C3ED007A 		fsts	s15, [r3, #0]
 256:src/main.c    ****       fCosPitch = sqrt(1.0-(fSinPitch * fSinPitch));
 755              		.loc 2 256 0
 756 0496 674B     		ldr	r3, .L121+28
 757 0498 93ED007A 		flds	s14, [r3, #0]
 758 049c 654B     		ldr	r3, .L121+28
 759 049e D3ED007A 		flds	s15, [r3, #0]
 760 04a2 67EE277A 		fmuls	s15, s14, s15
 761 04a6 B7EE007A 		fconsts	s14, #112
 762 04aa 77EE677A 		fsubs	s15, s14, s15
 763 04ae 17EE900A 		fmrs	r0, s15
 764 04b2 FFF7FEFF 		bl	__aeabi_f2d
 765 04b6 0246     		mov	r2, r0
 766 04b8 0B46     		mov	r3, r1
 767 04ba 1046     		mov	r0, r2
 768 04bc 1946     		mov	r1, r3
 769 04be FFF7FEFF 		bl	sqrt
 770 04c2 0246     		mov	r2, r0
 771 04c4 0B46     		mov	r3, r1
 772 04c6 1046     		mov	r0, r2
 773 04c8 1946     		mov	r1, r3
 774 04ca FFF7FEFF 		bl	__aeabi_d2f
 775 04ce 0246     		mov	r2, r0	@ float
 776 04d0 594B     		ldr	r3, .L121+32
 777 04d2 1A60     		str	r2, [r3, #0]	@ float
 257:src/main.c    ****      if ( fSinRoll >0)
 778              		.loc 2 257 0
 779 04d4 554B     		ldr	r3, .L121+20
 780 04d6 D3ED007A 		flds	s15, [r3, #0]
 781 04da F5EEC07A 		fcmpezs	s15
 782 04de F1EE10FA 		fmstat
 783 04e2 5EDD     		ble	.L111
 784              	.L84:
 258:src/main.c    ****      {
 259:src/main.c    ****        if (fCosRoll>0)
 785              		.loc 2 259 0
 786 04e4 524B     		ldr	r3, .L121+24
 787 04e6 D3ED007A 		flds	s15, [r3, #0]
 788 04ea F5EEC07A 		fcmpezs	s15
 789 04ee F1EE10FA 		fmstat
 790 04f2 26DD     		ble	.L112
 791              	.L85:
 260:src/main.c    ****        {
 261:src/main.c    ****          RollAng = acos(fCosRoll)*180/PI;
 792              		.loc 2 261 0
 793 04f4 4E4B     		ldr	r3, .L121+24
 794 04f6 1B68     		ldr	r3, [r3, #0]	@ float
 795 04f8 1846     		mov	r0, r3	@ float
 796 04fa FFF7FEFF 		bl	__aeabi_f2d
 797 04fe 0246     		mov	r2, r0
 798 0500 0B46     		mov	r3, r1
 799 0502 1046     		mov	r0, r2
 800 0504 1946     		mov	r1, r3
 801 0506 FFF7FEFF 		bl	acos
 802 050a 0246     		mov	r2, r0
 803 050c 0B46     		mov	r3, r1
 804 050e 1046     		mov	r0, r2
 805 0510 1946     		mov	r1, r3
 806 0512 4FF00002 		mov	r2, #0
 807 0516 494B     		ldr	r3, .L121+36
 808 0518 FFF7FEFF 		bl	__aeabi_dmul
 809 051c 0246     		mov	r2, r0
 810 051e 0B46     		mov	r3, r1
 811 0520 1046     		mov	r0, r2
 812 0522 1946     		mov	r1, r3
 813 0524 3CA3     		adr	r3, .L121
 814 0526 D3E90023 		ldrd	r2, [r3]
 815 052a FFF7FEFF 		bl	__aeabi_ddiv
 816 052e 0246     		mov	r2, r0
 817 0530 0B46     		mov	r3, r1
 818 0532 1046     		mov	r0, r2
 819 0534 1946     		mov	r1, r3
 820 0536 FFF7FEFF 		bl	__aeabi_d2f
 821 053a 0246     		mov	r2, r0	@ float
 822 053c 404B     		ldr	r3, .L121+40
 823 053e 1A60     		str	r2, [r3, #0]	@ float
 824 0540 B1E0     		b	.L32
 825              	.L112:
 262:src/main.c    ****        }
 263:src/main.c    ****        else
 264:src/main.c    ****        {
 265:src/main.c    ****          RollAng = acos(fCosRoll)*180/PI + 180;
 826              		.loc 2 265 0
 827 0542 3B4B     		ldr	r3, .L121+24
 828 0544 1B68     		ldr	r3, [r3, #0]	@ float
 829 0546 1846     		mov	r0, r3	@ float
 830 0548 FFF7FEFF 		bl	__aeabi_f2d
 831 054c 0246     		mov	r2, r0
 832 054e 0B46     		mov	r3, r1
 833 0550 1046     		mov	r0, r2
 834 0552 1946     		mov	r1, r3
 835 0554 FFF7FEFF 		bl	acos
 836 0558 0246     		mov	r2, r0
 837 055a 0B46     		mov	r3, r1
 838 055c 1046     		mov	r0, r2
 839 055e 1946     		mov	r1, r3
 840 0560 4FF00002 		mov	r2, #0
 841 0564 354B     		ldr	r3, .L121+36
 842 0566 FFF7FEFF 		bl	__aeabi_dmul
 843 056a 0246     		mov	r2, r0
 844 056c 0B46     		mov	r3, r1
 845 056e 1046     		mov	r0, r2
 846 0570 1946     		mov	r1, r3
 847 0572 29A3     		adr	r3, .L121
 848 0574 D3E90023 		ldrd	r2, [r3]
 849 0578 FFF7FEFF 		bl	__aeabi_ddiv
 850 057c 0246     		mov	r2, r0
 851 057e 0B46     		mov	r3, r1
 852 0580 1046     		mov	r0, r2
 853 0582 1946     		mov	r1, r3
 854 0584 4FF00002 		mov	r2, #0
 855 0588 2C4B     		ldr	r3, .L121+36
 856 058a FFF7FEFF 		bl	__aeabi_dadd
 857 058e 0246     		mov	r2, r0
 858 0590 0B46     		mov	r3, r1
 859 0592 1046     		mov	r0, r2
 860 0594 1946     		mov	r1, r3
 861 0596 FFF7FEFF 		bl	__aeabi_d2f
 862 059a 0246     		mov	r2, r0	@ float
 863 059c 284B     		ldr	r3, .L121+40
 864 059e 1A60     		str	r2, [r3, #0]	@ float
 865 05a0 81E0     		b	.L32
 866              	.L111:
 266:src/main.c    ****        }
 267:src/main.c    ****      }
 268:src/main.c    ****      else
 269:src/main.c    ****      {
 270:src/main.c    ****        if (fCosRoll>0)
 867              		.loc 2 270 0
 868 05a2 234B     		ldr	r3, .L121+24
 869 05a4 D3ED007A 		flds	s15, [r3, #0]
 870 05a8 F5EEC07A 		fcmpezs	s15
 871 05ac F1EE10FA 		fmstat
 872 05b0 4ADD     		ble	.L113
 873              	.L86:
 271:src/main.c    ****        {
 272:src/main.c    ****          RollAng = acos(fCosRoll)*180/PI + 360;
 874              		.loc 2 272 0
 875 05b2 1F4B     		ldr	r3, .L121+24
 876 05b4 1B68     		ldr	r3, [r3, #0]	@ float
 877 05b6 1846     		mov	r0, r3	@ float
 878 05b8 FFF7FEFF 		bl	__aeabi_f2d
 879 05bc 0246     		mov	r2, r0
 880 05be 0B46     		mov	r3, r1
 881 05c0 1046     		mov	r0, r2
 882 05c2 1946     		mov	r1, r3
 883 05c4 FFF7FEFF 		bl	acos
 884 05c8 0246     		mov	r2, r0
 885 05ca 0B46     		mov	r3, r1
 886 05cc 1046     		mov	r0, r2
 887 05ce 1946     		mov	r1, r3
 888 05d0 4FF00002 		mov	r2, #0
 889 05d4 194B     		ldr	r3, .L121+36
 890 05d6 FFF7FEFF 		bl	__aeabi_dmul
 891 05da 0246     		mov	r2, r0
 892 05dc 0B46     		mov	r3, r1
 893 05de 1046     		mov	r0, r2
 894 05e0 1946     		mov	r1, r3
 895 05e2 0DA3     		adr	r3, .L121
 896 05e4 D3E90023 		ldrd	r2, [r3]
 897 05e8 FFF7FEFF 		bl	__aeabi_ddiv
 898 05ec 0246     		mov	r2, r0
 899 05ee 0B46     		mov	r3, r1
 900 05f0 1046     		mov	r0, r2
 901 05f2 1946     		mov	r1, r3
 902 05f4 4FF00002 		mov	r2, #0
 903 05f8 124B     		ldr	r3, .L121+44
 904 05fa FFF7FEFF 		bl	__aeabi_dadd
 905 05fe 0246     		mov	r2, r0
 906 0600 0B46     		mov	r3, r1
 907 0602 1046     		mov	r0, r2
 908 0604 1946     		mov	r1, r3
 909 0606 FFF7FEFF 		bl	__aeabi_d2f
 910 060a 0246     		mov	r2, r0	@ float
 911 060c 0C4B     		ldr	r3, .L121+40
 912 060e 1A60     		str	r2, [r3, #0]	@ float
 913 0610 49E0     		b	.L32
 914              	.L122:
 915 0612 00BFAFF3 		.align	3
 915      0080
 916              	.L121:
 917 0618 00000060 		.word	1610612736
 918 061c FB210940 		.word	1074340347
 919 0620 00000000 		.word	AccBuffer
 920 0624 0000C842 		.word	1120403456
 921 0628 00000000 		.word	fNormAcc
 922 062c 00000000 		.word	fSinRoll
 923 0630 00000000 		.word	fCosRoll
 924 0634 00000000 		.word	fSinPitch
 925 0638 00000000 		.word	fCosPitch
 926 063c 00806640 		.word	1080459264
 927 0640 00000000 		.word	RollAng
 928 0644 00807640 		.word	1081507840
 929              	.L113:
 273:src/main.c    ****        }
 274:src/main.c    ****        else
 275:src/main.c    ****        {
 276:src/main.c    ****          RollAng = acos(fCosRoll)*180/PI + 180;
 930              		.loc 2 276 0
 931 0648 694B     		ldr	r3, .L123+8
 932 064a 1B68     		ldr	r3, [r3, #0]	@ float
 933 064c 1846     		mov	r0, r3	@ float
 934 064e FFF7FEFF 		bl	__aeabi_f2d
 935 0652 0246     		mov	r2, r0
 936 0654 0B46     		mov	r3, r1
 937 0656 1046     		mov	r0, r2
 938 0658 1946     		mov	r1, r3
 939 065a FFF7FEFF 		bl	acos
 940 065e 0246     		mov	r2, r0
 941 0660 0B46     		mov	r3, r1
 942 0662 1046     		mov	r0, r2
 943 0664 1946     		mov	r1, r3
 944 0666 4FF00002 		mov	r2, #0
 945 066a 624B     		ldr	r3, .L123+12
 946 066c FFF7FEFF 		bl	__aeabi_dmul
 947 0670 0246     		mov	r2, r0
 948 0672 0B46     		mov	r3, r1
 949 0674 1046     		mov	r0, r2
 950 0676 1946     		mov	r1, r3
 951 0678 5BA3     		adr	r3, .L123
 952 067a D3E90023 		ldrd	r2, [r3]
 953 067e FFF7FEFF 		bl	__aeabi_ddiv
 954 0682 0246     		mov	r2, r0
 955 0684 0B46     		mov	r3, r1
 956 0686 1046     		mov	r0, r2
 957 0688 1946     		mov	r1, r3
 958 068a 4FF00002 		mov	r2, #0
 959 068e 594B     		ldr	r3, .L123+12
 960 0690 FFF7FEFF 		bl	__aeabi_dadd
 961 0694 0246     		mov	r2, r0
 962 0696 0B46     		mov	r3, r1
 963 0698 1046     		mov	r0, r2
 964 069a 1946     		mov	r1, r3
 965 069c FFF7FEFF 		bl	__aeabi_d2f
 966 06a0 0246     		mov	r2, r0	@ float
 967 06a2 554B     		ldr	r3, .L123+16
 968 06a4 1A60     		str	r2, [r3, #0]	@ float
 969              	.L32:
 277:src/main.c    ****        }
 278:src/main.c    ****      }
 279:src/main.c    ****      
 280:src/main.c    ****       if ( fSinPitch >0)
 970              		.loc 2 280 0
 971 06a6 554B     		ldr	r3, .L123+20
 972 06a8 D3ED007A 		flds	s15, [r3, #0]
 973 06ac F5EEC07A 		fcmpezs	s15
 974 06b0 F1EE10FA 		fmstat
 975 06b4 5EDD     		ble	.L114
 976              	.L87:
 281:src/main.c    ****      {
 282:src/main.c    ****        if (fCosPitch>0)
 977              		.loc 2 282 0
 978 06b6 524B     		ldr	r3, .L123+24
 979 06b8 D3ED007A 		flds	s15, [r3, #0]
 980 06bc F5EEC07A 		fcmpezs	s15
 981 06c0 F1EE10FA 		fmstat
 982 06c4 26DD     		ble	.L115
 983              	.L88:
 283:src/main.c    ****        {
 284:src/main.c    ****             PitchAng = acos(fCosPitch)*180/PI;
 984              		.loc 2 284 0
 985 06c6 4E4B     		ldr	r3, .L123+24
 986 06c8 1B68     		ldr	r3, [r3, #0]	@ float
 987 06ca 1846     		mov	r0, r3	@ float
 988 06cc FFF7FEFF 		bl	__aeabi_f2d
 989 06d0 0246     		mov	r2, r0
 990 06d2 0B46     		mov	r3, r1
 991 06d4 1046     		mov	r0, r2
 992 06d6 1946     		mov	r1, r3
 993 06d8 FFF7FEFF 		bl	acos
 994 06dc 0246     		mov	r2, r0
 995 06de 0B46     		mov	r3, r1
 996 06e0 1046     		mov	r0, r2
 997 06e2 1946     		mov	r1, r3
 998 06e4 4FF00002 		mov	r2, #0
 999 06e8 424B     		ldr	r3, .L123+12
 1000 06ea FFF7FEFF 		bl	__aeabi_dmul
 1001 06ee 0246     		mov	r2, r0
 1002 06f0 0B46     		mov	r3, r1
 1003 06f2 1046     		mov	r0, r2
 1004 06f4 1946     		mov	r1, r3
 1005 06f6 3CA3     		adr	r3, .L123
 1006 06f8 D3E90023 		ldrd	r2, [r3]
 1007 06fc FFF7FEFF 		bl	__aeabi_ddiv
 1008 0700 0246     		mov	r2, r0
 1009 0702 0B46     		mov	r3, r1
 1010 0704 1046     		mov	r0, r2
 1011 0706 1946     		mov	r1, r3
 1012 0708 FFF7FEFF 		bl	__aeabi_d2f
 1013 070c 0246     		mov	r2, r0	@ float
 1014 070e 3D4B     		ldr	r3, .L123+28
 1015 0710 1A60     		str	r2, [r3, #0]	@ float
 1016 0712 AAE0     		b	.L39
 1017              	.L115:
 285:src/main.c    ****        }
 286:src/main.c    ****        else
 287:src/main.c    ****        {
 288:src/main.c    ****           PitchAng = acos(fCosPitch)*180/PI + 180;
 1018              		.loc 2 288 0
 1019 0714 3A4B     		ldr	r3, .L123+24
 1020 0716 1B68     		ldr	r3, [r3, #0]	@ float
 1021 0718 1846     		mov	r0, r3	@ float
 1022 071a FFF7FEFF 		bl	__aeabi_f2d
 1023 071e 0246     		mov	r2, r0
 1024 0720 0B46     		mov	r3, r1
 1025 0722 1046     		mov	r0, r2
 1026 0724 1946     		mov	r1, r3
 1027 0726 FFF7FEFF 		bl	acos
 1028 072a 0246     		mov	r2, r0
 1029 072c 0B46     		mov	r3, r1
 1030 072e 1046     		mov	r0, r2
 1031 0730 1946     		mov	r1, r3
 1032 0732 4FF00002 		mov	r2, #0
 1033 0736 2F4B     		ldr	r3, .L123+12
 1034 0738 FFF7FEFF 		bl	__aeabi_dmul
 1035 073c 0246     		mov	r2, r0
 1036 073e 0B46     		mov	r3, r1
 1037 0740 1046     		mov	r0, r2
 1038 0742 1946     		mov	r1, r3
 1039 0744 28A3     		adr	r3, .L123
 1040 0746 D3E90023 		ldrd	r2, [r3]
 1041 074a FFF7FEFF 		bl	__aeabi_ddiv
 1042 074e 0246     		mov	r2, r0
 1043 0750 0B46     		mov	r3, r1
 1044 0752 1046     		mov	r0, r2
 1045 0754 1946     		mov	r1, r3
 1046 0756 4FF00002 		mov	r2, #0
 1047 075a 264B     		ldr	r3, .L123+12
 1048 075c FFF7FEFF 		bl	__aeabi_dadd
 1049 0760 0246     		mov	r2, r0
 1050 0762 0B46     		mov	r3, r1
 1051 0764 1046     		mov	r0, r2
 1052 0766 1946     		mov	r1, r3
 1053 0768 FFF7FEFF 		bl	__aeabi_d2f
 1054 076c 0246     		mov	r2, r0	@ float
 1055 076e 254B     		ldr	r3, .L123+28
 1056 0770 1A60     		str	r2, [r3, #0]	@ float
 1057 0772 7AE0     		b	.L39
 1058              	.L114:
 289:src/main.c    ****        }
 290:src/main.c    ****      }
 291:src/main.c    ****      else
 292:src/main.c    ****      {
 293:src/main.c    ****        if (fCosPitch>0)
 1059              		.loc 2 293 0
 1060 0774 224B     		ldr	r3, .L123+24
 1061 0776 D3ED007A 		flds	s15, [r3, #0]
 1062 077a F5EEC07A 		fcmpezs	s15
 1063 077e F1EE10FA 		fmstat
 1064 0782 43DD     		ble	.L116
 1065              	.L89:
 294:src/main.c    ****        {
 295:src/main.c    ****             PitchAng = acos(fCosPitch)*180/PI + 360;
 1066              		.loc 2 295 0
 1067 0784 1E4B     		ldr	r3, .L123+24
 1068 0786 1B68     		ldr	r3, [r3, #0]	@ float
 1069 0788 1846     		mov	r0, r3	@ float
 1070 078a FFF7FEFF 		bl	__aeabi_f2d
 1071 078e 0246     		mov	r2, r0
 1072 0790 0B46     		mov	r3, r1
 1073 0792 1046     		mov	r0, r2
 1074 0794 1946     		mov	r1, r3
 1075 0796 FFF7FEFF 		bl	acos
 1076 079a 0246     		mov	r2, r0
 1077 079c 0B46     		mov	r3, r1
 1078 079e 1046     		mov	r0, r2
 1079 07a0 1946     		mov	r1, r3
 1080 07a2 4FF00002 		mov	r2, #0
 1081 07a6 134B     		ldr	r3, .L123+12
 1082 07a8 FFF7FEFF 		bl	__aeabi_dmul
 1083 07ac 0246     		mov	r2, r0
 1084 07ae 0B46     		mov	r3, r1
 1085 07b0 1046     		mov	r0, r2
 1086 07b2 1946     		mov	r1, r3
 1087 07b4 0CA3     		adr	r3, .L123
 1088 07b6 D3E90023 		ldrd	r2, [r3]
 1089 07ba FFF7FEFF 		bl	__aeabi_ddiv
 1090 07be 0246     		mov	r2, r0
 1091 07c0 0B46     		mov	r3, r1
 1092 07c2 1046     		mov	r0, r2
 1093 07c4 1946     		mov	r1, r3
 1094 07c6 4FF00002 		mov	r2, #0
 1095 07ca 0F4B     		ldr	r3, .L123+32
 1096 07cc FFF7FEFF 		bl	__aeabi_dadd
 1097 07d0 0246     		mov	r2, r0
 1098 07d2 0B46     		mov	r3, r1
 1099 07d4 1046     		mov	r0, r2
 1100 07d6 1946     		mov	r1, r3
 1101 07d8 FFF7FEFF 		bl	__aeabi_d2f
 1102 07dc 0246     		mov	r2, r0	@ float
 1103 07de 094B     		ldr	r3, .L123+28
 1104 07e0 1A60     		str	r2, [r3, #0]	@ float
 1105 07e2 42E0     		b	.L39
 1106              	.L124:
 1107 07e4 AFF30080 		.align	3
 1108              	.L123:
 1109 07e8 00000060 		.word	1610612736
 1110 07ec FB210940 		.word	1074340347
 1111 07f0 00000000 		.word	fCosRoll
 1112 07f4 00806640 		.word	1080459264
 1113 07f8 00000000 		.word	RollAng
 1114 07fc 00000000 		.word	fSinPitch
 1115 0800 00000000 		.word	fCosPitch
 1116 0804 00000000 		.word	PitchAng
 1117 0808 00807640 		.word	1081507840
 1118              	.L116:
 296:src/main.c    ****        }
 297:src/main.c    ****        else
 298:src/main.c    ****        {
 299:src/main.c    ****           PitchAng = acos(fCosPitch)*180/PI + 180;
 1119              		.loc 2 299 0
 1120 080c C44B     		ldr	r3, .L125+8
 1121 080e 1B68     		ldr	r3, [r3, #0]	@ float
 1122 0810 1846     		mov	r0, r3	@ float
 1123 0812 FFF7FEFF 		bl	__aeabi_f2d
 1124 0816 0246     		mov	r2, r0
 1125 0818 0B46     		mov	r3, r1
 1126 081a 1046     		mov	r0, r2
 1127 081c 1946     		mov	r1, r3
 1128 081e FFF7FEFF 		bl	acos
 1129 0822 0246     		mov	r2, r0
 1130 0824 0B46     		mov	r3, r1
 1131 0826 1046     		mov	r0, r2
 1132 0828 1946     		mov	r1, r3
 1133 082a 4FF00002 		mov	r2, #0
 1134 082e BD4B     		ldr	r3, .L125+12
 1135 0830 FFF7FEFF 		bl	__aeabi_dmul
 1136 0834 0246     		mov	r2, r0
 1137 0836 0B46     		mov	r3, r1
 1138 0838 1046     		mov	r0, r2
 1139 083a 1946     		mov	r1, r3
 1140 083c B6A3     		adr	r3, .L125
 1141 083e D3E90023 		ldrd	r2, [r3]
 1142 0842 FFF7FEFF 		bl	__aeabi_ddiv
 1143 0846 0246     		mov	r2, r0
 1144 0848 0B46     		mov	r3, r1
 1145 084a 1046     		mov	r0, r2
 1146 084c 1946     		mov	r1, r3
 1147 084e 4FF00002 		mov	r2, #0
 1148 0852 B44B     		ldr	r3, .L125+12
 1149 0854 FFF7FEFF 		bl	__aeabi_dadd
 1150 0858 0246     		mov	r2, r0
 1151 085a 0B46     		mov	r3, r1
 1152 085c 1046     		mov	r0, r2
 1153 085e 1946     		mov	r1, r3
 1154 0860 FFF7FEFF 		bl	__aeabi_d2f
 1155 0864 0246     		mov	r2, r0	@ float
 1156 0866 B04B     		ldr	r3, .L125+16
 1157 0868 1A60     		str	r2, [r3, #0]	@ float
 1158              	.L39:
 300:src/main.c    ****        }
 301:src/main.c    ****      }
 302:src/main.c    **** 
 303:src/main.c    ****       if (RollAng >=360)
 1159              		.loc 2 303 0
 1160 086a B04B     		ldr	r3, .L125+20
 1161 086c 93ED007A 		flds	s14, [r3, #0]
 1162 0870 DFEDAF7A 		flds	s15, .L125+24
 1163 0874 B4EEE77A 		fcmpes	s14, s15
 1164 0878 F1EE10FA 		fmstat
 1165 087c 09DB     		blt	.L42
 1166              	.L90:
 304:src/main.c    ****       {
 305:src/main.c    ****         RollAng = RollAng - 360;
 1167              		.loc 2 305 0
 1168 087e AB4B     		ldr	r3, .L125+20
 1169 0880 93ED007A 		flds	s14, [r3, #0]
 1170 0884 DFEDAA7A 		flds	s15, .L125+24
 1171 0888 77EE677A 		fsubs	s15, s14, s15
 1172 088c A74B     		ldr	r3, .L125+20
 1173 088e C3ED007A 		fsts	s15, [r3, #0]
 1174              	.L42:
 306:src/main.c    ****       }
 307:src/main.c    ****       
 308:src/main.c    ****       if (PitchAng >=360)
 1175              		.loc 2 308 0
 1176 0892 A54B     		ldr	r3, .L125+16
 1177 0894 93ED007A 		flds	s14, [r3, #0]
 1178 0898 DFEDA57A 		flds	s15, .L125+24
 1179 089c B4EEE77A 		fcmpes	s14, s15
 1180 08a0 F1EE10FA 		fmstat
 1181 08a4 09DB     		blt	.L44
 1182              	.L91:
 309:src/main.c    ****       {
 310:src/main.c    ****         PitchAng = PitchAng - 360;
 1183              		.loc 2 310 0
 1184 08a6 A04B     		ldr	r3, .L125+16
 1185 08a8 93ED007A 		flds	s14, [r3, #0]
 1186 08ac DFEDA07A 		flds	s15, .L125+24
 1187 08b0 77EE677A 		fsubs	s15, s14, s15
 1188 08b4 9C4B     		ldr	r3, .L125+16
 1189 08b6 C3ED007A 		fsts	s15, [r3, #0]
 1190              	.L44:
 311:src/main.c    ****       }
 312:src/main.c    ****       
 313:src/main.c    ****       fTiltedX = MagBuffer[0]*fCosPitch+MagBuffer[2]*fSinPitch;
 1191              		.loc 2 313 0
 1192 08ba 9E4B     		ldr	r3, .L125+28
 1193 08bc 93ED007A 		flds	s14, [r3, #0]
 1194 08c0 974B     		ldr	r3, .L125+8
 1195 08c2 D3ED007A 		flds	s15, [r3, #0]
 1196 08c6 27EE277A 		fmuls	s14, s14, s15
 1197 08ca 9A4B     		ldr	r3, .L125+28
 1198 08cc D3ED026A 		flds	s13, [r3, #8]
 1199 08d0 994B     		ldr	r3, .L125+32
 1200 08d2 D3ED007A 		flds	s15, [r3, #0]
 1201 08d6 66EEA77A 		fmuls	s15, s13, s15
 1202 08da 77EE277A 		fadds	s15, s14, s15
 1203 08de 974B     		ldr	r3, .L125+36
 1204 08e0 C3ED007A 		fsts	s15, [r3, #0]
 314:src/main.c    ****       fTiltedY = MagBuffer[0]*fSinRoll*fSinPitch+MagBuffer[1]*fCosRoll-MagBuffer[1]*fSinRoll*fCosPi
 1205              		.loc 2 314 0
 1206 08e4 934B     		ldr	r3, .L125+28
 1207 08e6 93ED007A 		flds	s14, [r3, #0]
 1208 08ea 954B     		ldr	r3, .L125+40
 1209 08ec D3ED007A 		flds	s15, [r3, #0]
 1210 08f0 27EE277A 		fmuls	s14, s14, s15
 1211 08f4 904B     		ldr	r3, .L125+32
 1212 08f6 D3ED007A 		flds	s15, [r3, #0]
 1213 08fa 27EE277A 		fmuls	s14, s14, s15
 1214 08fe 8D4B     		ldr	r3, .L125+28
 1215 0900 D3ED016A 		flds	s13, [r3, #4]
 1216 0904 8F4B     		ldr	r3, .L125+44
 1217 0906 D3ED007A 		flds	s15, [r3, #0]
 1218 090a 66EEA77A 		fmuls	s15, s13, s15
 1219 090e 37EE277A 		fadds	s14, s14, s15
 1220 0912 884B     		ldr	r3, .L125+28
 1221 0914 D3ED016A 		flds	s13, [r3, #4]
 1222 0918 894B     		ldr	r3, .L125+40
 1223 091a D3ED007A 		flds	s15, [r3, #0]
 1224 091e 66EEA76A 		fmuls	s13, s13, s15
 1225 0922 7F4B     		ldr	r3, .L125+8
 1226 0924 D3ED007A 		flds	s15, [r3, #0]
 1227 0928 66EEA77A 		fmuls	s15, s13, s15
 1228 092c 77EE677A 		fsubs	s15, s14, s15
 1229 0930 854B     		ldr	r3, .L125+48
 1230 0932 C3ED007A 		fsts	s15, [r3, #0]
 315:src/main.c    ****       
 316:src/main.c    ****       HeadingValue = (float) ((atan2f((float)fTiltedY,(float)fTiltedX))*180)/PI;
 1231              		.loc 2 316 0
 1232 0936 844B     		ldr	r3, .L125+48
 1233 0938 1A68     		ldr	r2, [r3, #0]	@ float
 1234 093a 804B     		ldr	r3, .L125+36
 1235 093c 1B68     		ldr	r3, [r3, #0]	@ float
 1236 093e 1046     		mov	r0, r2	@ float
 1237 0940 1946     		mov	r1, r3	@ float
 1238 0942 FFF7FEFF 		bl	atan2f
 1239 0946 07EE100A 		fmsr	s14, r0
 1240 094a DFED807A 		flds	s15, .L125+52
 1241 094e 27EE277A 		fmuls	s14, s14, s15
 1242 0952 DFED7F7A 		flds	s15, .L125+56
 1243 0956 C7EE277A 		fdivs	s15, s14, s15
 1244 095a 7E4B     		ldr	r3, .L125+60
 1245 095c C3ED007A 		fsts	s15, [r3, #0]
 317:src/main.c    ****  
 318:src/main.c    ****       if (HeadingValue < 0)
 1246              		.loc 2 318 0
 1247 0960 7C4B     		ldr	r3, .L125+60
 1248 0962 D3ED007A 		flds	s15, [r3, #0]
 1249 0966 F5EEC07A 		fcmpezs	s15
 1250 096a F1EE10FA 		fmstat
 1251 096e 09D5     		bpl	.L46
 1252              	.L92:
 319:src/main.c    ****       {
 320:src/main.c    ****         HeadingValue = HeadingValue + 360;    
 1253              		.loc 2 320 0
 1254 0970 784B     		ldr	r3, .L125+60
 1255 0972 93ED007A 		flds	s14, [r3, #0]
 1256 0976 DFED6E7A 		flds	s15, .L125+24
 1257 097a 77EE277A 		fadds	s15, s14, s15
 1258 097e 754B     		ldr	r3, .L125+60
 1259 0980 C3ED007A 		fsts	s15, [r3, #0]
 1260              	.L46:
 321:src/main.c    ****       }
 322:src/main.c    ****       
 323:src/main.c    ****       if ((RollAng <= 40.0f) && (PitchAng <= 40.0f))
 1261              		.loc 2 323 0
 1262 0984 694B     		ldr	r3, .L125+20
 1263 0986 93ED007A 		flds	s14, [r3, #0]
 1264 098a DFED737A 		flds	s15, .L125+64
 1265 098e B4EEE77A 		fcmpes	s14, s15
 1266 0992 F1EE10FA 		fmstat
 1267 0996 00F2F181 		bhi	.L48
 1268              	.L93:
 1269              		.loc 2 323 0 is_stmt 0 discriminator 1
 1270 099a 634B     		ldr	r3, .L125+16
 1271 099c 93ED007A 		flds	s14, [r3, #0]
 1272 09a0 DFED6D7A 		flds	s15, .L125+64
 1273 09a4 B4EEE77A 		fcmpes	s14, s15
 1274 09a8 F1EE10FA 		fmstat
 1275 09ac 00F2E681 		bhi	.L48
 1276              	.L94:
 324:src/main.c    ****       {
 325:src/main.c    ****         if (((HeadingValue < 25.0f)&&(HeadingValue >= 0.0f))||((HeadingValue >=340.0f)&&(HeadingVal
 1277              		.loc 2 325 0 is_stmt 1
 1278 09b0 684B     		ldr	r3, .L125+60
 1279 09b2 93ED007A 		flds	s14, [r3, #0]
 1280 09b6 F3EE097A 		fconsts	s15, #57
 1281 09ba B4EEE77A 		fcmpes	s14, s15
 1282 09be F1EE10FA 		fmstat
 1283 09c2 07D5     		bpl	.L51
 1284              	.L95:
 1285              		.loc 2 325 0 is_stmt 0 discriminator 1
 1286 09c4 634B     		ldr	r3, .L125+60
 1287 09c6 D3ED007A 		flds	s15, [r3, #0]
 1288 09ca F5EEC07A 		fcmpezs	s15
 1289 09ce F1EE10FA 		fmstat
 1290 09d2 13DA     		bge	.L53
 1291              	.L51:
 1292              		.loc 2 325 0 discriminator 2
 1293 09d4 5F4B     		ldr	r3, .L125+60
 1294 09d6 93ED007A 		flds	s14, [r3, #0]
 1295 09da DFED607A 		flds	s15, .L125+68
 1296 09de B4EEE77A 		fcmpes	s14, s15
 1297 09e2 F1EE10FA 		fmstat
 1298 09e6 2ADB     		blt	.L54
 1299              	.L96:
 1300              		.loc 2 325 0 discriminator 1
 1301 09e8 5A4B     		ldr	r3, .L125+60
 1302 09ea 93ED007A 		flds	s14, [r3, #0]
 1303 09ee DFED507A 		flds	s15, .L125+24
 1304 09f2 B4EEE77A 		fcmpes	s14, s15
 1305 09f6 F1EE10FA 		fmstat
 1306 09fa 20D8     		bhi	.L54
 1307              	.L53:
 326:src/main.c    ****         {
 327:src/main.c    ****           STM_EVAL_LEDOn(LED10);
 1308              		.loc 2 327 0 is_stmt 1
 1309 09fc 4FF00700 		mov	r0, #7
 1310 0a00 FFF7FEFF 		bl	STM_EVAL_LEDOn
 328:src/main.c    ****           STM_EVAL_LEDOff(LED3);
 1311              		.loc 2 328 0
 1312 0a04 4FF00000 		mov	r0, #0
 1313 0a08 FFF7FEFF 		bl	STM_EVAL_LEDOff
 329:src/main.c    ****           STM_EVAL_LEDOff(LED6);
 1314              		.loc 2 329 0
 1315 0a0c 4FF00300 		mov	r0, #3
 1316 0a10 FFF7FEFF 		bl	STM_EVAL_LEDOff
 330:src/main.c    ****           STM_EVAL_LEDOff(LED7);
 1317              		.loc 2 330 0
 1318 0a14 4FF00400 		mov	r0, #4
 1319 0a18 FFF7FEFF 		bl	STM_EVAL_LEDOff
 331:src/main.c    ****           STM_EVAL_LEDOff(LED4);
 1320              		.loc 2 331 0
 1321 0a1c 4FF00100 		mov	r0, #1
 1322 0a20 FFF7FEFF 		bl	STM_EVAL_LEDOff
 332:src/main.c    ****           STM_EVAL_LEDOff(LED8);
 1323              		.loc 2 332 0
 1324 0a24 4FF00500 		mov	r0, #5
 1325 0a28 FFF7FEFF 		bl	STM_EVAL_LEDOff
 333:src/main.c    ****           STM_EVAL_LEDOff(LED9);
 1326              		.loc 2 333 0
 1327 0a2c 4FF00600 		mov	r0, #6
 1328 0a30 FFF7FEFF 		bl	STM_EVAL_LEDOff
 334:src/main.c    ****           STM_EVAL_LEDOff(LED5);
 1329              		.loc 2 334 0
 1330 0a34 4FF00200 		mov	r0, #2
 1331 0a38 FFF7FEFF 		bl	STM_EVAL_LEDOff
 1332 0a3c 9DE1     		b	.L57
 1333              	.L54:
 335:src/main.c    ****         }
 336:src/main.c    ****         else  if ((HeadingValue <70.0f)&&(HeadingValue >= 25.0f))
 1334              		.loc 2 336 0
 1335 0a3e 454B     		ldr	r3, .L125+60
 1336 0a40 93ED007A 		flds	s14, [r3, #0]
 1337 0a44 DFED467A 		flds	s15, .L125+72
 1338 0a48 B4EEE77A 		fcmpes	s14, s15
 1339 0a4c F1EE10FA 		fmstat
 1340 0a50 2AD5     		bpl	.L58
 1341              	.L97:
 1342              		.loc 2 336 0 is_stmt 0 discriminator 1
 1343 0a52 404B     		ldr	r3, .L125+60
 1344 0a54 93ED007A 		flds	s14, [r3, #0]
 1345 0a58 F3EE097A 		fconsts	s15, #57
 1346 0a5c B4EEE77A 		fcmpes	s14, s15
 1347 0a60 F1EE10FA 		fmstat
 1348 0a64 20DB     		blt	.L58
 1349              	.L98:
 337:src/main.c    ****         {
 338:src/main.c    ****           STM_EVAL_LEDOn(LED9);
 1350              		.loc 2 338 0 is_stmt 1
 1351 0a66 4FF00600 		mov	r0, #6
 1352 0a6a FFF7FEFF 		bl	STM_EVAL_LEDOn
 339:src/main.c    ****           STM_EVAL_LEDOff(LED6);
 1353              		.loc 2 339 0
 1354 0a6e 4FF00300 		mov	r0, #3
 1355 0a72 FFF7FEFF 		bl	STM_EVAL_LEDOff
 340:src/main.c    ****           STM_EVAL_LEDOff(LED10);
 1356              		.loc 2 340 0
 1357 0a76 4FF00700 		mov	r0, #7
 1358 0a7a FFF7FEFF 		bl	STM_EVAL_LEDOff
 341:src/main.c    ****           STM_EVAL_LEDOff(LED3);
 1359              		.loc 2 341 0
 1360 0a7e 4FF00000 		mov	r0, #0
 1361 0a82 FFF7FEFF 		bl	STM_EVAL_LEDOff
 342:src/main.c    ****           STM_EVAL_LEDOff(LED8);
 1362              		.loc 2 342 0
 1363 0a86 4FF00500 		mov	r0, #5
 1364 0a8a FFF7FEFF 		bl	STM_EVAL_LEDOff
 343:src/main.c    ****           STM_EVAL_LEDOff(LED5);
 1365              		.loc 2 343 0
 1366 0a8e 4FF00200 		mov	r0, #2
 1367 0a92 FFF7FEFF 		bl	STM_EVAL_LEDOff
 344:src/main.c    ****           STM_EVAL_LEDOff(LED4);
 1368              		.loc 2 344 0
 1369 0a96 4FF00100 		mov	r0, #1
 1370 0a9a FFF7FEFF 		bl	STM_EVAL_LEDOff
 345:src/main.c    ****           STM_EVAL_LEDOff(LED7);
 1371              		.loc 2 345 0
 1372 0a9e 4FF00400 		mov	r0, #4
 1373 0aa2 FFF7FEFF 		bl	STM_EVAL_LEDOff
 1374 0aa6 68E1     		b	.L57
 1375              	.L58:
 346:src/main.c    ****         } 
 347:src/main.c    ****         else  if ((HeadingValue < 115.0f)&&(HeadingValue >= 70.0f))
 1376              		.loc 2 347 0
 1377 0aa8 2A4B     		ldr	r3, .L125+60
 1378 0aaa 93ED007A 		flds	s14, [r3, #0]
 1379 0aae DFED2D7A 		flds	s15, .L125+76
 1380 0ab2 B4EEE77A 		fcmpes	s14, s15
 1381 0ab6 F1EE10FA 		fmstat
 1382 0aba 55D5     		bpl	.L61
 1383              	.L99:
 1384              		.loc 2 347 0 is_stmt 0 discriminator 1
 1385 0abc 254B     		ldr	r3, .L125+60
 1386 0abe 93ED007A 		flds	s14, [r3, #0]
 1387 0ac2 DFED277A 		flds	s15, .L125+72
 1388 0ac6 B4EEE77A 		fcmpes	s14, s15
 1389 0aca F1EE10FA 		fmstat
 1390 0ace 4BDB     		blt	.L61
 1391              	.L100:
 348:src/main.c    ****         {
 349:src/main.c    ****           STM_EVAL_LEDOn(LED7);
 1392              		.loc 2 349 0 is_stmt 1
 1393 0ad0 4FF00400 		mov	r0, #4
 1394 0ad4 FFF7FEFF 		bl	STM_EVAL_LEDOn
 350:src/main.c    ****           STM_EVAL_LEDOff(LED3);
 1395              		.loc 2 350 0
 1396 0ad8 4FF00000 		mov	r0, #0
 1397 0adc FFF7FEFF 		bl	STM_EVAL_LEDOff
 351:src/main.c    ****           STM_EVAL_LEDOff(LED4);
 1398              		.loc 2 351 0
 1399 0ae0 4FF00100 		mov	r0, #1
 1400 0ae4 FFF7FEFF 		bl	STM_EVAL_LEDOff
 352:src/main.c    ****           STM_EVAL_LEDOff(LED9);
 1401              		.loc 2 352 0
 1402 0ae8 4FF00600 		mov	r0, #6
 1403 0aec FFF7FEFF 		bl	STM_EVAL_LEDOff
 353:src/main.c    ****           STM_EVAL_LEDOff(LED10);
 1404              		.loc 2 353 0
 1405 0af0 4FF00700 		mov	r0, #7
 1406 0af4 FFF7FEFF 		bl	STM_EVAL_LEDOff
 354:src/main.c    ****           STM_EVAL_LEDOff(LED8);
 1407              		.loc 2 354 0
 1408 0af8 4FF00500 		mov	r0, #5
 1409 0afc FFF7FEFF 		bl	STM_EVAL_LEDOff
 355:src/main.c    ****           STM_EVAL_LEDOff(LED6);
 1410              		.loc 2 355 0
 1411 0b00 4FF00300 		mov	r0, #3
 1412 0b04 FFF7FEFF 		bl	STM_EVAL_LEDOff
 356:src/main.c    ****           STM_EVAL_LEDOff(LED5);
 1413              		.loc 2 356 0
 1414 0b08 4FF00200 		mov	r0, #2
 1415 0b0c FFF7FEFF 		bl	STM_EVAL_LEDOff
 1416 0b10 33E1     		b	.L57
 1417              	.L126:
 1418 0b12 00BFAFF3 		.align	3
 1418      0080
 1419              	.L125:
 1420 0b18 00000060 		.word	1610612736
 1421 0b1c FB210940 		.word	1074340347
 1422 0b20 00000000 		.word	fCosPitch
 1423 0b24 00806640 		.word	1080459264
 1424 0b28 00000000 		.word	PitchAng
 1425 0b2c 00000000 		.word	RollAng
 1426 0b30 0000B443 		.word	1135869952
 1427 0b34 00000000 		.word	MagBuffer
 1428 0b38 00000000 		.word	fSinPitch
 1429 0b3c 00000000 		.word	fTiltedX
 1430 0b40 00000000 		.word	fSinRoll
 1431 0b44 00000000 		.word	fCosRoll
 1432 0b48 00000000 		.word	fTiltedY
 1433 0b4c 00003443 		.word	1127481344
 1434 0b50 DB0F4940 		.word	1078530011
 1435 0b54 00000000 		.word	HeadingValue
 1436 0b58 00002042 		.word	1109393408
 1437 0b5c 0000AA43 		.word	1135214592
 1438 0b60 00008C42 		.word	1116471296
 1439 0b64 0000E642 		.word	1122369536
 1440              	.L61:
 357:src/main.c    ****         }
 358:src/main.c    ****         else  if ((HeadingValue <160.0f)&&(HeadingValue >= 115.0f))
 1441              		.loc 2 358 0
 1442 0b68 9A4B     		ldr	r3, .L127
 1443 0b6a 93ED007A 		flds	s14, [r3, #0]
 1444 0b6e DFED9A7A 		flds	s15, .L127+4
 1445 0b72 B4EEE77A 		fcmpes	s14, s15
 1446 0b76 F1EE10FA 		fmstat
 1447 0b7a 2AD5     		bpl	.L64
 1448              	.L101:
 1449              		.loc 2 358 0 is_stmt 0 discriminator 1
 1450 0b7c 954B     		ldr	r3, .L127
 1451 0b7e 93ED007A 		flds	s14, [r3, #0]
 1452 0b82 DFED967A 		flds	s15, .L127+8
 1453 0b86 B4EEE77A 		fcmpes	s14, s15
 1454 0b8a F1EE10FA 		fmstat
 1455 0b8e 20DB     		blt	.L64
 1456              	.L102:
 359:src/main.c    ****         {
 360:src/main.c    ****           STM_EVAL_LEDOn(LED5);
 1457              		.loc 2 360 0 is_stmt 1
 1458 0b90 4FF00200 		mov	r0, #2
 1459 0b94 FFF7FEFF 		bl	STM_EVAL_LEDOn
 361:src/main.c    ****           STM_EVAL_LEDOff(LED6);
 1460              		.loc 2 361 0
 1461 0b98 4FF00300 		mov	r0, #3
 1462 0b9c FFF7FEFF 		bl	STM_EVAL_LEDOff
 362:src/main.c    ****           STM_EVAL_LEDOff(LED10);
 1463              		.loc 2 362 0
 1464 0ba0 4FF00700 		mov	r0, #7
 1465 0ba4 FFF7FEFF 		bl	STM_EVAL_LEDOff
 363:src/main.c    ****           STM_EVAL_LEDOff(LED8);
 1466              		.loc 2 363 0
 1467 0ba8 4FF00500 		mov	r0, #5
 1468 0bac FFF7FEFF 		bl	STM_EVAL_LEDOff
 364:src/main.c    ****           STM_EVAL_LEDOff(LED9);
 1469              		.loc 2 364 0
 1470 0bb0 4FF00600 		mov	r0, #6
 1471 0bb4 FFF7FEFF 		bl	STM_EVAL_LEDOff
 365:src/main.c    ****           STM_EVAL_LEDOff(LED7);
 1472              		.loc 2 365 0
 1473 0bb8 4FF00400 		mov	r0, #4
 1474 0bbc FFF7FEFF 		bl	STM_EVAL_LEDOff
 366:src/main.c    ****           STM_EVAL_LEDOff(LED4);
 1475              		.loc 2 366 0
 1476 0bc0 4FF00100 		mov	r0, #1
 1477 0bc4 FFF7FEFF 		bl	STM_EVAL_LEDOff
 367:src/main.c    ****           STM_EVAL_LEDOff(LED3);
 1478              		.loc 2 367 0
 1479 0bc8 4FF00000 		mov	r0, #0
 1480 0bcc FFF7FEFF 		bl	STM_EVAL_LEDOff
 1481 0bd0 D3E0     		b	.L57
 1482              	.L64:
 368:src/main.c    ****         } 
 369:src/main.c    ****         else  if ((HeadingValue <205.0f)&&(HeadingValue >= 160.0f))
 1483              		.loc 2 369 0
 1484 0bd2 804B     		ldr	r3, .L127
 1485 0bd4 93ED007A 		flds	s14, [r3, #0]
 1486 0bd8 DFED817A 		flds	s15, .L127+12
 1487 0bdc B4EEE77A 		fcmpes	s14, s15
 1488 0be0 F1EE10FA 		fmstat
 1489 0be4 2AD5     		bpl	.L67
 1490              	.L103:
 1491              		.loc 2 369 0 is_stmt 0 discriminator 1
 1492 0be6 7B4B     		ldr	r3, .L127
 1493 0be8 93ED007A 		flds	s14, [r3, #0]
 1494 0bec DFED7A7A 		flds	s15, .L127+4
 1495 0bf0 B4EEE77A 		fcmpes	s14, s15
 1496 0bf4 F1EE10FA 		fmstat
 1497 0bf8 20DB     		blt	.L67
 1498              	.L104:
 370:src/main.c    ****         {
 371:src/main.c    ****           STM_EVAL_LEDOn(LED3);
 1499              		.loc 2 371 0 is_stmt 1
 1500 0bfa 4FF00000 		mov	r0, #0
 1501 0bfe FFF7FEFF 		bl	STM_EVAL_LEDOn
 372:src/main.c    ****           STM_EVAL_LEDOff(LED6);
 1502              		.loc 2 372 0
 1503 0c02 4FF00300 		mov	r0, #3
 1504 0c06 FFF7FEFF 		bl	STM_EVAL_LEDOff
 373:src/main.c    ****           STM_EVAL_LEDOff(LED4);
 1505              		.loc 2 373 0
 1506 0c0a 4FF00100 		mov	r0, #1
 1507 0c0e FFF7FEFF 		bl	STM_EVAL_LEDOff
 374:src/main.c    ****           STM_EVAL_LEDOff(LED8);
 1508              		.loc 2 374 0
 1509 0c12 4FF00500 		mov	r0, #5
 1510 0c16 FFF7FEFF 		bl	STM_EVAL_LEDOff
 375:src/main.c    ****           STM_EVAL_LEDOff(LED9);
 1511              		.loc 2 375 0
 1512 0c1a 4FF00600 		mov	r0, #6
 1513 0c1e FFF7FEFF 		bl	STM_EVAL_LEDOff
 376:src/main.c    ****           STM_EVAL_LEDOff(LED5);
 1514              		.loc 2 376 0
 1515 0c22 4FF00200 		mov	r0, #2
 1516 0c26 FFF7FEFF 		bl	STM_EVAL_LEDOff
 377:src/main.c    ****           STM_EVAL_LEDOff(LED10);
 1517              		.loc 2 377 0
 1518 0c2a 4FF00700 		mov	r0, #7
 1519 0c2e FFF7FEFF 		bl	STM_EVAL_LEDOff
 378:src/main.c    ****           STM_EVAL_LEDOff(LED7);
 1520              		.loc 2 378 0
 1521 0c32 4FF00400 		mov	r0, #4
 1522 0c36 FFF7FEFF 		bl	STM_EVAL_LEDOff
 1523 0c3a 9EE0     		b	.L57
 1524              	.L67:
 379:src/main.c    ****         } 
 380:src/main.c    ****         else  if ((HeadingValue <250.0f)&&(HeadingValue >= 205.0f))
 1525              		.loc 2 380 0
 1526 0c3c 654B     		ldr	r3, .L127
 1527 0c3e 93ED007A 		flds	s14, [r3, #0]
 1528 0c42 DFED687A 		flds	s15, .L127+16
 1529 0c46 B4EEE77A 		fcmpes	s14, s15
 1530 0c4a F1EE10FA 		fmstat
 1531 0c4e 2AD5     		bpl	.L70
 1532              	.L105:
 1533              		.loc 2 380 0 is_stmt 0 discriminator 1
 1534 0c50 604B     		ldr	r3, .L127
 1535 0c52 93ED007A 		flds	s14, [r3, #0]
 1536 0c56 DFED627A 		flds	s15, .L127+12
 1537 0c5a B4EEE77A 		fcmpes	s14, s15
 1538 0c5e F1EE10FA 		fmstat
 1539 0c62 20DB     		blt	.L70
 1540              	.L106:
 381:src/main.c    ****         {
 382:src/main.c    ****           STM_EVAL_LEDOn(LED4);
 1541              		.loc 2 382 0 is_stmt 1
 1542 0c64 4FF00100 		mov	r0, #1
 1543 0c68 FFF7FEFF 		bl	STM_EVAL_LEDOn
 383:src/main.c    ****           STM_EVAL_LEDOff(LED6);
 1544              		.loc 2 383 0
 1545 0c6c 4FF00300 		mov	r0, #3
 1546 0c70 FFF7FEFF 		bl	STM_EVAL_LEDOff
 384:src/main.c    ****           STM_EVAL_LEDOff(LED10);
 1547              		.loc 2 384 0
 1548 0c74 4FF00700 		mov	r0, #7
 1549 0c78 FFF7FEFF 		bl	STM_EVAL_LEDOff
 385:src/main.c    ****           STM_EVAL_LEDOff(LED8);
 1550              		.loc 2 385 0
 1551 0c7c 4FF00500 		mov	r0, #5
 1552 0c80 FFF7FEFF 		bl	STM_EVAL_LEDOff
 386:src/main.c    ****           STM_EVAL_LEDOff(LED9);
 1553              		.loc 2 386 0
 1554 0c84 4FF00600 		mov	r0, #6
 1555 0c88 FFF7FEFF 		bl	STM_EVAL_LEDOff
 387:src/main.c    ****           STM_EVAL_LEDOff(LED5);
 1556              		.loc 2 387 0
 1557 0c8c 4FF00200 		mov	r0, #2
 1558 0c90 FFF7FEFF 		bl	STM_EVAL_LEDOff
 388:src/main.c    ****           STM_EVAL_LEDOff(LED3);
 1559              		.loc 2 388 0
 1560 0c94 4FF00000 		mov	r0, #0
 1561 0c98 FFF7FEFF 		bl	STM_EVAL_LEDOff
 389:src/main.c    ****           STM_EVAL_LEDOff(LED7);
 1562              		.loc 2 389 0
 1563 0c9c 4FF00400 		mov	r0, #4
 1564 0ca0 FFF7FEFF 		bl	STM_EVAL_LEDOff
 1565 0ca4 69E0     		b	.L57
 1566              	.L70:
 390:src/main.c    ****         } 
 391:src/main.c    ****         else  if ((HeadingValue < 295.0f)&&(HeadingValue >= 250.0f))
 1567              		.loc 2 391 0
 1568 0ca6 4B4B     		ldr	r3, .L127
 1569 0ca8 93ED007A 		flds	s14, [r3, #0]
 1570 0cac DFED4E7A 		flds	s15, .L127+20
 1571 0cb0 B4EEE77A 		fcmpes	s14, s15
 1572 0cb4 F1EE10FA 		fmstat
 1573 0cb8 2AD5     		bpl	.L73
 1574              	.L107:
 1575              		.loc 2 391 0 is_stmt 0 discriminator 1
 1576 0cba 464B     		ldr	r3, .L127
 1577 0cbc 93ED007A 		flds	s14, [r3, #0]
 1578 0cc0 DFED487A 		flds	s15, .L127+16
 1579 0cc4 B4EEE77A 		fcmpes	s14, s15
 1580 0cc8 F1EE10FA 		fmstat
 1581 0ccc 20DB     		blt	.L73
 1582              	.L108:
 392:src/main.c    ****         {
 393:src/main.c    ****           STM_EVAL_LEDOn(LED6);
 1583              		.loc 2 393 0 is_stmt 1
 1584 0cce 4FF00300 		mov	r0, #3
 1585 0cd2 FFF7FEFF 		bl	STM_EVAL_LEDOn
 394:src/main.c    ****           STM_EVAL_LEDOff(LED9);
 1586              		.loc 2 394 0
 1587 0cd6 4FF00600 		mov	r0, #6
 1588 0cda FFF7FEFF 		bl	STM_EVAL_LEDOff
 395:src/main.c    ****           STM_EVAL_LEDOff(LED10);
 1589              		.loc 2 395 0
 1590 0cde 4FF00700 		mov	r0, #7
 1591 0ce2 FFF7FEFF 		bl	STM_EVAL_LEDOff
 396:src/main.c    ****           STM_EVAL_LEDOff(LED8);
 1592              		.loc 2 396 0
 1593 0ce6 4FF00500 		mov	r0, #5
 1594 0cea FFF7FEFF 		bl	STM_EVAL_LEDOff
 397:src/main.c    ****           STM_EVAL_LEDOff(LED3);
 1595              		.loc 2 397 0
 1596 0cee 4FF00000 		mov	r0, #0
 1597 0cf2 FFF7FEFF 		bl	STM_EVAL_LEDOff
 398:src/main.c    ****           STM_EVAL_LEDOff(LED5);
 1598              		.loc 2 398 0
 1599 0cf6 4FF00200 		mov	r0, #2
 1600 0cfa FFF7FEFF 		bl	STM_EVAL_LEDOff
 399:src/main.c    ****           STM_EVAL_LEDOff(LED4);
 1601              		.loc 2 399 0
 1602 0cfe 4FF00100 		mov	r0, #1
 1603 0d02 FFF7FEFF 		bl	STM_EVAL_LEDOff
 400:src/main.c    ****           STM_EVAL_LEDOff(LED7);
 1604              		.loc 2 400 0
 1605 0d06 4FF00400 		mov	r0, #4
 1606 0d0a FFF7FEFF 		bl	STM_EVAL_LEDOff
 1607 0d0e 34E0     		b	.L57
 1608              	.L73:
 401:src/main.c    ****         }        
 402:src/main.c    ****         else  if ((HeadingValue < 340.0f)&&(HeadingValue >= 295.0f))
 1609              		.loc 2 402 0
 1610 0d10 304B     		ldr	r3, .L127
 1611 0d12 93ED007A 		flds	s14, [r3, #0]
 1612 0d16 DFED357A 		flds	s15, .L127+24
 1613 0d1a B4EEE77A 		fcmpes	s14, s15
 1614 0d1e F1EE10FA 		fmstat
 1615 0d22 2AD5     		bpl	.L57
 1616              	.L109:
 1617              		.loc 2 402 0 is_stmt 0 discriminator 1
 1618 0d24 2B4B     		ldr	r3, .L127
 1619 0d26 93ED007A 		flds	s14, [r3, #0]
 1620 0d2a DFED2F7A 		flds	s15, .L127+20
 1621 0d2e B4EEE77A 		fcmpes	s14, s15
 1622 0d32 F1EE10FA 		fmstat
 1623 0d36 20DB     		blt	.L57
 1624              	.L110:
 403:src/main.c    ****         {
 404:src/main.c    ****           STM_EVAL_LEDOn(LED8);
 1625              		.loc 2 404 0 is_stmt 1
 1626 0d38 4FF00500 		mov	r0, #5
 1627 0d3c FFF7FEFF 		bl	STM_EVAL_LEDOn
 405:src/main.c    ****           STM_EVAL_LEDOff(LED6);
 1628              		.loc 2 405 0
 1629 0d40 4FF00300 		mov	r0, #3
 1630 0d44 FFF7FEFF 		bl	STM_EVAL_LEDOff
 406:src/main.c    ****           STM_EVAL_LEDOff(LED10);
 1631              		.loc 2 406 0
 1632 0d48 4FF00700 		mov	r0, #7
 1633 0d4c FFF7FEFF 		bl	STM_EVAL_LEDOff
 407:src/main.c    ****           STM_EVAL_LEDOff(LED7);
 1634              		.loc 2 407 0
 1635 0d50 4FF00400 		mov	r0, #4
 1636 0d54 FFF7FEFF 		bl	STM_EVAL_LEDOff
 408:src/main.c    ****           STM_EVAL_LEDOff(LED9);
 1637              		.loc 2 408 0
 1638 0d58 4FF00600 		mov	r0, #6
 1639 0d5c FFF7FEFF 		bl	STM_EVAL_LEDOff
 409:src/main.c    ****           STM_EVAL_LEDOff(LED3);
 1640              		.loc 2 409 0
 1641 0d60 4FF00000 		mov	r0, #0
 1642 0d64 FFF7FEFF 		bl	STM_EVAL_LEDOff
 410:src/main.c    ****           STM_EVAL_LEDOff(LED4);
 1643              		.loc 2 410 0
 1644 0d68 4FF00100 		mov	r0, #1
 1645 0d6c FFF7FEFF 		bl	STM_EVAL_LEDOff
 411:src/main.c    ****           STM_EVAL_LEDOff(LED5);
 1646              		.loc 2 411 0
 1647 0d70 4FF00200 		mov	r0, #2
 1648 0d74 FFF7FEFF 		bl	STM_EVAL_LEDOff
 325:src/main.c    ****         if (((HeadingValue < 25.0f)&&(HeadingValue >= 0.0f))||((HeadingValue >=340.0f)&&(HeadingVal
 1649              		.loc 2 325 0
 1650 0d78 24E0     		b	.L24
 1651              	.L57:
 1652 0d7a 23E0     		b	.L24
 1653              	.L48:
 412:src/main.c    ****         }
 413:src/main.c    ****       }
 414:src/main.c    ****       else
 415:src/main.c    ****       {
 416:src/main.c    ****         /* Toggle All LEDs */
 417:src/main.c    ****         STM_EVAL_LEDToggle(LED7);
 1654              		.loc 2 417 0
 1655 0d7c 4FF00400 		mov	r0, #4
 1656 0d80 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 418:src/main.c    ****         STM_EVAL_LEDToggle(LED6);
 1657              		.loc 2 418 0
 1658 0d84 4FF00300 		mov	r0, #3
 1659 0d88 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 419:src/main.c    ****         STM_EVAL_LEDToggle(LED10);
 1660              		.loc 2 419 0
 1661 0d8c 4FF00700 		mov	r0, #7
 1662 0d90 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 420:src/main.c    ****         STM_EVAL_LEDToggle(LED8);
 1663              		.loc 2 420 0
 1664 0d94 4FF00500 		mov	r0, #5
 1665 0d98 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 421:src/main.c    ****         STM_EVAL_LEDToggle(LED9);
 1666              		.loc 2 421 0
 1667 0d9c 4FF00600 		mov	r0, #6
 1668 0da0 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 422:src/main.c    ****         STM_EVAL_LEDToggle(LED3);
 1669              		.loc 2 422 0
 1670 0da4 4FF00000 		mov	r0, #0
 1671 0da8 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 423:src/main.c    ****         STM_EVAL_LEDToggle(LED4);
 1672              		.loc 2 423 0
 1673 0dac 4FF00100 		mov	r0, #1
 1674 0db0 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 424:src/main.c    ****         STM_EVAL_LEDToggle(LED5);
 1675              		.loc 2 424 0
 1676 0db4 4FF00200 		mov	r0, #2
 1677 0db8 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 425:src/main.c    ****         /* Delay 50ms */
 426:src/main.c    ****         Delay(5);
 1678              		.loc 2 426 0
 1679 0dbc 4FF00500 		mov	r0, #5
 1680 0dc0 FFF7FEFF 		bl	Delay
 1681              	.L24:
 237:src/main.c    ****     while (UserButtonPressed == 0x02)
 1682              		.loc 2 237 0 discriminator 1
 1683 0dc4 0A4B     		ldr	r3, .L127+28
 1684 0dc6 1B68     		ldr	r3, [r3, #0]
 1685 0dc8 022B     		cmp	r3, #2
 1686 0dca 3FF4BFAA 		beq	.L118
 427:src/main.c    ****       }
 428:src/main.c    ****     }
 429:src/main.c    ****   }
 1687              		.loc 2 429 0
 1688 0dce FFF754B9 		b	.L79
 1689              	.L128:
 1690 0dd2 00BF     		.align	2
 1691              	.L127:
 1692 0dd4 00000000 		.word	HeadingValue
 1693 0dd8 00002043 		.word	1126170624
 1694 0ddc 0000E642 		.word	1122369536
 1695 0de0 00004D43 		.word	1129119744
 1696 0de4 00007A43 		.word	1132068864
 1697 0de8 00809343 		.word	1133740032
 1698 0dec 0000AA43 		.word	1135214592
 1699 0df0 00000000 		.word	UserButtonPressed
 1700              		.cfi_endproc
 1701              	.LFE110:
 1703 0df4 AFF30080 		.section	.text.Demo_GyroConfig,"ax",%progbits
 1704              		.align	2
 1705              		.global	Demo_GyroConfig
 1706              		.thumb
 1707              		.thumb_func
 1709              	Demo_GyroConfig:
 1710              	.LFB111:
 430:src/main.c    **** }
 431:src/main.c    **** 
 432:src/main.c    **** 
 433:src/main.c    **** /**
 434:src/main.c    ****   * @brief  Configure the USB.
 435:src/main.c    ****   * @param  None
 436:src/main.c    ****   * @retval None
 437:src/main.c    ****   *
 438:src/main.c    **** void Demo_USB (void)
 439:src/main.c    **** {
 440:src/main.c    ****   Set_System();
 441:src/main.c    ****   Set_USBClock();
 442:src/main.c    ****   USB_Interrupts_Config();
 443:src/main.c    ****   
 444:src/main.c    ****   USB_Init();
 445:src/main.c    **** 
 446:src/main.c    ****   while ((bDeviceState != CONFIGURED)&&(USBConnectTimeOut != 0))
 447:src/main.c    ****   {}
 448:src/main.c    **** }*/
 449:src/main.c    **** 
 450:src/main.c    **** /**
 451:src/main.c    ****   * @brief  Configure the Mems to gyroscope application.
 452:src/main.c    ****   * @param  None
 453:src/main.c    ****   * @retval None
 454:src/main.c    ****   */
 455:src/main.c    **** void Demo_GyroConfig(void)
 456:src/main.c    **** {
 1711              		.loc 2 456 0
 1712              		.cfi_startproc
 1713              		@ args = 0, pretend = 0, frame = 16
 1714              		@ frame_needed = 1, uses_anonymous_args = 0
 1715 0000 80B5     		push	{r7, lr}
 1716              	.LCFI9:
 1717              		.cfi_def_cfa_offset 8
 1718              		.cfi_offset 7, -8
 1719              		.cfi_offset 14, -4
 1720 0002 84B0     		sub	sp, sp, #16
 1721              	.LCFI10:
 1722              		.cfi_def_cfa_offset 24
 1723 0004 00AF     		add	r7, sp, #0
 1724              	.LCFI11:
 1725              		.cfi_def_cfa_register 7
 457:src/main.c    ****   L3GD20_InitTypeDef L3GD20_InitStructure;
 458:src/main.c    ****   L3GD20_FilterConfigTypeDef L3GD20_FilterStructure;
 459:src/main.c    ****   
 460:src/main.c    ****   /* Configure Mems L3GD20 */
 461:src/main.c    ****   L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 1726              		.loc 2 461 0
 1727 0006 4FF00803 		mov	r3, #8
 1728 000a 3B72     		strb	r3, [r7, #8]
 462:src/main.c    ****   L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 1729              		.loc 2 462 0
 1730 000c 4FF00003 		mov	r3, #0
 1731 0010 7B72     		strb	r3, [r7, #9]
 463:src/main.c    ****   L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 1732              		.loc 2 463 0
 1733 0012 4FF00703 		mov	r3, #7
 1734 0016 BB72     		strb	r3, [r7, #10]
 464:src/main.c    ****   L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 1735              		.loc 2 464 0
 1736 0018 4FF03003 		mov	r3, #48
 1737 001c FB72     		strb	r3, [r7, #11]
 465:src/main.c    ****   L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 1738              		.loc 2 465 0
 1739 001e 4FF00003 		mov	r3, #0
 1740 0022 3B73     		strb	r3, [r7, #12]
 466:src/main.c    ****   L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 1741              		.loc 2 466 0
 1742 0024 4FF00003 		mov	r3, #0
 1743 0028 7B73     		strb	r3, [r7, #13]
 467:src/main.c    ****   L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500; 
 1744              		.loc 2 467 0
 1745 002a 4FF01003 		mov	r3, #16
 1746 002e BB73     		strb	r3, [r7, #14]
 468:src/main.c    ****   L3GD20_Init(&L3GD20_InitStructure);
 1747              		.loc 2 468 0
 1748 0030 07F10803 		add	r3, r7, #8
 1749 0034 1846     		mov	r0, r3
 1750 0036 FFF7FEFF 		bl	L3GD20_Init
 469:src/main.c    ****    
 470:src/main.c    ****   L3GD20_FilterStructure.HighPassFilter_Mode_Selection =L3GD20_HPM_NORMAL_MODE_RES;
 1751              		.loc 2 470 0
 1752 003a 4FF00003 		mov	r3, #0
 1753 003e 3B71     		strb	r3, [r7, #4]
 471:src/main.c    ****   L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 1754              		.loc 2 471 0
 1755 0040 4FF00003 		mov	r3, #0
 1756 0044 7B71     		strb	r3, [r7, #5]
 472:src/main.c    ****   L3GD20_FilterConfig(&L3GD20_FilterStructure) ;
 1757              		.loc 2 472 0
 1758 0046 07F10403 		add	r3, r7, #4
 1759 004a 1846     		mov	r0, r3
 1760 004c FFF7FEFF 		bl	L3GD20_FilterConfig
 473:src/main.c    ****   
 474:src/main.c    ****   L3GD20_FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 1761              		.loc 2 474 0
 1762 0050 4FF01000 		mov	r0, #16
 1763 0054 FFF7FEFF 		bl	L3GD20_FilterCmd
 475:src/main.c    **** }
 1764              		.loc 2 475 0
 1765 0058 07F11007 		add	r7, r7, #16
 1766 005c BD46     		mov	sp, r7
 1767 005e 80BD     		pop	{r7, pc}
 1768              		.cfi_endproc
 1769              	.LFE111:
 1771              		.section	.text.Demo_GyroReadAngRate,"ax",%progbits
 1772              		.align	2
 1773              		.global	Demo_GyroReadAngRate
 1774              		.thumb
 1775              		.thumb_func
 1777              	Demo_GyroReadAngRate:
 1778              	.LFB112:
 476:src/main.c    **** 
 477:src/main.c    **** /**
 478:src/main.c    ****   * @brief  Calculate the angular Data rate Gyroscope.
 479:src/main.c    ****   * @param  pfData : Data out pointer
 480:src/main.c    ****   * @retval None
 481:src/main.c    ****   */
 482:src/main.c    **** void Demo_GyroReadAngRate (float* pfData)
 483:src/main.c    **** {
 1779              		.loc 2 483 0
 1780              		.cfi_startproc
 1781              		@ args = 0, pretend = 0, frame = 40
 1782              		@ frame_needed = 1, uses_anonymous_args = 0
 1783 0000 80B5     		push	{r7, lr}
 1784              	.LCFI12:
 1785              		.cfi_def_cfa_offset 8
 1786              		.cfi_offset 7, -8
 1787              		.cfi_offset 14, -4
 1788 0002 8AB0     		sub	sp, sp, #40
 1789              	.LCFI13:
 1790              		.cfi_def_cfa_offset 48
 1791 0004 00AF     		add	r7, sp, #0
 1792              	.LCFI14:
 1793              		.cfi_def_cfa_register 7
 1794 0006 7860     		str	r0, [r7, #4]
 484:src/main.c    ****   uint8_t tmpbuffer[6] ={0};
 1795              		.loc 2 484 0
 1796 0008 4FF00003 		mov	r3, #0
 1797 000c BB61     		str	r3, [r7, #24]
 1798 000e 4FF00003 		mov	r3, #0
 1799 0012 BB83     		strh	r3, [r7, #28]	@ movhi
 485:src/main.c    ****   int16_t RawData[3] = {0};
 1800              		.loc 2 485 0
 1801 0014 4FF00003 		mov	r3, #0
 1802 0018 3B61     		str	r3, [r7, #16]
 1803 001a 4FF00003 		mov	r3, #0
 1804 001e BB82     		strh	r3, [r7, #20]	@ movhi
 486:src/main.c    ****   uint8_t tmpreg = 0;
 1805              		.loc 2 486 0
 1806 0020 4FF00003 		mov	r3, #0
 1807 0024 FB73     		strb	r3, [r7, #15]
 487:src/main.c    ****   float sensitivity = 0;
 1808              		.loc 2 487 0
 1809 0026 4FF00003 		mov	r3, #0
 1810 002a 7B62     		str	r3, [r7, #36]	@ float
 488:src/main.c    ****   int i =0;
 1811              		.loc 2 488 0
 1812 002c 4FF00003 		mov	r3, #0
 1813 0030 3B62     		str	r3, [r7, #32]
 489:src/main.c    **** 
 490:src/main.c    ****   L3GD20_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 1814              		.loc 2 490 0
 1815 0032 07F10F03 		add	r3, r7, #15
 1816 0036 1846     		mov	r0, r3
 1817 0038 4FF02301 		mov	r1, #35
 1818 003c 4FF00102 		mov	r2, #1
 1819 0040 FFF7FEFF 		bl	L3GD20_Read
 491:src/main.c    ****   
 492:src/main.c    ****   L3GD20_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 1820              		.loc 2 492 0
 1821 0044 07F11803 		add	r3, r7, #24
 1822 0048 1846     		mov	r0, r3
 1823 004a 4FF02801 		mov	r1, #40
 1824 004e 4FF00602 		mov	r2, #6
 1825 0052 FFF7FEFF 		bl	L3GD20_Read
 493:src/main.c    ****   
 494:src/main.c    ****   /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
 495:src/main.c    ****   if(!(tmpreg & 0x40))
 1826              		.loc 2 495 0
 1827 0056 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1828 0058 03F04003 		and	r3, r3, #64
 1829 005c 002B     		cmp	r3, #0
 1830 005e 2BD1     		bne	.L131
 496:src/main.c    ****   {
 497:src/main.c    ****     for(i=0; i<3; i++)
 1831              		.loc 2 497 0
 1832 0060 4FF00003 		mov	r3, #0
 1833 0064 3B62     		str	r3, [r7, #32]
 1834 0066 23E0     		b	.L132
 1835              	.L133:
 498:src/main.c    ****     {
 499:src/main.c    ****       RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 1836              		.loc 2 499 0 discriminator 2
 1837 0068 3B6A     		ldr	r3, [r7, #32]
 1838 006a 4FEA4303 		lsl	r3, r3, #1
 1839 006e 03F10103 		add	r3, r3, #1
 1840 0072 07F12801 		add	r1, r7, #40
 1841 0076 CB18     		adds	r3, r1, r3
 1842 0078 13F8103C 		ldrb	r3, [r3, #-16]	@ zero_extendqisi2
 1843 007c 4FEA0323 		lsl	r3, r3, #8
 1844 0080 9AB2     		uxth	r2, r3
 1845 0082 3B6A     		ldr	r3, [r7, #32]
 1846 0084 4FEA4303 		lsl	r3, r3, #1
 1847 0088 07F12801 		add	r1, r7, #40
 1848 008c CB18     		adds	r3, r1, r3
 1849 008e 13F8103C 		ldrb	r3, [r3, #-16]	@ zero_extendqisi2
 1850 0092 D318     		adds	r3, r2, r3
 1851 0094 9BB2     		uxth	r3, r3
 1852 0096 9AB2     		uxth	r2, r3
 1853 0098 3B6A     		ldr	r3, [r7, #32]
 1854 009a 4FEA4303 		lsl	r3, r3, #1
 1855 009e 07F12801 		add	r1, r7, #40
 1856 00a2 CB18     		adds	r3, r1, r3
 1857 00a4 23F8182C 		strh	r2, [r3, #-24]	@ movhi
 497:src/main.c    ****     for(i=0; i<3; i++)
 1858              		.loc 2 497 0 discriminator 2
 1859 00a8 3B6A     		ldr	r3, [r7, #32]
 1860 00aa 03F10103 		add	r3, r3, #1
 1861 00ae 3B62     		str	r3, [r7, #32]
 1862              	.L132:
 497:src/main.c    ****     for(i=0; i<3; i++)
 1863              		.loc 2 497 0 is_stmt 0 discriminator 1
 1864 00b0 3B6A     		ldr	r3, [r7, #32]
 1865 00b2 022B     		cmp	r3, #2
 1866 00b4 D8DD     		ble	.L133
 497:src/main.c    ****     for(i=0; i<3; i++)
 1867              		.loc 2 497 0
 1868 00b6 2AE0     		b	.L134
 1869              	.L131:
 500:src/main.c    ****     }
 501:src/main.c    ****   }
 502:src/main.c    ****   else
 503:src/main.c    ****   {
 504:src/main.c    ****     for(i=0; i<3; i++)
 1870              		.loc 2 504 0 is_stmt 1
 1871 00b8 4FF00003 		mov	r3, #0
 1872 00bc 3B62     		str	r3, [r7, #32]
 1873 00be 23E0     		b	.L135
 1874              	.L136:
 505:src/main.c    ****     {
 506:src/main.c    ****       RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 1875              		.loc 2 506 0 discriminator 2
 1876 00c0 3B6A     		ldr	r3, [r7, #32]
 1877 00c2 4FEA4303 		lsl	r3, r3, #1
 1878 00c6 07F12802 		add	r2, r7, #40
 1879 00ca D318     		adds	r3, r2, r3
 1880 00cc 13F8103C 		ldrb	r3, [r3, #-16]	@ zero_extendqisi2
 1881 00d0 4FEA0323 		lsl	r3, r3, #8
 1882 00d4 9AB2     		uxth	r2, r3
 1883 00d6 3B6A     		ldr	r3, [r7, #32]
 1884 00d8 4FEA4303 		lsl	r3, r3, #1
 1885 00dc 03F10103 		add	r3, r3, #1
 1886 00e0 07F12801 		add	r1, r7, #40
 1887 00e4 CB18     		adds	r3, r1, r3
 1888 00e6 13F8103C 		ldrb	r3, [r3, #-16]	@ zero_extendqisi2
 1889 00ea D318     		adds	r3, r2, r3
 1890 00ec 9BB2     		uxth	r3, r3
 1891 00ee 9AB2     		uxth	r2, r3
 1892 00f0 3B6A     		ldr	r3, [r7, #32]
 1893 00f2 4FEA4303 		lsl	r3, r3, #1
 1894 00f6 07F12801 		add	r1, r7, #40
 1895 00fa CB18     		adds	r3, r1, r3
 1896 00fc 23F8182C 		strh	r2, [r3, #-24]	@ movhi
 504:src/main.c    ****     for(i=0; i<3; i++)
 1897              		.loc 2 504 0 discriminator 2
 1898 0100 3B6A     		ldr	r3, [r7, #32]
 1899 0102 03F10103 		add	r3, r3, #1
 1900 0106 3B62     		str	r3, [r7, #32]
 1901              	.L135:
 504:src/main.c    ****     for(i=0; i<3; i++)
 1902              		.loc 2 504 0 is_stmt 0 discriminator 1
 1903 0108 3B6A     		ldr	r3, [r7, #32]
 1904 010a 022B     		cmp	r3, #2
 1905 010c D8DD     		ble	.L136
 1906              	.L134:
 507:src/main.c    ****     }
 508:src/main.c    ****   }
 509:src/main.c    ****   
 510:src/main.c    ****   /* Switch the sensitivity value set in the CRTL4 */
 511:src/main.c    ****   switch(tmpreg & 0x30)
 1907              		.loc 2 511 0 is_stmt 1
 1908 010e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1909 0110 03F03003 		and	r3, r3, #48
 1910 0114 102B     		cmp	r3, #16
 1911 0116 06D0     		beq	.L139
 1912 0118 202B     		cmp	r3, #32
 1913 011a 07D0     		beq	.L140
 1914 011c 002B     		cmp	r3, #0
 1915 011e 08D1     		bne	.L137
 1916              	.L138:
 512:src/main.c    ****   {
 513:src/main.c    ****   case 0x00:
 514:src/main.c    ****     sensitivity=L3G_Sensitivity_250dps;
 1917              		.loc 2 514 0
 1918 0120 174B     		ldr	r3, .L143
 1919 0122 7B62     		str	r3, [r7, #36]	@ float
 515:src/main.c    ****     break;
 1920              		.loc 2 515 0
 1921 0124 05E0     		b	.L137
 1922              	.L139:
 516:src/main.c    ****     
 517:src/main.c    ****   case 0x10:
 518:src/main.c    ****     sensitivity=L3G_Sensitivity_500dps;
 1923              		.loc 2 518 0
 1924 0126 174B     		ldr	r3, .L143+4
 1925 0128 7B62     		str	r3, [r7, #36]	@ float
 519:src/main.c    ****     break;
 1926              		.loc 2 519 0
 1927 012a 02E0     		b	.L137
 1928              	.L140:
 520:src/main.c    ****     
 521:src/main.c    ****   case 0x20:
 522:src/main.c    ****     sensitivity=L3G_Sensitivity_2000dps;
 1929              		.loc 2 522 0
 1930 012c 164B     		ldr	r3, .L143+8
 1931 012e 7B62     		str	r3, [r7, #36]	@ float
 523:src/main.c    ****     break;
 1932              		.loc 2 523 0
 1933 0130 00BF     		nop
 1934              	.L137:
 524:src/main.c    ****   }
 525:src/main.c    ****   /* divide by sensitivity */
 526:src/main.c    ****   for(i=0; i<3; i++)
 1935              		.loc 2 526 0
 1936 0132 4FF00003 		mov	r3, #0
 1937 0136 3B62     		str	r3, [r7, #32]
 1938 0138 1BE0     		b	.L141
 1939              	.L142:
 527:src/main.c    ****   {
 528:src/main.c    ****     pfData[i]=(float)RawData[i]/sensitivity;
 1940              		.loc 2 528 0 discriminator 2
 1941 013a 3B6A     		ldr	r3, [r7, #32]
 1942 013c 4FEA8303 		lsl	r3, r3, #2
 1943 0140 7A68     		ldr	r2, [r7, #4]
 1944 0142 D218     		adds	r2, r2, r3
 1945 0144 3B6A     		ldr	r3, [r7, #32]
 1946 0146 4FEA4303 		lsl	r3, r3, #1
 1947 014a 07F12801 		add	r1, r7, #40
 1948 014e CB18     		adds	r3, r1, r3
 1949 0150 33F8183C 		ldrh	r3, [r3, #-24]
 1950 0154 1BB2     		sxth	r3, r3
 1951 0156 07EE903A 		fmsr	s15, r3	@ int
 1952 015a B8EEE77A 		fsitos	s14, s15
 1953 015e D7ED097A 		flds	s15, [r7, #36]
 1954 0162 C7EE277A 		fdivs	s15, s14, s15
 1955 0166 C2ED007A 		fsts	s15, [r2, #0]
 526:src/main.c    ****   for(i=0; i<3; i++)
 1956              		.loc 2 526 0 discriminator 2
 1957 016a 3B6A     		ldr	r3, [r7, #32]
 1958 016c 03F10103 		add	r3, r3, #1
 1959 0170 3B62     		str	r3, [r7, #32]
 1960              	.L141:
 526:src/main.c    ****   for(i=0; i<3; i++)
 1961              		.loc 2 526 0 is_stmt 0 discriminator 1
 1962 0172 3B6A     		ldr	r3, [r7, #32]
 1963 0174 022B     		cmp	r3, #2
 1964 0176 E0DD     		ble	.L142
 529:src/main.c    ****   }
 530:src/main.c    **** }
 1965              		.loc 2 530 0 is_stmt 1
 1966 0178 07F12807 		add	r7, r7, #40
 1967 017c BD46     		mov	sp, r7
 1968 017e 80BD     		pop	{r7, pc}
 1969              	.L144:
 1970              		.align	2
 1971              	.L143:
 1972 0180 EC91E442 		.word	1122275820
 1973 0184 54926442 		.word	1113887316
 1974 0188 5C8F6441 		.word	1097109340
 1975              		.cfi_endproc
 1976              	.LFE112:
 1978              		.section	.text.Demo_CompassConfig,"ax",%progbits
 1979              		.align	2
 1980              		.global	Demo_CompassConfig
 1981              		.thumb
 1982              		.thumb_func
 1984              	Demo_CompassConfig:
 1985              	.LFB113:
 531:src/main.c    **** 
 532:src/main.c    **** /**
 533:src/main.c    ****   * @brief  Configure the Mems to compass application.
 534:src/main.c    ****   * @param  None
 535:src/main.c    ****   * @retval None
 536:src/main.c    ****   */
 537:src/main.c    **** void Demo_CompassConfig(void)
 538:src/main.c    **** {
 1986              		.loc 2 538 0
 1987              		.cfi_startproc
 1988              		@ args = 0, pretend = 0, frame = 16
 1989              		@ frame_needed = 1, uses_anonymous_args = 0
 1990 0000 80B5     		push	{r7, lr}
 1991              	.LCFI15:
 1992              		.cfi_def_cfa_offset 8
 1993              		.cfi_offset 7, -8
 1994              		.cfi_offset 14, -4
 1995 0002 84B0     		sub	sp, sp, #16
 1996              	.LCFI16:
 1997              		.cfi_def_cfa_offset 24
 1998 0004 00AF     		add	r7, sp, #0
 1999              	.LCFI17:
 2000              		.cfi_def_cfa_register 7
 539:src/main.c    ****   LSM303DLHCMag_InitTypeDef LSM303DLHC_InitStructure;
 540:src/main.c    ****   LSM303DLHCAcc_InitTypeDef LSM303DLHCAcc_InitStructure;
 541:src/main.c    ****   LSM303DLHCAcc_FilterConfigTypeDef LSM303DLHCFilter_InitStructure;
 542:src/main.c    ****   
 543:src/main.c    ****   /* Configure MEMS magnetometer main parameters: temp, working mode, full Scale and Data rate */
 544:src/main.c    ****   LSM303DLHC_InitStructure.Temperature_Sensor = LSM303DLHC_TEMPSENSOR_DISABLE;
 2001              		.loc 2 544 0
 2002 0006 4FF00003 		mov	r3, #0
 2003 000a 3B73     		strb	r3, [r7, #12]
 545:src/main.c    ****   LSM303DLHC_InitStructure.MagOutput_DataRate =LSM303DLHC_ODR_30_HZ ;
 2004              		.loc 2 545 0
 2005 000c 4FF01403 		mov	r3, #20
 2006 0010 7B73     		strb	r3, [r7, #13]
 546:src/main.c    ****   LSM303DLHC_InitStructure.MagFull_Scale = LSM303DLHC_FS_8_1_GA;
 2007              		.loc 2 546 0
 2008 0012 4FF0E003 		mov	r3, #224
 2009 0016 FB73     		strb	r3, [r7, #15]
 547:src/main.c    ****   LSM303DLHC_InitStructure.Working_Mode = LSM303DLHC_CONTINUOS_CONVERSION;
 2010              		.loc 2 547 0
 2011 0018 4FF00003 		mov	r3, #0
 2012 001c BB73     		strb	r3, [r7, #14]
 548:src/main.c    ****   LSM303DLHC_MagInit(&LSM303DLHC_InitStructure);
 2013              		.loc 2 548 0
 2014 001e 07F10C03 		add	r3, r7, #12
 2015 0022 1846     		mov	r0, r3
 2016 0024 FFF7FEFF 		bl	LSM303DLHC_MagInit
 549:src/main.c    ****   
 550:src/main.c    ****    /* Fill the accelerometer structure */
 551:src/main.c    ****   LSM303DLHCAcc_InitStructure.Power_Mode = LSM303DLHC_NORMAL_MODE;
 2017              		.loc 2 551 0
 2018 0028 4FF00003 		mov	r3, #0
 2019 002c 3B71     		strb	r3, [r7, #4]
 552:src/main.c    ****   LSM303DLHCAcc_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 2020              		.loc 2 552 0
 2021 002e 4FF04003 		mov	r3, #64
 2022 0032 7B71     		strb	r3, [r7, #5]
 553:src/main.c    ****   LSM303DLHCAcc_InitStructure.Axes_Enable= LSM303DLHC_AXES_ENABLE;
 2023              		.loc 2 553 0
 2024 0034 4FF00703 		mov	r3, #7
 2025 0038 BB71     		strb	r3, [r7, #6]
 554:src/main.c    ****   LSM303DLHCAcc_InitStructure.AccFull_Scale = LSM303DLHC_FULLSCALE_2G;
 2026              		.loc 2 554 0
 2027 003a 4FF00003 		mov	r3, #0
 2028 003e BB72     		strb	r3, [r7, #10]
 555:src/main.c    ****   LSM303DLHCAcc_InitStructure.BlockData_Update = LSM303DLHC_BlockUpdate_Continous;
 2029              		.loc 2 555 0
 2030 0040 4FF00003 		mov	r3, #0
 2031 0044 3B72     		strb	r3, [r7, #8]
 556:src/main.c    ****   LSM303DLHCAcc_InitStructure.Endianness=LSM303DLHC_BLE_LSB;
 2032              		.loc 2 556 0
 2033 0046 4FF00003 		mov	r3, #0
 2034 004a 7B72     		strb	r3, [r7, #9]
 557:src/main.c    ****   LSM303DLHCAcc_InitStructure.High_Resolution=LSM303DLHC_HR_ENABLE;
 2035              		.loc 2 557 0
 2036 004c 4FF00803 		mov	r3, #8
 2037 0050 FB71     		strb	r3, [r7, #7]
 558:src/main.c    ****   /* Configure the accelerometer main parameters */
 559:src/main.c    ****   LSM303DLHC_AccInit(&LSM303DLHCAcc_InitStructure);
 2038              		.loc 2 559 0
 2039 0052 07F10403 		add	r3, r7, #4
 2040 0056 1846     		mov	r0, r3
 2041 0058 FFF7FEFF 		bl	LSM303DLHC_AccInit
 560:src/main.c    ****   
 561:src/main.c    ****   /* Fill the accelerometer LPF structure */
 562:src/main.c    ****   LSM303DLHCFilter_InitStructure.HighPassFilter_Mode_Selection =LSM303DLHC_HPM_NORMAL_MODE;
 2042              		.loc 2 562 0
 2043 005c 4FF08003 		mov	r3, #128
 2044 0060 3B70     		strb	r3, [r7, #0]
 563:src/main.c    ****   LSM303DLHCFilter_InitStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 2045              		.loc 2 563 0
 2046 0062 4FF01003 		mov	r3, #16
 2047 0066 7B70     		strb	r3, [r7, #1]
 564:src/main.c    ****   LSM303DLHCFilter_InitStructure.HighPassFilter_AOI1 = LSM303DLHC_HPF_AOI1_DISABLE;
 2048              		.loc 2 564 0
 2049 0068 4FF00003 		mov	r3, #0
 2050 006c BB70     		strb	r3, [r7, #2]
 565:src/main.c    ****   LSM303DLHCFilter_InitStructure.HighPassFilter_AOI2 = LSM303DLHC_HPF_AOI2_DISABLE;
 2051              		.loc 2 565 0
 2052 006e 4FF00003 		mov	r3, #0
 2053 0072 FB70     		strb	r3, [r7, #3]
 566:src/main.c    **** 
 567:src/main.c    ****   /* Configure the accelerometer LPF main parameters */
 568:src/main.c    ****   LSM303DLHC_AccFilterConfig(&LSM303DLHCFilter_InitStructure);
 2054              		.loc 2 568 0
 2055 0074 3B46     		mov	r3, r7
 2056 0076 1846     		mov	r0, r3
 2057 0078 FFF7FEFF 		bl	LSM303DLHC_AccFilterConfig
 569:src/main.c    **** }
 2058              		.loc 2 569 0
 2059 007c 07F11007 		add	r7, r7, #16
 2060 0080 BD46     		mov	sp, r7
 2061 0082 80BD     		pop	{r7, pc}
 2062              		.cfi_endproc
 2063              	.LFE113:
 2065              		.section	.text.Demo_CompassReadAcc,"ax",%progbits
 2066              		.align	2
 2067              		.global	Demo_CompassReadAcc
 2068              		.thumb
 2069              		.thumb_func
 2071              	Demo_CompassReadAcc:
 2072              	.LFB114:
 570:src/main.c    **** 
 571:src/main.c    **** /**
 572:src/main.c    **** * @brief Read LSM303DLHC output register, and calculate the acceleration ACC=(1/SENSITIVITY)* (out_
 573:src/main.c    **** * @param pnData: pointer to float buffer where to store data
 574:src/main.c    **** * @retval None
 575:src/main.c    **** */
 576:src/main.c    **** void Demo_CompassReadAcc(float* pfData)
 577:src/main.c    **** {
 2073              		.loc 2 577 0
 2074              		.cfi_startproc
 2075              		@ args = 0, pretend = 0, frame = 40
 2076              		@ frame_needed = 1, uses_anonymous_args = 0
 2077 0000 80B5     		push	{r7, lr}
 2078              	.LCFI18:
 2079              		.cfi_def_cfa_offset 8
 2080              		.cfi_offset 7, -8
 2081              		.cfi_offset 14, -4
 2082 0002 8AB0     		sub	sp, sp, #40
 2083              	.LCFI19:
 2084              		.cfi_def_cfa_offset 48
 2085 0004 00AF     		add	r7, sp, #0
 2086              	.LCFI20:
 2087              		.cfi_def_cfa_register 7
 2088 0006 7860     		str	r0, [r7, #4]
 578:src/main.c    ****   int16_t pnRawData[3];
 579:src/main.c    ****   uint8_t ctrlx[2];
 580:src/main.c    ****   uint8_t buffer[6], cDivider;
 581:src/main.c    ****   uint8_t i = 0;
 2089              		.loc 2 581 0
 2090 0008 4FF00003 		mov	r3, #0
 2091 000c 87F82630 		strb	r3, [r7, #38]
 582:src/main.c    ****   float LSM_Acc_Sensitivity = LSM_Acc_Sensitivity_2g;
 2092              		.loc 2 582 0
 2093 0010 4FF07E53 		mov	r3, #1065353216
 2094 0014 3B62     		str	r3, [r7, #32]	@ float
 583:src/main.c    ****   
 584:src/main.c    ****   /* Read the register content */
 585:src/main.c    ****   LSM303DLHC_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrlx,2);
 2095              		.loc 2 585 0
 2096 0016 07F11403 		add	r3, r7, #20
 2097 001a 4FF03200 		mov	r0, #50
 2098 001e 4FF02301 		mov	r1, #35
 2099 0022 1A46     		mov	r2, r3
 2100 0024 4FF00203 		mov	r3, #2
 2101 0028 FFF7FEFF 		bl	LSM303DLHC_Read
 586:src/main.c    ****   LSM303DLHC_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A, buffer, 6);
 2102              		.loc 2 586 0
 2103 002c 07F10C03 		add	r3, r7, #12
 2104 0030 4FF03200 		mov	r0, #50
 2105 0034 4FF02801 		mov	r1, #40
 2106 0038 1A46     		mov	r2, r3
 2107 003a 4FF00603 		mov	r3, #6
 2108 003e FFF7FEFF 		bl	LSM303DLHC_Read
 587:src/main.c    ****    
 588:src/main.c    ****   if(ctrlx[1]&0x40)
 2109              		.loc 2 588 0
 2110 0042 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 2111 0044 03F04003 		and	r3, r3, #64
 2112 0048 002B     		cmp	r3, #0
 2113 004a 04D0     		beq	.L147
 589:src/main.c    ****     cDivider=64;
 2114              		.loc 2 589 0
 2115 004c 4FF04003 		mov	r3, #64
 2116 0050 87F82730 		strb	r3, [r7, #39]
 2117 0054 03E0     		b	.L148
 2118              	.L147:
 590:src/main.c    ****   else
 591:src/main.c    ****     cDivider=16;
 2119              		.loc 2 591 0
 2120 0056 4FF01003 		mov	r3, #16
 2121 005a 87F82730 		strb	r3, [r7, #39]
 2122              	.L148:
 592:src/main.c    **** 
 593:src/main.c    ****   /* check in the control register4 the data alignment*/
 594:src/main.c    ****   if(!(ctrlx[0] & 0x40) || (ctrlx[1] & 0x40)) /* Little Endian Mode or FIFO mode */
 2123              		.loc 2 594 0
 2124 005e 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 2125 0060 03F04003 		and	r3, r3, #64
 2126 0064 002B     		cmp	r3, #0
 2127 0066 04D0     		beq	.L149
 2128              		.loc 2 594 0 is_stmt 0 discriminator 1
 2129 0068 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 2130 006a 03F04003 		and	r3, r3, #64
 2131 006e 002B     		cmp	r3, #0
 2132 0070 36D0     		beq	.L150
 2133              	.L149:
 595:src/main.c    ****   {
 596:src/main.c    ****     for(i=0; i<3; i++)
 2134              		.loc 2 596 0 is_stmt 1
 2135 0072 4FF00003 		mov	r3, #0
 2136 0076 87F82630 		strb	r3, [r7, #38]
 2137 007a 2CE0     		b	.L151
 2138              	.L152:
 597:src/main.c    ****     {
 598:src/main.c    ****       pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i])/cDivider;
 2139              		.loc 2 598 0 discriminator 2
 2140 007c 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 2141 0080 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 2142 0084 4FEA4202 		lsl	r2, r2, #1
 2143 0088 02F10102 		add	r2, r2, #1
 2144 008c 07F12800 		add	r0, r7, #40
 2145 0090 8218     		adds	r2, r0, r2
 2146 0092 12F81C2C 		ldrb	r2, [r2, #-28]	@ zero_extendqisi2
 2147 0096 4FEA0222 		lsl	r2, r2, #8
 2148 009a 92B2     		uxth	r2, r2
 2149 009c 11B2     		sxth	r1, r2
 2150 009e 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 2151 00a2 4FEA4202 		lsl	r2, r2, #1
 2152 00a6 07F12800 		add	r0, r7, #40
 2153 00aa 8218     		adds	r2, r0, r2
 2154 00ac 12F81C2C 		ldrb	r2, [r2, #-28]	@ zero_extendqisi2
 2155 00b0 8918     		adds	r1, r1, r2
 2156 00b2 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 2157 00b6 91FBF2F2 		sdiv	r2, r1, r2
 2158 00ba 92B2     		uxth	r2, r2
 2159 00bc 4FEA4303 		lsl	r3, r3, #1
 2160 00c0 07F12801 		add	r1, r7, #40
 2161 00c4 CB18     		adds	r3, r1, r3
 2162 00c6 23F8102C 		strh	r2, [r3, #-16]	@ movhi
 596:src/main.c    ****     for(i=0; i<3; i++)
 2163              		.loc 2 596 0 discriminator 2
 2164 00ca 97F82630 		ldrb	r3, [r7, #38]
 2165 00ce 03F10103 		add	r3, r3, #1
 2166 00d2 87F82630 		strb	r3, [r7, #38]
 2167              	.L151:
 596:src/main.c    ****     for(i=0; i<3; i++)
 2168              		.loc 2 596 0 is_stmt 0 discriminator 1
 2169 00d6 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 2170 00da 022B     		cmp	r3, #2
 2171 00dc CED9     		bls	.L152
 594:src/main.c    ****   if(!(ctrlx[0] & 0x40) || (ctrlx[1] & 0x40)) /* Little Endian Mode or FIFO mode */
 2172              		.loc 2 594 0 is_stmt 1
 2173 00de 35E0     		b	.L153
 2174              	.L150:
 599:src/main.c    ****     }
 600:src/main.c    ****   }
 601:src/main.c    ****   else /* Big Endian Mode */
 602:src/main.c    ****   {
 603:src/main.c    ****     for(i=0; i<3; i++)
 2175              		.loc 2 603 0
 2176 00e0 4FF00003 		mov	r3, #0
 2177 00e4 87F82630 		strb	r3, [r7, #38]
 2178 00e8 2CE0     		b	.L154
 2179              	.L155:
 604:src/main.c    ****       pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1])/cDivider;
 2180              		.loc 2 604 0 discriminator 2
 2181 00ea 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 2182 00ee 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 2183 00f2 4FEA4202 		lsl	r2, r2, #1
 2184 00f6 07F12800 		add	r0, r7, #40
 2185 00fa 8218     		adds	r2, r0, r2
 2186 00fc 12F81C2C 		ldrb	r2, [r2, #-28]	@ zero_extendqisi2
 2187 0100 4FEA0222 		lsl	r2, r2, #8
 2188 0104 92B2     		uxth	r2, r2
 2189 0106 11B2     		sxth	r1, r2
 2190 0108 97F82620 		ldrb	r2, [r7, #38]	@ zero_extendqisi2
 2191 010c 4FEA4202 		lsl	r2, r2, #1
 2192 0110 02F10102 		add	r2, r2, #1
 2193 0114 07F12800 		add	r0, r7, #40
 2194 0118 8218     		adds	r2, r0, r2
 2195 011a 12F81C2C 		ldrb	r2, [r2, #-28]	@ zero_extendqisi2
 2196 011e 8918     		adds	r1, r1, r2
 2197 0120 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 2198 0124 91FBF2F2 		sdiv	r2, r1, r2
 2199 0128 92B2     		uxth	r2, r2
 2200 012a 4FEA4303 		lsl	r3, r3, #1
 2201 012e 07F12801 		add	r1, r7, #40
 2202 0132 CB18     		adds	r3, r1, r3
 2203 0134 23F8102C 		strh	r2, [r3, #-16]	@ movhi
 603:src/main.c    ****     for(i=0; i<3; i++)
 2204              		.loc 2 603 0 discriminator 2
 2205 0138 97F82630 		ldrb	r3, [r7, #38]
 2206 013c 03F10103 		add	r3, r3, #1
 2207 0140 87F82630 		strb	r3, [r7, #38]
 2208              	.L154:
 603:src/main.c    ****     for(i=0; i<3; i++)
 2209              		.loc 2 603 0 is_stmt 0 discriminator 1
 2210 0144 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 2211 0148 022B     		cmp	r3, #2
 2212 014a CED9     		bls	.L155
 2213              	.L153:
 605:src/main.c    ****   }
 606:src/main.c    ****   /* Read the register content */
 607:src/main.c    ****   LSM303DLHC_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrlx,2);
 2214              		.loc 2 607 0 is_stmt 1
 2215 014c 07F11403 		add	r3, r7, #20
 2216 0150 4FF03200 		mov	r0, #50
 2217 0154 4FF02301 		mov	r1, #35
 2218 0158 1A46     		mov	r2, r3
 2219 015a 4FF00203 		mov	r3, #2
 2220 015e FFF7FEFF 		bl	LSM303DLHC_Read
 608:src/main.c    **** 
 609:src/main.c    **** 
 610:src/main.c    ****   if(ctrlx[1]&0x40)
 2221              		.loc 2 610 0
 2222 0162 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 2223 0164 03F04003 		and	r3, r3, #64
 2224 0168 002B     		cmp	r3, #0
 2225 016a 03D0     		beq	.L156
 611:src/main.c    ****   {
 612:src/main.c    ****     /* FIFO mode */
 613:src/main.c    ****     LSM_Acc_Sensitivity = 0.25;
 2226              		.loc 2 613 0
 2227 016c 4FF07A53 		mov	r3, #1048576000
 2228 0170 3B62     		str	r3, [r7, #32]	@ float
 2229 0172 1DE0     		b	.L157
 2230              	.L156:
 614:src/main.c    ****   }
 615:src/main.c    ****   else
 616:src/main.c    ****   {
 617:src/main.c    ****     /* normal mode */
 618:src/main.c    ****     /* switch the sensitivity value set in the CRTL4*/
 619:src/main.c    ****     switch(ctrlx[0] & 0x30)
 2231              		.loc 2 619 0
 2232 0174 3B7D     		ldrb	r3, [r7, #20]	@ zero_extendqisi2
 2233 0176 03F03003 		and	r3, r3, #48
 2234 017a 102B     		cmp	r3, #16
 2235 017c 0DD0     		beq	.L159
 2236 017e 102B     		cmp	r3, #16
 2237 0180 02DC     		bgt	.L162
 2238 0182 002B     		cmp	r3, #0
 2239 0184 05D0     		beq	.L158
 2240 0186 13E0     		b	.L157
 2241              	.L162:
 2242 0188 202B     		cmp	r3, #32
 2243 018a 0AD0     		beq	.L160
 2244 018c 302B     		cmp	r3, #48
 2245 018e 0CD0     		beq	.L161
 2246 0190 0EE0     		b	.L157
 2247              	.L158:
 620:src/main.c    ****     {
 621:src/main.c    ****     case LSM303DLHC_FULLSCALE_2G:
 622:src/main.c    ****       LSM_Acc_Sensitivity = LSM_Acc_Sensitivity_2g;
 2248              		.loc 2 622 0
 2249 0192 4FF07E53 		mov	r3, #1065353216
 2250 0196 3B62     		str	r3, [r7, #32]	@ float
 623:src/main.c    ****       break;
 2251              		.loc 2 623 0
 2252 0198 0AE0     		b	.L157
 2253              	.L159:
 624:src/main.c    ****     case LSM303DLHC_FULLSCALE_4G:
 625:src/main.c    ****       LSM_Acc_Sensitivity = LSM_Acc_Sensitivity_4g;
 2254              		.loc 2 625 0
 2255 019a 4FF07C53 		mov	r3, #1056964608
 2256 019e 3B62     		str	r3, [r7, #32]	@ float
 626:src/main.c    ****       break;
 2257              		.loc 2 626 0
 2258 01a0 06E0     		b	.L157
 2259              	.L160:
 627:src/main.c    ****     case LSM303DLHC_FULLSCALE_8G:
 628:src/main.c    ****       LSM_Acc_Sensitivity = LSM_Acc_Sensitivity_8g;
 2260              		.loc 2 628 0
 2261 01a2 4FF07A53 		mov	r3, #1048576000
 2262 01a6 3B62     		str	r3, [r7, #32]	@ float
 629:src/main.c    ****       break;
 2263              		.loc 2 629 0
 2264 01a8 02E0     		b	.L157
 2265              	.L161:
 630:src/main.c    ****     case LSM303DLHC_FULLSCALE_16G:
 631:src/main.c    ****       LSM_Acc_Sensitivity = LSM_Acc_Sensitivity_16g;
 2266              		.loc 2 631 0
 2267 01aa 184B     		ldr	r3, .L165
 2268 01ac 3B62     		str	r3, [r7, #32]	@ float
 632:src/main.c    ****       break;
 2269              		.loc 2 632 0
 2270 01ae 00BF     		nop
 2271              	.L157:
 633:src/main.c    ****     }
 634:src/main.c    ****   }
 635:src/main.c    **** 
 636:src/main.c    ****   /* Obtain the mg value for the three axis */
 637:src/main.c    ****   for(i=0; i<3; i++)
 2272              		.loc 2 637 0
 2273 01b0 4FF00003 		mov	r3, #0
 2274 01b4 87F82630 		strb	r3, [r7, #38]
 2275 01b8 1FE0     		b	.L163
 2276              	.L164:
 638:src/main.c    ****   {
 639:src/main.c    ****     pfData[i]=(float)pnRawData[i]/LSM_Acc_Sensitivity;
 2277              		.loc 2 639 0 discriminator 2
 2278 01ba 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 2279 01be 4FEA8303 		lsl	r3, r3, #2
 2280 01c2 7A68     		ldr	r2, [r7, #4]
 2281 01c4 D218     		adds	r2, r2, r3
 2282 01c6 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 2283 01ca 4FEA4303 		lsl	r3, r3, #1
 2284 01ce 07F12800 		add	r0, r7, #40
 2285 01d2 C318     		adds	r3, r0, r3
 2286 01d4 33F8103C 		ldrh	r3, [r3, #-16]
 2287 01d8 1BB2     		sxth	r3, r3
 2288 01da 07EE903A 		fmsr	s15, r3	@ int
 2289 01de B8EEE77A 		fsitos	s14, s15
 2290 01e2 D7ED087A 		flds	s15, [r7, #32]
 2291 01e6 C7EE277A 		fdivs	s15, s14, s15
 2292 01ea C2ED007A 		fsts	s15, [r2, #0]
 637:src/main.c    ****   for(i=0; i<3; i++)
 2293              		.loc 2 637 0 discriminator 2
 2294 01ee 97F82630 		ldrb	r3, [r7, #38]
 2295 01f2 03F10103 		add	r3, r3, #1
 2296 01f6 87F82630 		strb	r3, [r7, #38]
 2297              	.L163:
 637:src/main.c    ****   for(i=0; i<3; i++)
 2298              		.loc 2 637 0 is_stmt 0 discriminator 1
 2299 01fa 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 2300 01fe 022B     		cmp	r3, #2
 2301 0200 DBD9     		bls	.L164
 640:src/main.c    ****   }
 641:src/main.c    **** 
 642:src/main.c    **** }
 2302              		.loc 2 642 0 is_stmt 1
 2303 0202 07F12807 		add	r7, r7, #40
 2304 0206 BD46     		mov	sp, r7
 2305 0208 80BD     		pop	{r7, pc}
 2306              	.L166:
 2307 020a 00BF     		.align	2
 2308              	.L165:
 2309 020c 9FCDAA3D 		.word	1034603935
 2310              		.cfi_endproc
 2311              	.LFE114:
 2313              		.section	.text.Demo_CompassReadMag,"ax",%progbits
 2314              		.align	2
 2315              		.global	Demo_CompassReadMag
 2316              		.thumb
 2317              		.thumb_func
 2319              	Demo_CompassReadMag:
 2320              	.LFB115:
 643:src/main.c    **** 
 644:src/main.c    **** /**
 645:src/main.c    ****   * @brief  calculate the magnetic field Magn.
 646:src/main.c    **** * @param  pfData: pointer to the data out
 647:src/main.c    ****   * @retval None
 648:src/main.c    ****   */
 649:src/main.c    **** void Demo_CompassReadMag (float* pfData)
 650:src/main.c    **** {
 2321              		.loc 2 650 0
 2322              		.cfi_startproc
 2323              		@ args = 0, pretend = 0, frame = 16
 2324              		@ frame_needed = 1, uses_anonymous_args = 0
 2325 0000 80B5     		push	{r7, lr}
 2326              	.LCFI21:
 2327              		.cfi_def_cfa_offset 8
 2328              		.cfi_offset 7, -8
 2329              		.cfi_offset 14, -4
 2330 0002 84B0     		sub	sp, sp, #16
 2331              	.LCFI22:
 2332              		.cfi_def_cfa_offset 24
 2333 0004 00AF     		add	r7, sp, #0
 2334              	.LCFI23:
 2335              		.cfi_def_cfa_register 7
 2336 0006 7860     		str	r0, [r7, #4]
 651:src/main.c    ****   static uint8_t buffer[6] = {0};
 652:src/main.c    ****   uint8_t CTRLB = 0;
 2337              		.loc 2 652 0
 2338 0008 4FF00003 		mov	r3, #0
 2339 000c BB72     		strb	r3, [r7, #10]
 653:src/main.c    ****   uint16_t Magn_Sensitivity_XY = 0, Magn_Sensitivity_Z = 0;
 2340              		.loc 2 653 0
 2341 000e 4FF00003 		mov	r3, #0
 2342 0012 FB81     		strh	r3, [r7, #14]	@ movhi
 2343 0014 4FF00003 		mov	r3, #0
 2344 0018 BB81     		strh	r3, [r7, #12]	@ movhi
 654:src/main.c    ****   uint8_t i =0;
 2345              		.loc 2 654 0
 2346 001a 4FF00003 		mov	r3, #0
 2347 001e FB72     		strb	r3, [r7, #11]
 655:src/main.c    ****   LSM303DLHC_Read(MAG_I2C_ADDRESS, LSM303DLHC_CRB_REG_M, &CTRLB, 1);
 2348              		.loc 2 655 0
 2349 0020 07F10A03 		add	r3, r7, #10
 2350 0024 4FF03C00 		mov	r0, #60
 2351 0028 4FF00101 		mov	r1, #1
 2352 002c 1A46     		mov	r2, r3
 2353 002e 4FF00103 		mov	r3, #1
 2354 0032 FFF7FEFF 		bl	LSM303DLHC_Read
 656:src/main.c    ****   
 657:src/main.c    ****   LSM303DLHC_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_X_H_M, buffer, 1);
 2355              		.loc 2 657 0
 2356 0036 4FF03C00 		mov	r0, #60
 2357 003a 4FF00301 		mov	r1, #3
 2358 003e 674A     		ldr	r2, .L179
 2359 0040 4FF00103 		mov	r3, #1
 2360 0044 FFF7FEFF 		bl	LSM303DLHC_Read
 658:src/main.c    ****   LSM303DLHC_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_X_L_M, buffer+1, 1);
 2361              		.loc 2 658 0
 2362 0048 4FF03C00 		mov	r0, #60
 2363 004c 4FF00401 		mov	r1, #4
 2364 0050 634A     		ldr	r2, .L179+4
 2365 0052 4FF00103 		mov	r3, #1
 2366 0056 FFF7FEFF 		bl	LSM303DLHC_Read
 659:src/main.c    ****   LSM303DLHC_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_M, buffer+2, 1);
 2367              		.loc 2 659 0
 2368 005a 4FF03C00 		mov	r0, #60
 2369 005e 4FF00701 		mov	r1, #7
 2370 0062 604A     		ldr	r2, .L179+8
 2371 0064 4FF00103 		mov	r3, #1
 2372 0068 FFF7FEFF 		bl	LSM303DLHC_Read
 660:src/main.c    ****   LSM303DLHC_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_M, buffer+3, 1);
 2373              		.loc 2 660 0
 2374 006c 4FF03C00 		mov	r0, #60
 2375 0070 4FF00801 		mov	r1, #8
 2376 0074 5C4A     		ldr	r2, .L179+12
 2377 0076 4FF00103 		mov	r3, #1
 2378 007a FFF7FEFF 		bl	LSM303DLHC_Read
 661:src/main.c    ****   LSM303DLHC_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_M, buffer+4, 1);
 2379              		.loc 2 661 0
 2380 007e 4FF03C00 		mov	r0, #60
 2381 0082 4FF00501 		mov	r1, #5
 2382 0086 594A     		ldr	r2, .L179+16
 2383 0088 4FF00103 		mov	r3, #1
 2384 008c FFF7FEFF 		bl	LSM303DLHC_Read
 662:src/main.c    ****   LSM303DLHC_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_M, buffer+5, 1);
 2385              		.loc 2 662 0
 2386 0090 4FF03C00 		mov	r0, #60
 2387 0094 4FF00601 		mov	r1, #6
 2388 0098 554A     		ldr	r2, .L179+20
 2389 009a 4FF00103 		mov	r3, #1
 2390 009e FFF7FEFF 		bl	LSM303DLHC_Read
 663:src/main.c    ****   /* Switch the sensitivity set in the CRTLB*/
 664:src/main.c    ****   switch(CTRLB & 0xE0)
 2391              		.loc 2 664 0
 2392 00a2 BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 2393 00a4 03F0E003 		and	r3, r3, #224
 2394 00a8 802B     		cmp	r3, #128
 2395 00aa 24D0     		beq	.L172
 2396 00ac 802B     		cmp	r3, #128
 2397 00ae 06DC     		bgt	.L176
 2398 00b0 402B     		cmp	r3, #64
 2399 00b2 12D0     		beq	.L170
 2400 00b4 602B     		cmp	r3, #96
 2401 00b6 17D0     		beq	.L171
 2402 00b8 202B     		cmp	r3, #32
 2403 00ba 07D0     		beq	.L169
 2404 00bc 37E0     		b	.L168
 2405              	.L176:
 2406 00be C02B     		cmp	r3, #192
 2407 00c0 27D0     		beq	.L174
 2408 00c2 E02B     		cmp	r3, #224
 2409 00c4 2CD0     		beq	.L175
 2410 00c6 A02B     		cmp	r3, #160
 2411 00c8 1CD0     		beq	.L173
 2412 00ca 30E0     		b	.L168
 2413              	.L169:
 665:src/main.c    ****   {
 666:src/main.c    ****   case LSM303DLHC_FS_1_3_GA:
 667:src/main.c    ****     Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_1_3Ga;
 2414              		.loc 2 667 0
 2415 00cc 40F24C43 		movw	r3, #1100
 2416 00d0 FB81     		strh	r3, [r7, #14]	@ movhi
 668:src/main.c    ****     Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_1_3Ga;
 2417              		.loc 2 668 0
 2418 00d2 4FF47573 		mov	r3, #980
 2419 00d6 BB81     		strh	r3, [r7, #12]	@ movhi
 669:src/main.c    ****     break;
 2420              		.loc 2 669 0
 2421 00d8 29E0     		b	.L168
 2422              	.L170:
 670:src/main.c    ****   case LSM303DLHC_FS_1_9_GA:
 671:src/main.c    ****     Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_1_9Ga;
 2423              		.loc 2 671 0
 2424 00da 40F25733 		movw	r3, #855
 2425 00de FB81     		strh	r3, [r7, #14]	@ movhi
 672:src/main.c    ****     Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_1_9Ga;
 2426              		.loc 2 672 0
 2427 00e0 4FF43E73 		mov	r3, #760
 2428 00e4 BB81     		strh	r3, [r7, #12]	@ movhi
 673:src/main.c    ****     break;
 2429              		.loc 2 673 0
 2430 00e6 22E0     		b	.L168
 2431              	.L171:
 674:src/main.c    ****   case LSM303DLHC_FS_2_5_GA:
 675:src/main.c    ****     Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
 2432              		.loc 2 675 0
 2433 00e8 40F29E23 		movw	r3, #670
 2434 00ec FB81     		strh	r3, [r7, #14]	@ movhi
 676:src/main.c    ****     Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_2_5Ga;
 2435              		.loc 2 676 0
 2436 00ee 4FF41673 		mov	r3, #600
 2437 00f2 BB81     		strh	r3, [r7, #12]	@ movhi
 677:src/main.c    ****     break;
 2438              		.loc 2 677 0
 2439 00f4 1BE0     		b	.L168
 2440              	.L172:
 678:src/main.c    ****   case LSM303DLHC_FS_4_0_GA:
 679:src/main.c    ****     Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_4Ga;
 2441              		.loc 2 679 0
 2442 00f6 4FF4E173 		mov	r3, #450
 2443 00fa FB81     		strh	r3, [r7, #14]	@ movhi
 680:src/main.c    ****     Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_4Ga;
 2444              		.loc 2 680 0
 2445 00fc 4FF4C873 		mov	r3, #400
 2446 0100 BB81     		strh	r3, [r7, #12]	@ movhi
 681:src/main.c    ****     break;
 2447              		.loc 2 681 0
 2448 0102 14E0     		b	.L168
 2449              	.L173:
 682:src/main.c    ****   case LSM303DLHC_FS_4_7_GA:
 683:src/main.c    ****     Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_4_7Ga;
 2450              		.loc 2 683 0
 2451 0104 4FF4C873 		mov	r3, #400
 2452 0108 FB81     		strh	r3, [r7, #14]	@ movhi
 684:src/main.c    ****     Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_4_7Ga;
 2453              		.loc 2 684 0
 2454 010a 40F26313 		movw	r3, #355
 2455 010e BB81     		strh	r3, [r7, #12]	@ movhi
 685:src/main.c    ****     break;
 2456              		.loc 2 685 0
 2457 0110 0DE0     		b	.L168
 2458              	.L174:
 686:src/main.c    ****   case LSM303DLHC_FS_5_6_GA:
 687:src/main.c    ****     Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_5_6Ga;
 2459              		.loc 2 687 0
 2460 0112 4FF4A573 		mov	r3, #330
 2461 0116 FB81     		strh	r3, [r7, #14]	@ movhi
 688:src/main.c    ****     Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_5_6Ga;
 2462              		.loc 2 688 0
 2463 0118 40F22713 		movw	r3, #295
 2464 011c BB81     		strh	r3, [r7, #12]	@ movhi
 689:src/main.c    ****     break;
 2465              		.loc 2 689 0
 2466 011e 06E0     		b	.L168
 2467              	.L175:
 690:src/main.c    ****   case LSM303DLHC_FS_8_1_GA:
 691:src/main.c    ****     Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_8_1Ga;
 2468              		.loc 2 691 0
 2469 0120 4FF0E603 		mov	r3, #230
 2470 0124 FB81     		strh	r3, [r7, #14]	@ movhi
 692:src/main.c    ****     Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_8_1Ga;
 2471              		.loc 2 692 0
 2472 0126 4FF0CD03 		mov	r3, #205
 2473 012a BB81     		strh	r3, [r7, #12]	@ movhi
 693:src/main.c    ****     break;
 2474              		.loc 2 693 0
 2475 012c 00BF     		nop
 2476              	.L168:
 694:src/main.c    ****   }
 695:src/main.c    ****   
 696:src/main.c    ****   for(i=0; i<2; i++)
 2477              		.loc 2 696 0
 2478 012e 4FF00003 		mov	r3, #0
 2479 0132 FB72     		strb	r3, [r7, #11]
 2480 0134 2CE0     		b	.L177
 2481              	.L178:
 697:src/main.c    ****   {
 698:src/main.c    ****     pfData[i]=(float)((int16_t)(((uint16_t)buffer[2*i] << 8) + buffer[2*i+1])*1000)/Magn_Sensitivit
 2482              		.loc 2 698 0 discriminator 2
 2483 0136 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2484 0138 4FEA8303 		lsl	r3, r3, #2
 2485 013c 7A68     		ldr	r2, [r7, #4]
 2486 013e D318     		adds	r3, r2, r3
 2487 0140 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 2488 0142 4FEA4202 		lsl	r2, r2, #1
 2489 0146 2549     		ldr	r1, .L179
 2490 0148 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2491 014a 4FEA0222 		lsl	r2, r2, #8
 2492 014e 91B2     		uxth	r1, r2
 2493 0150 FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 2494 0152 4FEA4202 		lsl	r2, r2, #1
 2495 0156 02F10102 		add	r2, r2, #1
 2496 015a 2048     		ldr	r0, .L179
 2497 015c 825C     		ldrb	r2, [r0, r2]	@ zero_extendqisi2
 2498 015e 8A18     		adds	r2, r1, r2
 2499 0160 92B2     		uxth	r2, r2
 2500 0162 92B2     		uxth	r2, r2
 2501 0164 12B2     		sxth	r2, r2
 2502 0166 4FF47A71 		mov	r1, #1000
 2503 016a 01FB02F2 		mul	r2, r1, r2
 2504 016e 06EE902A 		fmsr	s13, r2	@ int
 2505 0172 B8EEE67A 		fsitos	s14, s13
 2506 0176 FA89     		ldrh	r2, [r7, #14]
 2507 0178 06EE902A 		fmsr	s13, r2	@ int
 2508 017c F8EEE67A 		fsitos	s15, s13
 2509 0180 C7EE277A 		fdivs	s15, s14, s15
 2510 0184 C3ED007A 		fsts	s15, [r3, #0]
 696:src/main.c    ****   for(i=0; i<2; i++)
 2511              		.loc 2 696 0 discriminator 2
 2512 0188 FB7A     		ldrb	r3, [r7, #11]
 2513 018a 03F10103 		add	r3, r3, #1
 2514 018e FB72     		strb	r3, [r7, #11]
 2515              	.L177:
 696:src/main.c    ****   for(i=0; i<2; i++)
 2516              		.loc 2 696 0 is_stmt 0 discriminator 1
 2517 0190 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2518 0192 012B     		cmp	r3, #1
 2519 0194 CFD9     		bls	.L178
 699:src/main.c    ****   }
 700:src/main.c    ****   pfData[2]=(float)((int16_t)(((uint16_t)buffer[4] << 8) + buffer[5])*1000)/Magn_Sensitivity_Z;
 2520              		.loc 2 700 0 is_stmt 1
 2521 0196 7B68     		ldr	r3, [r7, #4]
 2522 0198 03F10803 		add	r3, r3, #8
 2523 019c 0F4A     		ldr	r2, .L179
 2524 019e 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2525 01a0 4FEA0222 		lsl	r2, r2, #8
 2526 01a4 91B2     		uxth	r1, r2
 2527 01a6 0D4A     		ldr	r2, .L179
 2528 01a8 5279     		ldrb	r2, [r2, #5]	@ zero_extendqisi2
 2529 01aa 8A18     		adds	r2, r1, r2
 2530 01ac 92B2     		uxth	r2, r2
 2531 01ae 92B2     		uxth	r2, r2
 2532 01b0 12B2     		sxth	r2, r2
 2533 01b2 4FF47A71 		mov	r1, #1000
 2534 01b6 01FB02F2 		mul	r2, r1, r2
 2535 01ba 07EE902A 		fmsr	s15, r2	@ int
 2536 01be B8EEE77A 		fsitos	s14, s15
 2537 01c2 BA89     		ldrh	r2, [r7, #12]
 2538 01c4 06EE902A 		fmsr	s13, r2	@ int
 2539 01c8 F8EEE67A 		fsitos	s15, s13
 2540 01cc C7EE277A 		fdivs	s15, s14, s15
 2541 01d0 C3ED007A 		fsts	s15, [r3, #0]
 701:src/main.c    **** }
 2542              		.loc 2 701 0
 2543 01d4 07F11007 		add	r7, r7, #16
 2544 01d8 BD46     		mov	sp, r7
 2545 01da 80BD     		pop	{r7, pc}
 2546              	.L180:
 2547              		.align	2
 2548              	.L179:
 2549 01dc 00000000 		.word	buffer.7715
 2550 01e0 01000000 		.word	buffer.7715+1
 2551 01e4 02000000 		.word	buffer.7715+2
 2552 01e8 03000000 		.word	buffer.7715+3
 2553 01ec 04000000 		.word	buffer.7715+4
 2554 01f0 05000000 		.word	buffer.7715+5
 2555              		.cfi_endproc
 2556              	.LFE115:
 2558              		.section	.text.Delay,"ax",%progbits
 2559              		.align	2
 2560              		.global	Delay
 2561              		.thumb
 2562              		.thumb_func
 2564              	Delay:
 2565              	.LFB116:
 702:src/main.c    **** 
 703:src/main.c    **** /**
 704:src/main.c    ****   * @brief  Inserts a delay time.
 705:src/main.c    ****   * @param  nTime: specifies the delay time length, in 10 ms.
 706:src/main.c    ****   * @retval None
 707:src/main.c    ****   */
 708:src/main.c    **** void Delay(__IO uint32_t nTime)
 709:src/main.c    **** {
 2566              		.loc 2 709 0
 2567              		.cfi_startproc
 2568              		@ args = 0, pretend = 0, frame = 8
 2569              		@ frame_needed = 1, uses_anonymous_args = 0
 2570              		@ link register save eliminated.
 2571 0000 80B4     		push	{r7}
 2572              	.LCFI24:
 2573              		.cfi_def_cfa_offset 4
 2574              		.cfi_offset 7, -4
 2575 0002 83B0     		sub	sp, sp, #12
 2576              	.LCFI25:
 2577              		.cfi_def_cfa_offset 16
 2578 0004 00AF     		add	r7, sp, #0
 2579              	.LCFI26:
 2580              		.cfi_def_cfa_register 7
 2581 0006 7860     		str	r0, [r7, #4]
 710:src/main.c    ****   TimingDelay = nTime;
 2582              		.loc 2 710 0
 2583 0008 7A68     		ldr	r2, [r7, #4]
 2584 000a 064B     		ldr	r3, .L183
 2585 000c 1A60     		str	r2, [r3, #0]
 711:src/main.c    **** 
 712:src/main.c    ****   while(TimingDelay != 0);
 2586              		.loc 2 712 0
 2587 000e 00BF     		nop
 2588              	.L182:
 2589              		.loc 2 712 0 is_stmt 0 discriminator 1
 2590 0010 044B     		ldr	r3, .L183
 2591 0012 1B68     		ldr	r3, [r3, #0]
 2592 0014 002B     		cmp	r3, #0
 2593 0016 FBD1     		bne	.L182
 713:src/main.c    **** }
 2594              		.loc 2 713 0 is_stmt 1
 2595 0018 07F10C07 		add	r7, r7, #12
 2596 001c BD46     		mov	sp, r7
 2597 001e 80BC     		pop	{r7}
 2598 0020 7047     		bx	lr
 2599              	.L184:
 2600 0022 00BF     		.align	2
 2601              	.L183:
 2602 0024 00000000 		.word	TimingDelay
 2603              		.cfi_endproc
 2604              	.LFE116:
 2606              		.section	.text.TimingDelay_Decrement,"ax",%progbits
 2607              		.align	2
 2608              		.global	TimingDelay_Decrement
 2609              		.thumb
 2610              		.thumb_func
 2612              	TimingDelay_Decrement:
 2613              	.LFB117:
 714:src/main.c    **** 
 715:src/main.c    **** /**
 716:src/main.c    ****   * @brief  Decrements the TimingDelay variable.
 717:src/main.c    ****   * @param  None
 718:src/main.c    ****   * @retval None
 719:src/main.c    ****   */
 720:src/main.c    **** void TimingDelay_Decrement(void)
 721:src/main.c    **** {
 2614              		.loc 2 721 0
 2615              		.cfi_startproc
 2616              		@ args = 0, pretend = 0, frame = 0
 2617              		@ frame_needed = 1, uses_anonymous_args = 0
 2618              		@ link register save eliminated.
 2619 0000 80B4     		push	{r7}
 2620              	.LCFI27:
 2621              		.cfi_def_cfa_offset 4
 2622              		.cfi_offset 7, -4
 2623 0002 00AF     		add	r7, sp, #0
 2624              	.LCFI28:
 2625              		.cfi_def_cfa_register 7
 722:src/main.c    ****   if (TimingDelay != 0x00)
 2626              		.loc 2 722 0
 2627 0004 064B     		ldr	r3, .L187
 2628 0006 1B68     		ldr	r3, [r3, #0]
 2629 0008 002B     		cmp	r3, #0
 2630 000a 05D0     		beq	.L185
 723:src/main.c    ****   { 
 724:src/main.c    ****     TimingDelay--;
 2631              		.loc 2 724 0
 2632 000c 044B     		ldr	r3, .L187
 2633 000e 1B68     		ldr	r3, [r3, #0]
 2634 0010 03F1FF32 		add	r2, r3, #-1
 2635 0014 024B     		ldr	r3, .L187
 2636 0016 1A60     		str	r2, [r3, #0]
 2637              	.L185:
 725:src/main.c    ****   }
 726:src/main.c    **** }
 2638              		.loc 2 726 0
 2639 0018 BD46     		mov	sp, r7
 2640 001a 80BC     		pop	{r7}
 2641 001c 7047     		bx	lr
 2642              	.L188:
 2643 001e 00BF     		.align	2
 2644              	.L187:
 2645 0020 00000000 		.word	TimingDelay
 2646              		.cfi_endproc
 2647              	.LFE117:
 2649              		.section	.text.LSM303DLHC_TIMEOUT_UserCallback,"ax",%progbits
 2650              		.align	2
 2651              		.global	LSM303DLHC_TIMEOUT_UserCallback
 2652              		.thumb
 2653              		.thumb_func
 2655              	LSM303DLHC_TIMEOUT_UserCallback:
 2656              	.LFB118:
 727:src/main.c    **** 
 728:src/main.c    **** /**
 729:src/main.c    ****   * @brief  Basic management of the timeout situation.
 730:src/main.c    ****   * @param  None.
 731:src/main.c    ****   * @retval None.
 732:src/main.c    ****   */
 733:src/main.c    **** uint32_t LSM303DLHC_TIMEOUT_UserCallback(void)
 734:src/main.c    **** {
 2657              		.loc 2 734 0
 2658              		.cfi_startproc
 2659              		@ args = 0, pretend = 0, frame = 0
 2660              		@ frame_needed = 1, uses_anonymous_args = 0
 2661              		@ link register save eliminated.
 2662 0000 80B4     		push	{r7}
 2663              	.LCFI29:
 2664              		.cfi_def_cfa_offset 4
 2665              		.cfi_offset 7, -4
 2666 0002 00AF     		add	r7, sp, #0
 2667              	.LCFI30:
 2668              		.cfi_def_cfa_register 7
 735:src/main.c    ****   return 0;
 2669              		.loc 2 735 0
 2670 0004 4FF00003 		mov	r3, #0
 736:src/main.c    **** }
 2671              		.loc 2 736 0
 2672 0008 1846     		mov	r0, r3
 2673 000a BD46     		mov	sp, r7
 2674 000c 80BC     		pop	{r7}
 2675 000e 7047     		bx	lr
 2676              		.cfi_endproc
 2677              	.LFE118:
 2679              		.section	.text.L3GD20_TIMEOUT_UserCallback,"ax",%progbits
 2680              		.align	2
 2681              		.global	L3GD20_TIMEOUT_UserCallback
 2682              		.thumb
 2683              		.thumb_func
 2685              	L3GD20_TIMEOUT_UserCallback:
 2686              	.LFB119:
 737:src/main.c    **** 
 738:src/main.c    **** /**
 739:src/main.c    ****   * @brief  Basic management of the timeout situation.
 740:src/main.c    ****   * @param  None.
 741:src/main.c    ****   * @retval None.
 742:src/main.c    ****   */
 743:src/main.c    **** uint32_t L3GD20_TIMEOUT_UserCallback(void)
 744:src/main.c    **** {
 2687              		.loc 2 744 0
 2688              		.cfi_startproc
 2689              		@ args = 0, pretend = 0, frame = 0
 2690              		@ frame_needed = 1, uses_anonymous_args = 0
 2691              		@ link register save eliminated.
 2692 0000 80B4     		push	{r7}
 2693              	.LCFI31:
 2694              		.cfi_def_cfa_offset 4
 2695              		.cfi_offset 7, -4
 2696 0002 00AF     		add	r7, sp, #0
 2697              	.LCFI32:
 2698              		.cfi_def_cfa_register 7
 745:src/main.c    ****   return 0;
 2699              		.loc 2 745 0
 2700 0004 4FF00003 		mov	r3, #0
 746:src/main.c    **** }
 2701              		.loc 2 746 0
 2702 0008 1846     		mov	r0, r3
 2703 000a BD46     		mov	sp, r7
 2704 000c 80BC     		pop	{r7}
 2705 000e 7047     		bx	lr
 2706              		.cfi_endproc
 2707              	.LFE119:
 2709              		.section	.bss.buffer.7715,"aw",%nobits
 2710              		.align	2
 2713              	buffer.7715:
 2714 0000 00000000 		.space	6
 2714      0000
 2715 0006 0000     		.text
 2716              	.Letext0:
 2717              		.file 3 "inc/stm32f30x.h"
 2718              		.file 4 "/home/chaitannya/CodeSourcery/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../../arm-none-eab
 2719              		.file 5 "src/stm32f3_discovery.h"
 2720              		.file 6 "src/stm32f3_discovery_lsm303dlhc.h"
 2721              		.file 7 "src/stm32f3_discovery_l3gd20.h"
 2722              		.file 8 "/home/manish/VTS/MEMS-stm32f3/libs/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccTddaxg.s:20     .text.NVIC_SetPriority:00000000 $t
     /tmp/ccTddaxg.s:24     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccTddaxg.s:80     .text.NVIC_SetPriority:00000050 $d
     /tmp/ccTddaxg.s:86     .text.SysTick_Config:00000000 $t
     /tmp/ccTddaxg.s:90     .text.SysTick_Config:00000000 SysTick_Config
     /tmp/ccTddaxg.s:146    .text.SysTick_Config:00000050 $d
                            *COM*:0000003c RCC_Clocks
     /tmp/ccTddaxg.s:156    .bss.TimingDelay:00000000 TimingDelay
     /tmp/ccTddaxg.s:153    .bss.TimingDelay:00000000 $d
     /tmp/ccTddaxg.s:163    .bss.UserButtonPressed:00000000 UserButtonPressed
     /tmp/ccTddaxg.s:160    .bss.UserButtonPressed:00000000 $d
     /tmp/ccTddaxg.s:170    .bss.HeadingValue:00000000 HeadingValue
     /tmp/ccTddaxg.s:167    .bss.HeadingValue:00000000 $d
     /tmp/ccTddaxg.s:177    .bss.MagBuffer:00000000 MagBuffer
     /tmp/ccTddaxg.s:174    .bss.MagBuffer:00000000 $d
     /tmp/ccTddaxg.s:184    .bss.AccBuffer:00000000 AccBuffer
     /tmp/ccTddaxg.s:181    .bss.AccBuffer:00000000 $d
     /tmp/ccTddaxg.s:191    .bss.Buffer:00000000 Buffer
     /tmp/ccTddaxg.s:188    .bss.Buffer:00000000 $d
                            *COM*:00000001 Xval
     /tmp/ccTddaxg.s:198    .bss.Yval:00000000 Yval
     /tmp/ccTddaxg.s:199    .bss.Yval:00000000 $d
     /tmp/ccTddaxg.s:204    .bss.DataReady:00000000 DataReady
     /tmp/ccTddaxg.s:205    .bss.DataReady:00000000 $d
     /tmp/ccTddaxg.s:210    .data.PrevXferComplete:00000000 PrevXferComplete
     /tmp/ccTddaxg.s:217    .data.USBConnectTimeOut:00000000 USBConnectTimeOut
     /tmp/ccTddaxg.s:214    .data.USBConnectTimeOut:00000000 $d
                            *COM*:00000004 fNormAcc
                            *COM*:00000004 fSinRoll
                            *COM*:00000004 fCosRoll
                            *COM*:00000004 fSinPitch
     /tmp/ccTddaxg.s:228    .bss.fCosPitch:00000000 fCosPitch
     /tmp/ccTddaxg.s:225    .bss.fCosPitch:00000000 $d
     /tmp/ccTddaxg.s:235    .bss.RollAng:00000000 RollAng
     /tmp/ccTddaxg.s:232    .bss.RollAng:00000000 $d
     /tmp/ccTddaxg.s:242    .bss.PitchAng:00000000 PitchAng
     /tmp/ccTddaxg.s:239    .bss.PitchAng:00000000 $d
                            *COM*:00000004 fTiltedX
     /tmp/ccTddaxg.s:250    .bss.fTiltedY:00000000 fTiltedY
     /tmp/ccTddaxg.s:247    .bss.fTiltedY:00000000 $d
     /tmp/ccTddaxg.s:258    .text.main:00000000 $t
     /tmp/ccTddaxg.s:263    .text.main:00000000 main
     /tmp/ccTddaxg.s:2564   .text.Delay:00000000 Delay
     /tmp/ccTddaxg.s:1777   .text.Demo_GyroReadAngRate:00000000 Demo_GyroReadAngRate
     /tmp/ccTddaxg.s:1984   .text.Demo_CompassConfig:00000000 Demo_CompassConfig
     /tmp/ccTddaxg.s:2319   .text.Demo_CompassReadMag:00000000 Demo_CompassReadMag
     /tmp/ccTddaxg.s:2071   .text.Demo_CompassReadAcc:00000000 Demo_CompassReadAcc
     /tmp/ccTddaxg.s:650    .text.main:00000374 $d
     /tmp/ccTddaxg.s:661    .text.main:00000398 $t
     /tmp/ccTddaxg.s:917    .text.main:00000618 $d
     /tmp/ccTddaxg.s:931    .text.main:00000648 $t
     /tmp/ccTddaxg.s:1109   .text.main:000007e8 $d
     /tmp/ccTddaxg.s:1120   .text.main:0000080c $t
     /tmp/ccTddaxg.s:1420   .text.main:00000b18 $d
     /tmp/ccTddaxg.s:1442   .text.main:00000b68 $t
     /tmp/ccTddaxg.s:1692   .text.main:00000dd4 $d
     /tmp/ccTddaxg.s:1704   .text.Demo_GyroConfig:00000000 $t
     /tmp/ccTddaxg.s:1709   .text.Demo_GyroConfig:00000000 Demo_GyroConfig
     /tmp/ccTddaxg.s:1772   .text.Demo_GyroReadAngRate:00000000 $t
     /tmp/ccTddaxg.s:1972   .text.Demo_GyroReadAngRate:00000180 $d
     /tmp/ccTddaxg.s:1979   .text.Demo_CompassConfig:00000000 $t
     /tmp/ccTddaxg.s:2066   .text.Demo_CompassReadAcc:00000000 $t
     /tmp/ccTddaxg.s:2309   .text.Demo_CompassReadAcc:0000020c $d
     /tmp/ccTddaxg.s:2314   .text.Demo_CompassReadMag:00000000 $t
     /tmp/ccTddaxg.s:2549   .text.Demo_CompassReadMag:000001dc $d
     /tmp/ccTddaxg.s:2713   .bss.buffer.7715:00000000 buffer.7715
     /tmp/ccTddaxg.s:2559   .text.Delay:00000000 $t
     /tmp/ccTddaxg.s:2602   .text.Delay:00000024 $d
     /tmp/ccTddaxg.s:2607   .text.TimingDelay_Decrement:00000000 $t
     /tmp/ccTddaxg.s:2612   .text.TimingDelay_Decrement:00000000 TimingDelay_Decrement
     /tmp/ccTddaxg.s:2645   .text.TimingDelay_Decrement:00000020 $d
     /tmp/ccTddaxg.s:2650   .text.LSM303DLHC_TIMEOUT_UserCallback:00000000 $t
     /tmp/ccTddaxg.s:2655   .text.LSM303DLHC_TIMEOUT_UserCallback:00000000 LSM303DLHC_TIMEOUT_UserCallback
     /tmp/ccTddaxg.s:2680   .text.L3GD20_TIMEOUT_UserCallback:00000000 $t
     /tmp/ccTddaxg.s:2685   .text.L3GD20_TIMEOUT_UserCallback:00000000 L3GD20_TIMEOUT_UserCallback
     /tmp/ccTddaxg.s:2710   .bss.buffer.7715:00000000 $d
                     .debug_frame:00000010 $d
     /tmp/ccTddaxg.s:1703   .text.main:00000df4 $t

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_d2f
__aeabi_dmul
__aeabi_ddiv
__aeabi_dadd
RCC_GetClocksFreq
STM_EVAL_LEDInit
STM_EVAL_PBInit
STM_EVAL_LEDOff
STM_EVAL_LEDToggle
STM_EVAL_LEDOn
sqrt
acos
atan2f
L3GD20_Init
L3GD20_FilterConfig
L3GD20_FilterCmd
L3GD20_Read
LSM303DLHC_MagInit
LSM303DLHC_AccInit
LSM303DLHC_AccFilterConfig
LSM303DLHC_Read
