
obj/STM32F3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cd4  08000188  08000188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08004e5c  08004e5c  0000ce5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08004e60  08004e60  0000ce60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000150  20000000  08004e64  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000c0  20000150  08004fb4  00010150  2**2
                  ALLOC
  6 ._user_heap_stack 00000600  20000210  08005074  00010150  2**0
                  ALLOC
  7 .ARM.attributes 00000033  00000000  00000000  00010150  2**0
                  CONTENTS, READONLY
  8 .debug_info   00006811  00000000  00000000  00010183  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000013c9  00000000  00000000  00016994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002d72  00000000  00000000  00017d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007d8  00000000  00000000  0001aacf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000708  00000000  00000000  0001b2a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002572  00000000  00000000  0001b9af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000299b  00000000  00000000  0001df21  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000030  00000000  00000000  000208bc  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001af4  00000000  00000000  000208ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	b508      	push	{r3, lr}
 800018a:	f240 1050 	movw	r0, #336	; 0x150
 800018e:	4b07      	ldr	r3, [pc, #28]	; (80001ac <deregister_tm_clones+0x24>)
 8000190:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000194:	1a1b      	subs	r3, r3, r0
 8000196:	2b06      	cmp	r3, #6
 8000198:	d800      	bhi.n	800019c <deregister_tm_clones+0x14>
 800019a:	bd08      	pop	{r3, pc}
 800019c:	f240 0300 	movw	r3, #0
 80001a0:	f2c0 0300 	movt	r3, #0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d0f8      	beq.n	800019a <deregister_tm_clones+0x12>
 80001a8:	4798      	blx	r3
 80001aa:	e7f6      	b.n	800019a <deregister_tm_clones+0x12>
 80001ac:	20000153 	.word	0x20000153

080001b0 <register_tm_clones>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	f240 1050 	movw	r0, #336	; 0x150
 80001b6:	f240 1350 	movw	r3, #336	; 0x150
 80001ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001c2:	1a1b      	subs	r3, r3, r0
 80001c4:	109b      	asrs	r3, r3, #2
 80001c6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80001ca:	1059      	asrs	r1, r3, #1
 80001cc:	d100      	bne.n	80001d0 <register_tm_clones+0x20>
 80001ce:	bd08      	pop	{r3, pc}
 80001d0:	f240 0200 	movw	r2, #0
 80001d4:	f2c0 0200 	movt	r2, #0
 80001d8:	2a00      	cmp	r2, #0
 80001da:	d0f8      	beq.n	80001ce <register_tm_clones+0x1e>
 80001dc:	4790      	blx	r2
 80001de:	e7f6      	b.n	80001ce <register_tm_clones+0x1e>

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	f240 1450 	movw	r4, #336	; 0x150
 80001e6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80001ea:	7823      	ldrb	r3, [r4, #0]
 80001ec:	b973      	cbnz	r3, 800020c <__do_global_dtors_aux+0x2c>
 80001ee:	f7ff ffcb 	bl	8000188 <deregister_tm_clones>
 80001f2:	f240 0300 	movw	r3, #0
 80001f6:	f2c0 0300 	movt	r3, #0
 80001fa:	b12b      	cbz	r3, 8000208 <__do_global_dtors_aux+0x28>
 80001fc:	f240 1088 	movw	r0, #392	; 0x188
 8000200:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000204:	f3af 8000 	nop.w
 8000208:	2301      	movs	r3, #1
 800020a:	7023      	strb	r3, [r4, #0]
 800020c:	bd10      	pop	{r4, pc}
 800020e:	bf00      	nop

08000210 <frame_dummy>:
 8000210:	b508      	push	{r3, lr}
 8000212:	f240 0300 	movw	r3, #0
 8000216:	f2c0 0300 	movt	r3, #0
 800021a:	b14b      	cbz	r3, 8000230 <frame_dummy+0x20>
 800021c:	f240 1088 	movw	r0, #392	; 0x188
 8000220:	f240 1154 	movw	r1, #340	; 0x154
 8000224:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000228:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800022c:	f3af 8000 	nop.w
 8000230:	f240 1050 	movw	r0, #336	; 0x150
 8000234:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000238:	6803      	ldr	r3, [r0, #0]
 800023a:	b12b      	cbz	r3, 8000248 <frame_dummy+0x38>
 800023c:	f240 0300 	movw	r3, #0
 8000240:	f2c0 0300 	movt	r3, #0
 8000244:	b103      	cbz	r3, 8000248 <frame_dummy+0x38>
 8000246:	4798      	blx	r3
 8000248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800024c:	f7ff bfb0 	b.w	80001b0 <register_tm_clones>

08000250 <acos>:
 8000250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000254:	b08a      	sub	sp, #40	; 0x28
 8000256:	4604      	mov	r4, r0
 8000258:	460d      	mov	r5, r1
 800025a:	f000 f8a5 	bl	80003a8 <__ieee754_acos>
 800025e:	f240 0800 	movw	r8, #0
 8000262:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8000266:	f998 3000 	ldrsb.w	r3, [r8]
 800026a:	3301      	adds	r3, #1
 800026c:	4606      	mov	r6, r0
 800026e:	460f      	mov	r7, r1
 8000270:	d004      	beq.n	800027c <acos+0x2c>
 8000272:	4620      	mov	r0, r4
 8000274:	4629      	mov	r1, r5
 8000276:	f000 fc6f 	bl	8000b58 <__fpclassifyd>
 800027a:	b920      	cbnz	r0, 8000286 <acos+0x36>
 800027c:	4630      	mov	r0, r6
 800027e:	4639      	mov	r1, r7
 8000280:	b00a      	add	sp, #40	; 0x28
 8000282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000286:	4620      	mov	r0, r4
 8000288:	4629      	mov	r1, r5
 800028a:	f000 fc61 	bl	8000b50 <fabs>
 800028e:	2300      	movs	r3, #0
 8000290:	2200      	movs	r2, #0
 8000292:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8000296:	f001 f9f9 	bl	800168c <__aeabi_dcmpgt>
 800029a:	2800      	cmp	r0, #0
 800029c:	d0ee      	beq.n	800027c <acos+0x2c>
 800029e:	f644 6034 	movw	r0, #20020	; 0x4e34
 80002a2:	f644 6330 	movw	r3, #20016	; 0x4e30
 80002a6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002aa:	f6c0 0300 	movt	r3, #2048	; 0x800
 80002ae:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	2301      	movs	r3, #1
 80002b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80002ba:	9300      	str	r3, [sp, #0]
 80002bc:	2300      	movs	r3, #0
 80002be:	9308      	str	r3, [sp, #32]
 80002c0:	f000 fc74 	bl	8000bac <nan>
 80002c4:	f998 3000 	ldrsb.w	r3, [r8]
 80002c8:	2b02      	cmp	r3, #2
 80002ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80002ce:	d008      	beq.n	80002e2 <acos+0x92>
 80002d0:	4668      	mov	r0, sp
 80002d2:	f000 fc69 	bl	8000ba8 <matherr>
 80002d6:	b120      	cbz	r0, 80002e2 <acos+0x92>
 80002d8:	9b08      	ldr	r3, [sp, #32]
 80002da:	b93b      	cbnz	r3, 80002ec <acos+0x9c>
 80002dc:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80002e0:	e7cc      	b.n	800027c <acos+0x2c>
 80002e2:	f001 fd01 	bl	8001ce8 <__errno>
 80002e6:	2321      	movs	r3, #33	; 0x21
 80002e8:	6003      	str	r3, [r0, #0]
 80002ea:	e7f5      	b.n	80002d8 <acos+0x88>
 80002ec:	f001 fcfc 	bl	8001ce8 <__errno>
 80002f0:	9b08      	ldr	r3, [sp, #32]
 80002f2:	6003      	str	r3, [r0, #0]
 80002f4:	e7f2      	b.n	80002dc <acos+0x8c>
 80002f6:	bf00      	nop

080002f8 <sqrt>:
 80002f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002fc:	b08a      	sub	sp, #40	; 0x28
 80002fe:	4604      	mov	r4, r0
 8000300:	460d      	mov	r5, r1
 8000302:	f000 fab9 	bl	8000878 <__ieee754_sqrt>
 8000306:	f240 0a00 	movw	sl, #0
 800030a:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 800030e:	f99a 3000 	ldrsb.w	r3, [sl]
 8000312:	3301      	adds	r3, #1
 8000314:	4606      	mov	r6, r0
 8000316:	460f      	mov	r7, r1
 8000318:	d00f      	beq.n	800033a <sqrt+0x42>
 800031a:	4620      	mov	r0, r4
 800031c:	4629      	mov	r1, r5
 800031e:	f000 fc1b 	bl	8000b58 <__fpclassifyd>
 8000322:	b150      	cbz	r0, 800033a <sqrt+0x42>
 8000324:	f04f 0800 	mov.w	r8, #0
 8000328:	f04f 0900 	mov.w	r9, #0
 800032c:	4620      	mov	r0, r4
 800032e:	4629      	mov	r1, r5
 8000330:	4642      	mov	r2, r8
 8000332:	464b      	mov	r3, r9
 8000334:	f001 f98c 	bl	8001650 <__aeabi_dcmplt>
 8000338:	b920      	cbnz	r0, 8000344 <sqrt+0x4c>
 800033a:	4630      	mov	r0, r6
 800033c:	4639      	mov	r1, r7
 800033e:	b00a      	add	sp, #40	; 0x28
 8000340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000344:	f89a 6000 	ldrb.w	r6, [sl]
 8000348:	f644 6338 	movw	r3, #20024	; 0x4e38
 800034c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000350:	2201      	movs	r2, #1
 8000352:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000356:	e88d 000c 	stmia.w	sp, {r2, r3}
 800035a:	2300      	movs	r3, #0
 800035c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8000360:	9308      	str	r3, [sp, #32]
 8000362:	b956      	cbnz	r6, 800037a <sqrt+0x82>
 8000364:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8000368:	4668      	mov	r0, sp
 800036a:	f000 fc1d 	bl	8000ba8 <matherr>
 800036e:	b170      	cbz	r0, 800038e <sqrt+0x96>
 8000370:	9b08      	ldr	r3, [sp, #32]
 8000372:	b98b      	cbnz	r3, 8000398 <sqrt+0xa0>
 8000374:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8000378:	e7df      	b.n	800033a <sqrt+0x42>
 800037a:	4640      	mov	r0, r8
 800037c:	4649      	mov	r1, r9
 800037e:	4642      	mov	r2, r8
 8000380:	464b      	mov	r3, r9
 8000382:	f001 f81d 	bl	80013c0 <__aeabi_ddiv>
 8000386:	2e02      	cmp	r6, #2
 8000388:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800038c:	d1ec      	bne.n	8000368 <sqrt+0x70>
 800038e:	f001 fcab 	bl	8001ce8 <__errno>
 8000392:	2321      	movs	r3, #33	; 0x21
 8000394:	6003      	str	r3, [r0, #0]
 8000396:	e7eb      	b.n	8000370 <sqrt+0x78>
 8000398:	f001 fca6 	bl	8001ce8 <__errno>
 800039c:	9b08      	ldr	r3, [sp, #32]
 800039e:	6003      	str	r3, [r0, #0]
 80003a0:	e7e8      	b.n	8000374 <sqrt+0x7c>
 80003a2:	bf00      	nop

080003a4 <atan2f>:
 80003a4:	f000 bb2e 	b.w	8000a04 <__ieee754_atan2f>

080003a8 <__ieee754_acos>:
 80003a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ac:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80003b0:	f6c3 76ef 	movt	r6, #16367	; 0x3fef
 80003b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80003b8:	42b3      	cmp	r3, r6
 80003ba:	4604      	mov	r4, r0
 80003bc:	460d      	mov	r5, r1
 80003be:	460f      	mov	r7, r1
 80003c0:	dd0d      	ble.n	80003de <__ieee754_acos+0x36>
 80003c2:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 80003c6:	f506 1380 	add.w	r3, r6, #1048576	; 0x100000
 80003ca:	4303      	orrs	r3, r0
 80003cc:	f040 80c7 	bne.w	800055e <__ieee754_acos+0x1b6>
 80003d0:	2900      	cmp	r1, #0
 80003d2:	f340 8152 	ble.w	800067a <__ieee754_acos+0x2d2>
 80003d6:	2000      	movs	r0, #0
 80003d8:	2100      	movs	r1, #0
 80003da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003e2:	f6c3 72df 	movt	r2, #16351	; 0x3fdf
 80003e6:	4293      	cmp	r3, r2
 80003e8:	f340 80af 	ble.w	800054a <__ieee754_acos+0x1a2>
 80003ec:	2900      	cmp	r1, #0
 80003ee:	f2c0 817f 	blt.w	80006f0 <__ieee754_acos+0x348>
 80003f2:	460b      	mov	r3, r1
 80003f4:	2100      	movs	r1, #0
 80003f6:	4602      	mov	r2, r0
 80003f8:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80003fc:	2000      	movs	r0, #0
 80003fe:	2600      	movs	r6, #0
 8000400:	f000 fd00 	bl	8000e04 <__aeabi_dsub>
 8000404:	2300      	movs	r3, #0
 8000406:	2200      	movs	r2, #0
 8000408:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 800040c:	f000 feae 	bl	800116c <__aeabi_dmul>
 8000410:	4604      	mov	r4, r0
 8000412:	460d      	mov	r5, r1
 8000414:	f000 fa30 	bl	8000878 <__ieee754_sqrt>
 8000418:	a39b      	add	r3, pc, #620	; (adr r3, 8000688 <__ieee754_acos+0x2e0>)
 800041a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800041e:	4689      	mov	r9, r1
 8000420:	4680      	mov	r8, r0
 8000422:	460f      	mov	r7, r1
 8000424:	4620      	mov	r0, r4
 8000426:	4629      	mov	r1, r5
 8000428:	f000 fea0 	bl	800116c <__aeabi_dmul>
 800042c:	a398      	add	r3, pc, #608	; (adr r3, 8000690 <__ieee754_acos+0x2e8>)
 800042e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000432:	f000 fce9 	bl	8000e08 <__adddf3>
 8000436:	4622      	mov	r2, r4
 8000438:	462b      	mov	r3, r5
 800043a:	f000 fe97 	bl	800116c <__aeabi_dmul>
 800043e:	a396      	add	r3, pc, #600	; (adr r3, 8000698 <__ieee754_acos+0x2f0>)
 8000440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000444:	f000 fcde 	bl	8000e04 <__aeabi_dsub>
 8000448:	4622      	mov	r2, r4
 800044a:	462b      	mov	r3, r5
 800044c:	f000 fe8e 	bl	800116c <__aeabi_dmul>
 8000450:	a393      	add	r3, pc, #588	; (adr r3, 80006a0 <__ieee754_acos+0x2f8>)
 8000452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000456:	f000 fcd7 	bl	8000e08 <__adddf3>
 800045a:	4622      	mov	r2, r4
 800045c:	462b      	mov	r3, r5
 800045e:	f000 fe85 	bl	800116c <__aeabi_dmul>
 8000462:	a391      	add	r3, pc, #580	; (adr r3, 80006a8 <__ieee754_acos+0x300>)
 8000464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000468:	f000 fccc 	bl	8000e04 <__aeabi_dsub>
 800046c:	4622      	mov	r2, r4
 800046e:	462b      	mov	r3, r5
 8000470:	f000 fe7c 	bl	800116c <__aeabi_dmul>
 8000474:	a38e      	add	r3, pc, #568	; (adr r3, 80006b0 <__ieee754_acos+0x308>)
 8000476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800047a:	f000 fcc5 	bl	8000e08 <__adddf3>
 800047e:	4622      	mov	r2, r4
 8000480:	462b      	mov	r3, r5
 8000482:	f000 fe73 	bl	800116c <__aeabi_dmul>
 8000486:	a38c      	add	r3, pc, #560	; (adr r3, 80006b8 <__ieee754_acos+0x310>)
 8000488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800048c:	4682      	mov	sl, r0
 800048e:	468b      	mov	fp, r1
 8000490:	4620      	mov	r0, r4
 8000492:	4629      	mov	r1, r5
 8000494:	f000 fe6a 	bl	800116c <__aeabi_dmul>
 8000498:	a389      	add	r3, pc, #548	; (adr r3, 80006c0 <__ieee754_acos+0x318>)
 800049a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800049e:	f000 fcb1 	bl	8000e04 <__aeabi_dsub>
 80004a2:	4622      	mov	r2, r4
 80004a4:	462b      	mov	r3, r5
 80004a6:	f000 fe61 	bl	800116c <__aeabi_dmul>
 80004aa:	a387      	add	r3, pc, #540	; (adr r3, 80006c8 <__ieee754_acos+0x320>)
 80004ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004b0:	f000 fcaa 	bl	8000e08 <__adddf3>
 80004b4:	4622      	mov	r2, r4
 80004b6:	462b      	mov	r3, r5
 80004b8:	f000 fe58 	bl	800116c <__aeabi_dmul>
 80004bc:	a384      	add	r3, pc, #528	; (adr r3, 80006d0 <__ieee754_acos+0x328>)
 80004be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004c2:	f000 fc9f 	bl	8000e04 <__aeabi_dsub>
 80004c6:	4622      	mov	r2, r4
 80004c8:	462b      	mov	r3, r5
 80004ca:	f000 fe4f 	bl	800116c <__aeabi_dmul>
 80004ce:	2300      	movs	r3, #0
 80004d0:	2200      	movs	r2, #0
 80004d2:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 80004d6:	f000 fc97 	bl	8000e08 <__adddf3>
 80004da:	4602      	mov	r2, r0
 80004dc:	460b      	mov	r3, r1
 80004de:	4650      	mov	r0, sl
 80004e0:	4659      	mov	r1, fp
 80004e2:	f000 ff6d 	bl	80013c0 <__aeabi_ddiv>
 80004e6:	4642      	mov	r2, r8
 80004e8:	464b      	mov	r3, r9
 80004ea:	f000 fe3f 	bl	800116c <__aeabi_dmul>
 80004ee:	4632      	mov	r2, r6
 80004f0:	464b      	mov	r3, r9
 80004f2:	4682      	mov	sl, r0
 80004f4:	468b      	mov	fp, r1
 80004f6:	4630      	mov	r0, r6
 80004f8:	4649      	mov	r1, r9
 80004fa:	f000 fe37 	bl	800116c <__aeabi_dmul>
 80004fe:	4602      	mov	r2, r0
 8000500:	460b      	mov	r3, r1
 8000502:	4620      	mov	r0, r4
 8000504:	4629      	mov	r1, r5
 8000506:	f000 fc7d 	bl	8000e04 <__aeabi_dsub>
 800050a:	4632      	mov	r2, r6
 800050c:	464b      	mov	r3, r9
 800050e:	4604      	mov	r4, r0
 8000510:	460d      	mov	r5, r1
 8000512:	4640      	mov	r0, r8
 8000514:	4649      	mov	r1, r9
 8000516:	f000 fc77 	bl	8000e08 <__adddf3>
 800051a:	4602      	mov	r2, r0
 800051c:	460b      	mov	r3, r1
 800051e:	4620      	mov	r0, r4
 8000520:	4629      	mov	r1, r5
 8000522:	f000 ff4d 	bl	80013c0 <__aeabi_ddiv>
 8000526:	4602      	mov	r2, r0
 8000528:	460b      	mov	r3, r1
 800052a:	4650      	mov	r0, sl
 800052c:	4659      	mov	r1, fp
 800052e:	f000 fc6b 	bl	8000e08 <__adddf3>
 8000532:	4602      	mov	r2, r0
 8000534:	460b      	mov	r3, r1
 8000536:	4630      	mov	r0, r6
 8000538:	4649      	mov	r1, r9
 800053a:	f000 fc65 	bl	8000e08 <__adddf3>
 800053e:	4602      	mov	r2, r0
 8000540:	460b      	mov	r3, r1
 8000542:	f000 fc61 	bl	8000e08 <__adddf3>
 8000546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800054a:	2200      	movs	r2, #0
 800054c:	f6c3 4260 	movt	r2, #15456	; 0x3c60
 8000550:	4293      	cmp	r3, r2
 8000552:	dc0e      	bgt.n	8000572 <__ieee754_acos+0x1ca>
 8000554:	a160      	add	r1, pc, #384	; (adr r1, 80006d8 <__ieee754_acos+0x330>)
 8000556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800055a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800055e:	4602      	mov	r2, r0
 8000560:	460b      	mov	r3, r1
 8000562:	f000 fc4f 	bl	8000e04 <__aeabi_dsub>
 8000566:	4602      	mov	r2, r0
 8000568:	460b      	mov	r3, r1
 800056a:	f000 ff29 	bl	80013c0 <__aeabi_ddiv>
 800056e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000572:	4602      	mov	r2, r0
 8000574:	460b      	mov	r3, r1
 8000576:	f000 fdf9 	bl	800116c <__aeabi_dmul>
 800057a:	a343      	add	r3, pc, #268	; (adr r3, 8000688 <__ieee754_acos+0x2e0>)
 800057c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000580:	4606      	mov	r6, r0
 8000582:	460f      	mov	r7, r1
 8000584:	f000 fdf2 	bl	800116c <__aeabi_dmul>
 8000588:	a341      	add	r3, pc, #260	; (adr r3, 8000690 <__ieee754_acos+0x2e8>)
 800058a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800058e:	f000 fc3b 	bl	8000e08 <__adddf3>
 8000592:	4632      	mov	r2, r6
 8000594:	463b      	mov	r3, r7
 8000596:	f000 fde9 	bl	800116c <__aeabi_dmul>
 800059a:	a33f      	add	r3, pc, #252	; (adr r3, 8000698 <__ieee754_acos+0x2f0>)
 800059c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005a0:	f000 fc30 	bl	8000e04 <__aeabi_dsub>
 80005a4:	4632      	mov	r2, r6
 80005a6:	463b      	mov	r3, r7
 80005a8:	f000 fde0 	bl	800116c <__aeabi_dmul>
 80005ac:	a33c      	add	r3, pc, #240	; (adr r3, 80006a0 <__ieee754_acos+0x2f8>)
 80005ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005b2:	f000 fc29 	bl	8000e08 <__adddf3>
 80005b6:	4632      	mov	r2, r6
 80005b8:	463b      	mov	r3, r7
 80005ba:	f000 fdd7 	bl	800116c <__aeabi_dmul>
 80005be:	a33a      	add	r3, pc, #232	; (adr r3, 80006a8 <__ieee754_acos+0x300>)
 80005c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005c4:	f000 fc1e 	bl	8000e04 <__aeabi_dsub>
 80005c8:	4632      	mov	r2, r6
 80005ca:	463b      	mov	r3, r7
 80005cc:	f000 fdce 	bl	800116c <__aeabi_dmul>
 80005d0:	a337      	add	r3, pc, #220	; (adr r3, 80006b0 <__ieee754_acos+0x308>)
 80005d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005d6:	f000 fc17 	bl	8000e08 <__adddf3>
 80005da:	4632      	mov	r2, r6
 80005dc:	463b      	mov	r3, r7
 80005de:	f000 fdc5 	bl	800116c <__aeabi_dmul>
 80005e2:	a335      	add	r3, pc, #212	; (adr r3, 80006b8 <__ieee754_acos+0x310>)
 80005e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005e8:	4680      	mov	r8, r0
 80005ea:	4689      	mov	r9, r1
 80005ec:	4630      	mov	r0, r6
 80005ee:	4639      	mov	r1, r7
 80005f0:	f000 fdbc 	bl	800116c <__aeabi_dmul>
 80005f4:	a332      	add	r3, pc, #200	; (adr r3, 80006c0 <__ieee754_acos+0x318>)
 80005f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005fa:	f000 fc03 	bl	8000e04 <__aeabi_dsub>
 80005fe:	4632      	mov	r2, r6
 8000600:	463b      	mov	r3, r7
 8000602:	f000 fdb3 	bl	800116c <__aeabi_dmul>
 8000606:	a330      	add	r3, pc, #192	; (adr r3, 80006c8 <__ieee754_acos+0x320>)
 8000608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800060c:	f000 fbfc 	bl	8000e08 <__adddf3>
 8000610:	4632      	mov	r2, r6
 8000612:	463b      	mov	r3, r7
 8000614:	f000 fdaa 	bl	800116c <__aeabi_dmul>
 8000618:	a32d      	add	r3, pc, #180	; (adr r3, 80006d0 <__ieee754_acos+0x328>)
 800061a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800061e:	f000 fbf1 	bl	8000e04 <__aeabi_dsub>
 8000622:	4632      	mov	r2, r6
 8000624:	463b      	mov	r3, r7
 8000626:	f000 fda1 	bl	800116c <__aeabi_dmul>
 800062a:	2300      	movs	r3, #0
 800062c:	2200      	movs	r2, #0
 800062e:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8000632:	f000 fbe9 	bl	8000e08 <__adddf3>
 8000636:	4602      	mov	r2, r0
 8000638:	460b      	mov	r3, r1
 800063a:	4640      	mov	r0, r8
 800063c:	4649      	mov	r1, r9
 800063e:	f000 febf 	bl	80013c0 <__aeabi_ddiv>
 8000642:	4602      	mov	r2, r0
 8000644:	460b      	mov	r3, r1
 8000646:	4620      	mov	r0, r4
 8000648:	4629      	mov	r1, r5
 800064a:	f000 fd8f 	bl	800116c <__aeabi_dmul>
 800064e:	4602      	mov	r2, r0
 8000650:	460b      	mov	r3, r1
 8000652:	a123      	add	r1, pc, #140	; (adr r1, 80006e0 <__ieee754_acos+0x338>)
 8000654:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000658:	f000 fbd4 	bl	8000e04 <__aeabi_dsub>
 800065c:	4602      	mov	r2, r0
 800065e:	460b      	mov	r3, r1
 8000660:	4620      	mov	r0, r4
 8000662:	4629      	mov	r1, r5
 8000664:	f000 fbce 	bl	8000e04 <__aeabi_dsub>
 8000668:	4602      	mov	r2, r0
 800066a:	460b      	mov	r3, r1
 800066c:	a11a      	add	r1, pc, #104	; (adr r1, 80006d8 <__ieee754_acos+0x330>)
 800066e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000672:	f000 fbc7 	bl	8000e04 <__aeabi_dsub>
 8000676:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800067a:	a11b      	add	r1, pc, #108	; (adr r1, 80006e8 <__ieee754_acos+0x340>)
 800067c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000684:	f3af 8000 	nop.w
 8000688:	0dfdf709 	.word	0x0dfdf709
 800068c:	3f023de1 	.word	0x3f023de1
 8000690:	7501b288 	.word	0x7501b288
 8000694:	3f49efe0 	.word	0x3f49efe0
 8000698:	b5688f3b 	.word	0xb5688f3b
 800069c:	3fa48228 	.word	0x3fa48228
 80006a0:	0e884455 	.word	0x0e884455
 80006a4:	3fc9c155 	.word	0x3fc9c155
 80006a8:	03eb6f7d 	.word	0x03eb6f7d
 80006ac:	3fd4d612 	.word	0x3fd4d612
 80006b0:	55555555 	.word	0x55555555
 80006b4:	3fc55555 	.word	0x3fc55555
 80006b8:	b12e9282 	.word	0xb12e9282
 80006bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80006c0:	1b8d0159 	.word	0x1b8d0159
 80006c4:	3fe6066c 	.word	0x3fe6066c
 80006c8:	9c598ac8 	.word	0x9c598ac8
 80006cc:	40002ae5 	.word	0x40002ae5
 80006d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80006d4:	40033a27 	.word	0x40033a27
 80006d8:	54442d18 	.word	0x54442d18
 80006dc:	3ff921fb 	.word	0x3ff921fb
 80006e0:	33145c07 	.word	0x33145c07
 80006e4:	3c91a626 	.word	0x3c91a626
 80006e8:	54442d18 	.word	0x54442d18
 80006ec:	400921fb 	.word	0x400921fb
 80006f0:	2300      	movs	r3, #0
 80006f2:	2200      	movs	r2, #0
 80006f4:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 80006f8:	f000 fb86 	bl	8000e08 <__adddf3>
 80006fc:	2300      	movs	r3, #0
 80006fe:	2200      	movs	r2, #0
 8000700:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8000704:	f000 fd32 	bl	800116c <__aeabi_dmul>
 8000708:	a343      	add	r3, pc, #268	; (adr r3, 8000818 <__ieee754_acos+0x470>)
 800070a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800070e:	4604      	mov	r4, r0
 8000710:	460d      	mov	r5, r1
 8000712:	f000 fd2b 	bl	800116c <__aeabi_dmul>
 8000716:	a342      	add	r3, pc, #264	; (adr r3, 8000820 <__ieee754_acos+0x478>)
 8000718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800071c:	f000 fb74 	bl	8000e08 <__adddf3>
 8000720:	4622      	mov	r2, r4
 8000722:	462b      	mov	r3, r5
 8000724:	f000 fd22 	bl	800116c <__aeabi_dmul>
 8000728:	a33f      	add	r3, pc, #252	; (adr r3, 8000828 <__ieee754_acos+0x480>)
 800072a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800072e:	f000 fb69 	bl	8000e04 <__aeabi_dsub>
 8000732:	4622      	mov	r2, r4
 8000734:	462b      	mov	r3, r5
 8000736:	f000 fd19 	bl	800116c <__aeabi_dmul>
 800073a:	a33d      	add	r3, pc, #244	; (adr r3, 8000830 <__ieee754_acos+0x488>)
 800073c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000740:	f000 fb62 	bl	8000e08 <__adddf3>
 8000744:	4622      	mov	r2, r4
 8000746:	462b      	mov	r3, r5
 8000748:	f000 fd10 	bl	800116c <__aeabi_dmul>
 800074c:	a33a      	add	r3, pc, #232	; (adr r3, 8000838 <__ieee754_acos+0x490>)
 800074e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000752:	f000 fb57 	bl	8000e04 <__aeabi_dsub>
 8000756:	4622      	mov	r2, r4
 8000758:	462b      	mov	r3, r5
 800075a:	f000 fd07 	bl	800116c <__aeabi_dmul>
 800075e:	a338      	add	r3, pc, #224	; (adr r3, 8000840 <__ieee754_acos+0x498>)
 8000760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000764:	f000 fb50 	bl	8000e08 <__adddf3>
 8000768:	4622      	mov	r2, r4
 800076a:	462b      	mov	r3, r5
 800076c:	f000 fcfe 	bl	800116c <__aeabi_dmul>
 8000770:	4680      	mov	r8, r0
 8000772:	4689      	mov	r9, r1
 8000774:	4620      	mov	r0, r4
 8000776:	4629      	mov	r1, r5
 8000778:	f000 f87e 	bl	8000878 <__ieee754_sqrt>
 800077c:	a332      	add	r3, pc, #200	; (adr r3, 8000848 <__ieee754_acos+0x4a0>)
 800077e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000782:	4606      	mov	r6, r0
 8000784:	460f      	mov	r7, r1
 8000786:	4620      	mov	r0, r4
 8000788:	4629      	mov	r1, r5
 800078a:	f000 fcef 	bl	800116c <__aeabi_dmul>
 800078e:	a330      	add	r3, pc, #192	; (adr r3, 8000850 <__ieee754_acos+0x4a8>)
 8000790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000794:	f000 fb36 	bl	8000e04 <__aeabi_dsub>
 8000798:	4622      	mov	r2, r4
 800079a:	462b      	mov	r3, r5
 800079c:	f000 fce6 	bl	800116c <__aeabi_dmul>
 80007a0:	a32d      	add	r3, pc, #180	; (adr r3, 8000858 <__ieee754_acos+0x4b0>)
 80007a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a6:	f000 fb2f 	bl	8000e08 <__adddf3>
 80007aa:	4622      	mov	r2, r4
 80007ac:	462b      	mov	r3, r5
 80007ae:	f000 fcdd 	bl	800116c <__aeabi_dmul>
 80007b2:	a32b      	add	r3, pc, #172	; (adr r3, 8000860 <__ieee754_acos+0x4b8>)
 80007b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007b8:	f000 fb24 	bl	8000e04 <__aeabi_dsub>
 80007bc:	4622      	mov	r2, r4
 80007be:	462b      	mov	r3, r5
 80007c0:	f000 fcd4 	bl	800116c <__aeabi_dmul>
 80007c4:	2300      	movs	r3, #0
 80007c6:	2200      	movs	r2, #0
 80007c8:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 80007cc:	f000 fb1c 	bl	8000e08 <__adddf3>
 80007d0:	4602      	mov	r2, r0
 80007d2:	460b      	mov	r3, r1
 80007d4:	4640      	mov	r0, r8
 80007d6:	4649      	mov	r1, r9
 80007d8:	f000 fdf2 	bl	80013c0 <__aeabi_ddiv>
 80007dc:	4632      	mov	r2, r6
 80007de:	463b      	mov	r3, r7
 80007e0:	f000 fcc4 	bl	800116c <__aeabi_dmul>
 80007e4:	a320      	add	r3, pc, #128	; (adr r3, 8000868 <__ieee754_acos+0x4c0>)
 80007e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ea:	f000 fb0b 	bl	8000e04 <__aeabi_dsub>
 80007ee:	4602      	mov	r2, r0
 80007f0:	460b      	mov	r3, r1
 80007f2:	4630      	mov	r0, r6
 80007f4:	4639      	mov	r1, r7
 80007f6:	f000 fb07 	bl	8000e08 <__adddf3>
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	f000 fb03 	bl	8000e08 <__adddf3>
 8000802:	4602      	mov	r2, r0
 8000804:	460b      	mov	r3, r1
 8000806:	a11a      	add	r1, pc, #104	; (adr r1, 8000870 <__ieee754_acos+0x4c8>)
 8000808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800080c:	f000 fafa 	bl	8000e04 <__aeabi_dsub>
 8000810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000814:	f3af 8000 	nop.w
 8000818:	0dfdf709 	.word	0x0dfdf709
 800081c:	3f023de1 	.word	0x3f023de1
 8000820:	7501b288 	.word	0x7501b288
 8000824:	3f49efe0 	.word	0x3f49efe0
 8000828:	b5688f3b 	.word	0xb5688f3b
 800082c:	3fa48228 	.word	0x3fa48228
 8000830:	0e884455 	.word	0x0e884455
 8000834:	3fc9c155 	.word	0x3fc9c155
 8000838:	03eb6f7d 	.word	0x03eb6f7d
 800083c:	3fd4d612 	.word	0x3fd4d612
 8000840:	55555555 	.word	0x55555555
 8000844:	3fc55555 	.word	0x3fc55555
 8000848:	b12e9282 	.word	0xb12e9282
 800084c:	3fb3b8c5 	.word	0x3fb3b8c5
 8000850:	1b8d0159 	.word	0x1b8d0159
 8000854:	3fe6066c 	.word	0x3fe6066c
 8000858:	9c598ac8 	.word	0x9c598ac8
 800085c:	40002ae5 	.word	0x40002ae5
 8000860:	1c8a2d4b 	.word	0x1c8a2d4b
 8000864:	40033a27 	.word	0x40033a27
 8000868:	33145c07 	.word	0x33145c07
 800086c:	3c91a626 	.word	0x3c91a626
 8000870:	54442d18 	.word	0x54442d18
 8000874:	400921fb 	.word	0x400921fb

08000878 <__ieee754_sqrt>:
 8000878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800087c:	2700      	movs	r7, #0
 800087e:	46b9      	mov	r9, r7
 8000880:	f6c7 77f0 	movt	r7, #32752	; 0x7ff0
 8000884:	f6c7 79f0 	movt	r9, #32752	; 0x7ff0
 8000888:	400f      	ands	r7, r1
 800088a:	454f      	cmp	r7, r9
 800088c:	4604      	mov	r4, r0
 800088e:	460d      	mov	r5, r1
 8000890:	4602      	mov	r2, r0
 8000892:	460b      	mov	r3, r1
 8000894:	460e      	mov	r6, r1
 8000896:	4680      	mov	r8, r0
 8000898:	f000 8099 	beq.w	80009ce <__ieee754_sqrt+0x156>
 800089c:	2900      	cmp	r1, #0
 800089e:	dd77      	ble.n	8000990 <__ieee754_sqrt+0x118>
 80008a0:	150f      	asrs	r7, r1, #20
 80008a2:	f000 8082 	beq.w	80009aa <__ieee754_sqrt+0x132>
 80008a6:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
 80008aa:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 80008ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80008b2:	07fa      	lsls	r2, r7, #31
 80008b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008b8:	bf44      	itt	mi
 80008ba:	ea4f 72d8 	movmi.w	r2, r8, lsr #31
 80008be:	ea4f 0848 	movmi.w	r8, r8, lsl #1
 80008c2:	f04f 0c00 	mov.w	ip, #0
 80008c6:	bf48      	it	mi
 80008c8:	eb02 0343 	addmi.w	r3, r2, r3, lsl #1
 80008cc:	4660      	mov	r0, ip
 80008ce:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 80008d2:	107f      	asrs	r7, r7, #1
 80008d4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80008d8:	2416      	movs	r4, #22
 80008da:	ea4f 0248 	mov.w	r2, r8, lsl #1
 80008de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80008e2:	1845      	adds	r5, r0, r1
 80008e4:	0fd6      	lsrs	r6, r2, #31
 80008e6:	429d      	cmp	r5, r3
 80008e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80008ec:	bfde      	ittt	le
 80008ee:	ebc5 0303 	rsble	r3, r5, r3
 80008f2:	1868      	addle	r0, r5, r1
 80008f4:	448c      	addle	ip, r1
 80008f6:	0849      	lsrs	r1, r1, #1
 80008f8:	3c01      	subs	r4, #1
 80008fa:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80008fe:	d1f0      	bne.n	80008e2 <__ieee754_sqrt+0x6a>
 8000900:	2620      	movs	r6, #32
 8000902:	46a0      	mov	r8, r4
 8000904:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000908:	e00e      	b.n	8000928 <__ieee754_sqrt+0xb0>
 800090a:	4681      	mov	r9, r0
 800090c:	1a1b      	subs	r3, r3, r0
 800090e:	4295      	cmp	r5, r2
 8000910:	bf88      	it	hi
 8000912:	3b01      	subhi	r3, #1
 8000914:	1b52      	subs	r2, r2, r5
 8000916:	1864      	adds	r4, r4, r1
 8000918:	4648      	mov	r0, r9
 800091a:	0fd5      	lsrs	r5, r2, #31
 800091c:	0849      	lsrs	r1, r1, #1
 800091e:	0052      	lsls	r2, r2, #1
 8000920:	3e01      	subs	r6, #1
 8000922:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8000926:	d015      	beq.n	8000954 <__ieee754_sqrt+0xdc>
 8000928:	4298      	cmp	r0, r3
 800092a:	eb01 0508 	add.w	r5, r1, r8
 800092e:	db03      	blt.n	8000938 <__ieee754_sqrt+0xc0>
 8000930:	4295      	cmp	r5, r2
 8000932:	bf98      	it	ls
 8000934:	4283      	cmpls	r3, r0
 8000936:	d1f0      	bne.n	800091a <__ieee754_sqrt+0xa2>
 8000938:	f005 4900 	and.w	r9, r5, #2147483648	; 0x80000000
 800093c:	eb05 0801 	add.w	r8, r5, r1
 8000940:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
 8000944:	d1e1      	bne.n	800090a <__ieee754_sqrt+0x92>
 8000946:	f1b8 0f00 	cmp.w	r8, #0
 800094a:	bfa8      	it	ge
 800094c:	f100 0901 	addge.w	r9, r0, #1
 8000950:	dadc      	bge.n	800090c <__ieee754_sqrt+0x94>
 8000952:	e7da      	b.n	800090a <__ieee754_sqrt+0x92>
 8000954:	4313      	orrs	r3, r2
 8000956:	d112      	bne.n	800097e <__ieee754_sqrt+0x106>
 8000958:	0866      	lsrs	r6, r4, #1
 800095a:	ea4f 036c 	mov.w	r3, ip, asr #1
 800095e:	f01c 0f01 	tst.w	ip, #1
 8000962:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8000966:	bf18      	it	ne
 8000968:	f046 4600 	orrne.w	r6, r6, #2147483648	; 0x80000000
 800096c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8000970:	4634      	mov	r4, r6
 8000972:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8000976:	4620      	mov	r0, r4
 8000978:	4629      	mov	r1, r5
 800097a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800097e:	1c63      	adds	r3, r4, #1
 8000980:	bf08      	it	eq
 8000982:	f10c 0c01 	addeq.w	ip, ip, #1
 8000986:	d0e8      	beq.n	800095a <__ieee754_sqrt+0xe2>
 8000988:	f004 0301 	and.w	r3, r4, #1
 800098c:	191c      	adds	r4, r3, r4
 800098e:	e7e3      	b.n	8000958 <__ieee754_sqrt+0xe0>
 8000990:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8000994:	4306      	orrs	r6, r0
 8000996:	d0ee      	beq.n	8000976 <__ieee754_sqrt+0xfe>
 8000998:	bb41      	cbnz	r1, 80009ec <__ieee754_sqrt+0x174>
 800099a:	460f      	mov	r7, r1
 800099c:	ea4f 26d8 	mov.w	r6, r8, lsr #11
 80009a0:	3f15      	subs	r7, #21
 80009a2:	ea4f 5848 	mov.w	r8, r8, lsl #21
 80009a6:	2e00      	cmp	r6, #0
 80009a8:	d0f8      	beq.n	800099c <__ieee754_sqrt+0x124>
 80009aa:	f416 1380 	ands.w	r3, r6, #1048576	; 0x100000
 80009ae:	d119      	bne.n	80009e4 <__ieee754_sqrt+0x16c>
 80009b0:	0076      	lsls	r6, r6, #1
 80009b2:	3301      	adds	r3, #1
 80009b4:	02f1      	lsls	r1, r6, #11
 80009b6:	d5fb      	bpl.n	80009b0 <__ieee754_sqrt+0x138>
 80009b8:	f1c3 0101 	rsb	r1, r3, #1
 80009bc:	f1c3 0220 	rsb	r2, r3, #32
 80009c0:	fa28 f202 	lsr.w	r2, r8, r2
 80009c4:	187f      	adds	r7, r7, r1
 80009c6:	4316      	orrs	r6, r2
 80009c8:	fa08 f803 	lsl.w	r8, r8, r3
 80009cc:	e76b      	b.n	80008a6 <__ieee754_sqrt+0x2e>
 80009ce:	f000 fbcd 	bl	800116c <__aeabi_dmul>
 80009d2:	4602      	mov	r2, r0
 80009d4:	460b      	mov	r3, r1
 80009d6:	4620      	mov	r0, r4
 80009d8:	4629      	mov	r1, r5
 80009da:	f000 fa15 	bl	8000e08 <__adddf3>
 80009de:	4604      	mov	r4, r0
 80009e0:	460d      	mov	r5, r1
 80009e2:	e7c8      	b.n	8000976 <__ieee754_sqrt+0xfe>
 80009e4:	2220      	movs	r2, #32
 80009e6:	2101      	movs	r1, #1
 80009e8:	2300      	movs	r3, #0
 80009ea:	e7e9      	b.n	80009c0 <__ieee754_sqrt+0x148>
 80009ec:	4602      	mov	r2, r0
 80009ee:	460b      	mov	r3, r1
 80009f0:	f000 fa08 	bl	8000e04 <__aeabi_dsub>
 80009f4:	4602      	mov	r2, r0
 80009f6:	460b      	mov	r3, r1
 80009f8:	f000 fce2 	bl	80013c0 <__aeabi_ddiv>
 80009fc:	4604      	mov	r4, r0
 80009fe:	460d      	mov	r5, r1
 8000a00:	e7b9      	b.n	8000976 <__ieee754_sqrt+0xfe>
 8000a02:	bf00      	nop

08000a04 <__ieee754_atan2f>:
 8000a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a06:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8000a0a:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8000a14:	bfd8      	it	le
 8000a16:	f1b6 4fff 	cmple.w	r6, #2139095040	; 0x7f800000
 8000a1a:	4605      	mov	r5, r0
 8000a1c:	dc45      	bgt.n	8000aaa <__ieee754_atan2f+0xa6>
 8000a1e:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8000a22:	d04c      	beq.n	8000abe <__ieee754_atan2f+0xba>
 8000a24:	178f      	asrs	r7, r1, #30
 8000a26:	f007 0702 	and.w	r7, r7, #2
 8000a2a:	ea47 77d0 	orr.w	r7, r7, r0, lsr #31
 8000a2e:	b94c      	cbnz	r4, 8000a44 <__ieee754_atan2f+0x40>
 8000a30:	2f02      	cmp	r7, #2
 8000a32:	d03f      	beq.n	8000ab4 <__ieee754_atan2f+0xb0>
 8000a34:	2f03      	cmp	r7, #3
 8000a36:	d103      	bne.n	8000a40 <__ieee754_atan2f+0x3c>
 8000a38:	f640 73db 	movw	r3, #4059	; 0xfdb
 8000a3c:	f2cc 0349 	movt	r3, #49225	; 0xc049
 8000a40:	4618      	mov	r0, r3
 8000a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a44:	b336      	cbz	r6, 8000a94 <__ieee754_atan2f+0x90>
 8000a46:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8000a4a:	d055      	beq.n	8000af8 <__ieee754_atan2f+0xf4>
 8000a4c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8000a50:	d020      	beq.n	8000a94 <__ieee754_atan2f+0x90>
 8000a52:	1ba4      	subs	r4, r4, r6
 8000a54:	15e4      	asrs	r4, r4, #23
 8000a56:	2c3c      	cmp	r4, #60	; 0x3c
 8000a58:	bfc4      	itt	gt
 8000a5a:	f640 70db 	movwgt	r0, #4059	; 0xfdb
 8000a5e:	f6c3 70c9 	movtgt	r0, #16329	; 0x3fc9
 8000a62:	dd30      	ble.n	8000ac6 <__ieee754_atan2f+0xc2>
 8000a64:	2f01      	cmp	r7, #1
 8000a66:	bf08      	it	eq
 8000a68:	f100 4300 	addeq.w	r3, r0, #2147483648	; 0x80000000
 8000a6c:	d0e8      	beq.n	8000a40 <__ieee754_atan2f+0x3c>
 8000a6e:	2f02      	cmp	r7, #2
 8000a70:	d033      	beq.n	8000ada <__ieee754_atan2f+0xd6>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2f00      	cmp	r7, #0
 8000a76:	d0e3      	beq.n	8000a40 <__ieee754_atan2f+0x3c>
 8000a78:	f64b 512e 	movw	r1, #48430	; 0xbd2e
 8000a7c:	f2c3 31bb 	movt	r1, #13243	; 0x33bb
 8000a80:	f000 fe64 	bl	800174c <__addsf3>
 8000a84:	f640 71db 	movw	r1, #4059	; 0xfdb
 8000a88:	f2c4 0149 	movt	r1, #16457	; 0x4049
 8000a8c:	f000 fe5c 	bl	8001748 <__aeabi_fsub>
 8000a90:	4603      	mov	r3, r0
 8000a92:	e7d5      	b.n	8000a40 <__ieee754_atan2f+0x3c>
 8000a94:	2d00      	cmp	r5, #0
 8000a96:	f640 73db 	movw	r3, #4059	; 0xfdb
 8000a9a:	bfb8      	it	lt
 8000a9c:	f6cb 73c9 	movtlt	r3, #49097	; 0xbfc9
 8000aa0:	dbce      	blt.n	8000a40 <__ieee754_atan2f+0x3c>
 8000aa2:	f6c3 73c9 	movt	r3, #16329	; 0x3fc9
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aaa:	f000 fe4f 	bl	800174c <__addsf3>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ab4:	f640 73db 	movw	r3, #4059	; 0xfdb
 8000ab8:	f2c4 0349 	movt	r3, #16457	; 0x4049
 8000abc:	e7c0      	b.n	8000a40 <__ieee754_atan2f+0x3c>
 8000abe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000ac2:	f000 b879 	b.w	8000bb8 <atanf>
 8000ac6:	f114 0f3c 	cmn.w	r4, #60	; 0x3c
 8000aca:	bfac      	ite	ge
 8000acc:	2400      	movge	r4, #0
 8000ace:	2401      	movlt	r4, #1
 8000ad0:	ea14 74d1 	ands.w	r4, r4, r1, lsr #31
 8000ad4:	d01d      	beq.n	8000b12 <__ieee754_atan2f+0x10e>
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	e7c4      	b.n	8000a64 <__ieee754_atan2f+0x60>
 8000ada:	f64b 512e 	movw	r1, #48430	; 0xbd2e
 8000ade:	f2c3 31bb 	movt	r1, #13243	; 0x33bb
 8000ae2:	f000 fe33 	bl	800174c <__addsf3>
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	f640 70db 	movw	r0, #4059	; 0xfdb
 8000aec:	f2c4 0049 	movt	r0, #16457	; 0x4049
 8000af0:	f000 fe2a 	bl	8001748 <__aeabi_fsub>
 8000af4:	4603      	mov	r3, r0
 8000af6:	e7a3      	b.n	8000a40 <__ieee754_atan2f+0x3c>
 8000af8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8000afc:	d010      	beq.n	8000b20 <__ieee754_atan2f+0x11c>
 8000afe:	2f02      	cmp	r7, #2
 8000b00:	d0d8      	beq.n	8000ab4 <__ieee754_atan2f+0xb0>
 8000b02:	2f03      	cmp	r7, #3
 8000b04:	d098      	beq.n	8000a38 <__ieee754_atan2f+0x34>
 8000b06:	2300      	movs	r3, #0
 8000b08:	2f01      	cmp	r7, #1
 8000b0a:	d199      	bne.n	8000a40 <__ieee754_atan2f+0x3c>
 8000b0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000b10:	e796      	b.n	8000a40 <__ieee754_atan2f+0x3c>
 8000b12:	f000 ffd7 	bl	8001ac4 <__aeabi_fdiv>
 8000b16:	f000 f96d 	bl	8000df4 <fabsf>
 8000b1a:	f000 f84d 	bl	8000bb8 <atanf>
 8000b1e:	e7a1      	b.n	8000a64 <__ieee754_atan2f+0x60>
 8000b20:	2f02      	cmp	r7, #2
 8000b22:	d00b      	beq.n	8000b3c <__ieee754_atan2f+0x138>
 8000b24:	2f03      	cmp	r7, #3
 8000b26:	d00e      	beq.n	8000b46 <__ieee754_atan2f+0x142>
 8000b28:	2f01      	cmp	r7, #1
 8000b2a:	f640 73db 	movw	r3, #4059	; 0xfdb
 8000b2e:	bf18      	it	ne
 8000b30:	f6c3 7349 	movtne	r3, #16201	; 0x3f49
 8000b34:	d184      	bne.n	8000a40 <__ieee754_atan2f+0x3c>
 8000b36:	f6cb 7349 	movt	r3, #48969	; 0xbf49
 8000b3a:	e781      	b.n	8000a40 <__ieee754_atan2f+0x3c>
 8000b3c:	f64c 33e4 	movw	r3, #52196	; 0xcbe4
 8000b40:	f2c4 0316 	movt	r3, #16406	; 0x4016
 8000b44:	e77c      	b.n	8000a40 <__ieee754_atan2f+0x3c>
 8000b46:	f64c 33e4 	movw	r3, #52196	; 0xcbe4
 8000b4a:	f2cc 0316 	movt	r3, #49174	; 0xc016
 8000b4e:	e777      	b.n	8000a40 <__ieee754_atan2f+0x3c>

08000b50 <fabs>:
 8000b50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__fpclassifyd>:
 8000b58:	ea50 0201 	orrs.w	r2, r0, r1
 8000b5c:	d101      	bne.n	8000b62 <__fpclassifyd+0xa>
 8000b5e:	2002      	movs	r0, #2
 8000b60:	4770      	bx	lr
 8000b62:	f1d0 0201 	rsbs	r2, r0, #1
 8000b66:	bf38      	it	cc
 8000b68:	2200      	movcc	r2, #0
 8000b6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	d0f4      	beq.n	8000b5e <__fpclassifyd+0x6>
 8000b74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8000b78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b7c:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 8000b80:	f6c7 71df 	movt	r1, #32735	; 0x7fdf
 8000b84:	4288      	cmp	r0, r1
 8000b86:	d801      	bhi.n	8000b8c <__fpclassifyd+0x34>
 8000b88:	2004      	movs	r0, #4
 8000b8a:	4770      	bx	lr
 8000b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b90:	d201      	bcs.n	8000b96 <__fpclassifyd+0x3e>
 8000b92:	2003      	movs	r0, #3
 8000b94:	4770      	bx	lr
 8000b96:	2000      	movs	r0, #0
 8000b98:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 8000b9c:	4283      	cmp	r3, r0
 8000b9e:	bf14      	ite	ne
 8000ba0:	2000      	movne	r0, #0
 8000ba2:	f002 0001 	andeq.w	r0, r2, #1
 8000ba6:	4770      	bx	lr

08000ba8 <matherr>:
 8000ba8:	2000      	movs	r0, #0
 8000baa:	4770      	bx	lr

08000bac <nan>:
 8000bac:	2100      	movs	r1, #0
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f6c7 71f8 	movt	r1, #32760	; 0x7ff8
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <atanf>:
 8000bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bbc:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8000bc0:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	4606      	mov	r6, r0
 8000bc8:	db0e      	blt.n	8000be8 <atanf+0x30>
 8000bca:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8000bce:	f300 80a4 	bgt.w	8000d1a <atanf+0x162>
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	f640 74db 	movw	r4, #4059	; 0xfdb
 8000bd8:	bfc8      	it	gt
 8000bda:	f6c3 74c9 	movtgt	r4, #16329	; 0x3fc9
 8000bde:	f340 80cf 	ble.w	8000d80 <atanf+0x1c8>
 8000be2:	4620      	mov	r0, r4
 8000be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bec:	f6c3 63df 	movt	r3, #16095	; 0x3edf
 8000bf0:	429d      	cmp	r5, r3
 8000bf2:	f300 80a9 	bgt.w	8000d48 <atanf+0x190>
 8000bf6:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8000bfa:	f2c0 8095 	blt.w	8000d28 <atanf+0x170>
 8000bfe:	f04f 37ff 	mov.w	r7, #4294967295
 8000c02:	4621      	mov	r1, r4
 8000c04:	4620      	mov	r0, r4
 8000c06:	f000 fea9 	bl	800195c <__aeabi_fmul>
 8000c0a:	4601      	mov	r1, r0
 8000c0c:	4680      	mov	r8, r0
 8000c0e:	f000 fea5 	bl	800195c <__aeabi_fmul>
 8000c12:	f646 11d7 	movw	r1, #27095	; 0x69d7
 8000c16:	f6c3 4185 	movt	r1, #15493	; 0x3c85
 8000c1a:	4605      	mov	r5, r0
 8000c1c:	f000 fe9e 	bl	800195c <__aeabi_fmul>
 8000c20:	f64d 2159 	movw	r1, #55897	; 0xda59
 8000c24:	f6c3 514b 	movt	r1, #15691	; 0x3d4b
 8000c28:	f000 fd90 	bl	800174c <__addsf3>
 8000c2c:	4629      	mov	r1, r5
 8000c2e:	f000 fe95 	bl	800195c <__aeabi_fmul>
 8000c32:	f646 3135 	movw	r1, #27445	; 0x6b35
 8000c36:	f6c3 5188 	movt	r1, #15752	; 0x3d88
 8000c3a:	f000 fd87 	bl	800174c <__addsf3>
 8000c3e:	4629      	mov	r1, r5
 8000c40:	f000 fe8c 	bl	800195c <__aeabi_fmul>
 8000c44:	f642 616e 	movw	r1, #11886	; 0x2e6e
 8000c48:	f6c3 51ba 	movt	r1, #15802	; 0x3dba
 8000c4c:	f000 fd7e 	bl	800174c <__addsf3>
 8000c50:	4629      	mov	r1, r5
 8000c52:	f000 fe83 	bl	800195c <__aeabi_fmul>
 8000c56:	f644 1125 	movw	r1, #18725	; 0x4925
 8000c5a:	f6c3 6112 	movt	r1, #15890	; 0x3e12
 8000c5e:	f000 fd75 	bl	800174c <__addsf3>
 8000c62:	4629      	mov	r1, r5
 8000c64:	f000 fe7a 	bl	800195c <__aeabi_fmul>
 8000c68:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 8000c6c:	f6c3 61aa 	movt	r1, #16042	; 0x3eaa
 8000c70:	f000 fd6c 	bl	800174c <__addsf3>
 8000c74:	4641      	mov	r1, r8
 8000c76:	f000 fe71 	bl	800195c <__aeabi_fmul>
 8000c7a:	f24a 2121 	movw	r1, #41505	; 0xa221
 8000c7e:	f6cb 5115 	movt	r1, #48405	; 0xbd15
 8000c82:	4680      	mov	r8, r0
 8000c84:	4628      	mov	r0, r5
 8000c86:	f000 fe69 	bl	800195c <__aeabi_fmul>
 8000c8a:	f24f 116b 	movw	r1, #61803	; 0xf16b
 8000c8e:	f6c3 516e 	movt	r1, #15726	; 0x3d6e
 8000c92:	f000 fd59 	bl	8001748 <__aeabi_fsub>
 8000c96:	4629      	mov	r1, r5
 8000c98:	f000 fe60 	bl	800195c <__aeabi_fmul>
 8000c9c:	f248 7195 	movw	r1, #34709	; 0x8795
 8000ca0:	f6c3 519d 	movt	r1, #15773	; 0x3d9d
 8000ca4:	f000 fd50 	bl	8001748 <__aeabi_fsub>
 8000ca8:	4629      	mov	r1, r5
 8000caa:	f000 fe57 	bl	800195c <__aeabi_fmul>
 8000cae:	f648 6138 	movw	r1, #36408	; 0x8e38
 8000cb2:	f6c3 51e3 	movt	r1, #15843	; 0x3de3
 8000cb6:	f000 fd47 	bl	8001748 <__aeabi_fsub>
 8000cba:	4629      	mov	r1, r5
 8000cbc:	f000 fe4e 	bl	800195c <__aeabi_fmul>
 8000cc0:	f64c 41cd 	movw	r1, #52429	; 0xcccd
 8000cc4:	f6c3 614c 	movt	r1, #15948	; 0x3e4c
 8000cc8:	f000 fd3e 	bl	8001748 <__aeabi_fsub>
 8000ccc:	4629      	mov	r1, r5
 8000cce:	f000 fe45 	bl	800195c <__aeabi_fmul>
 8000cd2:	1c7b      	adds	r3, r7, #1
 8000cd4:	4601      	mov	r1, r0
 8000cd6:	d056      	beq.n	8000d86 <atanf+0x1ce>
 8000cd8:	f644 55c8 	movw	r5, #19912	; 0x4dc8
 8000cdc:	4640      	mov	r0, r8
 8000cde:	f000 fd35 	bl	800174c <__addsf3>
 8000ce2:	f6c0 0500 	movt	r5, #2048	; 0x800
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	f000 fe38 	bl	800195c <__aeabi_fmul>
 8000cec:	eb05 0387 	add.w	r3, r5, r7, lsl #2
 8000cf0:	6919      	ldr	r1, [r3, #16]
 8000cf2:	f000 fd29 	bl	8001748 <__aeabi_fsub>
 8000cf6:	4621      	mov	r1, r4
 8000cf8:	f000 fd26 	bl	8001748 <__aeabi_fsub>
 8000cfc:	4601      	mov	r1, r0
 8000cfe:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 8000d02:	f000 fd21 	bl	8001748 <__aeabi_fsub>
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	bfb8      	it	lt
 8000d0a:	f100 4400 	addlt.w	r4, r0, #2147483648	; 0x80000000
 8000d0e:	f6ff af68 	blt.w	8000be2 <atanf+0x2a>
 8000d12:	4604      	mov	r4, r0
 8000d14:	4620      	mov	r0, r4
 8000d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d1a:	4601      	mov	r1, r0
 8000d1c:	f000 fd16 	bl	800174c <__addsf3>
 8000d20:	4604      	mov	r4, r0
 8000d22:	4620      	mov	r0, r4
 8000d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d28:	f24f 21ca 	movw	r1, #62154	; 0xf2ca
 8000d2c:	f2c7 1149 	movt	r1, #29001	; 0x7149
 8000d30:	f000 fd0c 	bl	800174c <__addsf3>
 8000d34:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000d38:	f000 ffcc 	bl	8001cd4 <__aeabi_fcmpgt>
 8000d3c:	2800      	cmp	r0, #0
 8000d3e:	f43f af5e 	beq.w	8000bfe <atanf+0x46>
 8000d42:	4620      	mov	r0, r4
 8000d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d48:	f000 f854 	bl	8000df4 <fabsf>
 8000d4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d50:	f6c3 7397 	movt	r3, #16279	; 0x3f97
 8000d54:	429d      	cmp	r5, r3
 8000d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	dc1f      	bgt.n	8000d9e <atanf+0x1e6>
 8000d5e:	f6c3 732f 	movt	r3, #16175	; 0x3f2f
 8000d62:	429d      	cmp	r5, r3
 8000d64:	dc3d      	bgt.n	8000de2 <atanf+0x22a>
 8000d66:	4601      	mov	r1, r0
 8000d68:	2700      	movs	r7, #0
 8000d6a:	f000 fcef 	bl	800174c <__addsf3>
 8000d6e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000d72:	f000 fce9 	bl	8001748 <__aeabi_fsub>
 8000d76:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d7a:	4605      	mov	r5, r0
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	e01f      	b.n	8000dc0 <atanf+0x208>
 8000d80:	f6cb 74c9 	movt	r4, #49097	; 0xbfc9
 8000d84:	e72d      	b.n	8000be2 <atanf+0x2a>
 8000d86:	4640      	mov	r0, r8
 8000d88:	f000 fce0 	bl	800174c <__addsf3>
 8000d8c:	4621      	mov	r1, r4
 8000d8e:	f000 fde5 	bl	800195c <__aeabi_fmul>
 8000d92:	4601      	mov	r1, r0
 8000d94:	4620      	mov	r0, r4
 8000d96:	f000 fcd7 	bl	8001748 <__aeabi_fsub>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	e721      	b.n	8000be2 <atanf+0x2a>
 8000d9e:	f2c4 031b 	movt	r3, #16411	; 0x401b
 8000da2:	429d      	cmp	r5, r3
 8000da4:	dc14      	bgt.n	8000dd0 <atanf+0x218>
 8000da6:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8000daa:	2702      	movs	r7, #2
 8000dac:	f000 fccc 	bl	8001748 <__aeabi_fsub>
 8000db0:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8000db4:	4605      	mov	r5, r0
 8000db6:	4620      	mov	r0, r4
 8000db8:	f000 fdd0 	bl	800195c <__aeabi_fmul>
 8000dbc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000dc0:	f000 fcc4 	bl	800174c <__addsf3>
 8000dc4:	4601      	mov	r1, r0
 8000dc6:	4628      	mov	r0, r5
 8000dc8:	f000 fe7c 	bl	8001ac4 <__aeabi_fdiv>
 8000dcc:	4604      	mov	r4, r0
 8000dce:	e718      	b.n	8000c02 <atanf+0x4a>
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	4621      	mov	r1, r4
 8000dd4:	f6cb 7080 	movt	r0, #49024	; 0xbf80
 8000dd8:	2703      	movs	r7, #3
 8000dda:	f000 fe73 	bl	8001ac4 <__aeabi_fdiv>
 8000dde:	4604      	mov	r4, r0
 8000de0:	e70f      	b.n	8000c02 <atanf+0x4a>
 8000de2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000de6:	2701      	movs	r7, #1
 8000de8:	f000 fcae 	bl	8001748 <__aeabi_fsub>
 8000dec:	4605      	mov	r5, r0
 8000dee:	4620      	mov	r0, r4
 8000df0:	e7e4      	b.n	8000dbc <atanf+0x204>
 8000df2:	bf00      	nop

08000df4 <fabsf>:
 8000df4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <__aeabi_drsub>:
 8000dfc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000e00:	e002      	b.n	8000e08 <__adddf3>
 8000e02:	bf00      	nop

08000e04 <__aeabi_dsub>:
 8000e04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000e08 <__adddf3>:
 8000e08:	b530      	push	{r4, r5, lr}
 8000e0a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000e0e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000e12:	ea94 0f05 	teq	r4, r5
 8000e16:	bf08      	it	eq
 8000e18:	ea90 0f02 	teqeq	r0, r2
 8000e1c:	bf1f      	itttt	ne
 8000e1e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000e22:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000e26:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000e2a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000e2e:	f000 80e2 	beq.w	8000ff6 <__adddf3+0x1ee>
 8000e32:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000e36:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000e3a:	bfb8      	it	lt
 8000e3c:	426d      	neglt	r5, r5
 8000e3e:	dd0c      	ble.n	8000e5a <__adddf3+0x52>
 8000e40:	442c      	add	r4, r5
 8000e42:	ea80 0202 	eor.w	r2, r0, r2
 8000e46:	ea81 0303 	eor.w	r3, r1, r3
 8000e4a:	ea82 0000 	eor.w	r0, r2, r0
 8000e4e:	ea83 0101 	eor.w	r1, r3, r1
 8000e52:	ea80 0202 	eor.w	r2, r0, r2
 8000e56:	ea81 0303 	eor.w	r3, r1, r3
 8000e5a:	2d36      	cmp	r5, #54	; 0x36
 8000e5c:	bf88      	it	hi
 8000e5e:	bd30      	pophi	{r4, r5, pc}
 8000e60:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e64:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000e68:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000e6c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000e70:	d002      	beq.n	8000e78 <__adddf3+0x70>
 8000e72:	4240      	negs	r0, r0
 8000e74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e78:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000e7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000e80:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000e84:	d002      	beq.n	8000e8c <__adddf3+0x84>
 8000e86:	4252      	negs	r2, r2
 8000e88:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e8c:	ea94 0f05 	teq	r4, r5
 8000e90:	f000 80a7 	beq.w	8000fe2 <__adddf3+0x1da>
 8000e94:	f1a4 0401 	sub.w	r4, r4, #1
 8000e98:	f1d5 0e20 	rsbs	lr, r5, #32
 8000e9c:	db0d      	blt.n	8000eba <__adddf3+0xb2>
 8000e9e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000ea2:	fa22 f205 	lsr.w	r2, r2, r5
 8000ea6:	1880      	adds	r0, r0, r2
 8000ea8:	f141 0100 	adc.w	r1, r1, #0
 8000eac:	fa03 f20e 	lsl.w	r2, r3, lr
 8000eb0:	1880      	adds	r0, r0, r2
 8000eb2:	fa43 f305 	asr.w	r3, r3, r5
 8000eb6:	4159      	adcs	r1, r3
 8000eb8:	e00e      	b.n	8000ed8 <__adddf3+0xd0>
 8000eba:	f1a5 0520 	sub.w	r5, r5, #32
 8000ebe:	f10e 0e20 	add.w	lr, lr, #32
 8000ec2:	2a01      	cmp	r2, #1
 8000ec4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000ec8:	bf28      	it	cs
 8000eca:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000ece:	fa43 f305 	asr.w	r3, r3, r5
 8000ed2:	18c0      	adds	r0, r0, r3
 8000ed4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000ed8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000edc:	d507      	bpl.n	8000eee <__adddf3+0xe6>
 8000ede:	f04f 0e00 	mov.w	lr, #0
 8000ee2:	f1dc 0c00 	rsbs	ip, ip, #0
 8000ee6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000eea:	eb6e 0101 	sbc.w	r1, lr, r1
 8000eee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000ef2:	d31b      	bcc.n	8000f2c <__adddf3+0x124>
 8000ef4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000ef8:	d30c      	bcc.n	8000f14 <__adddf3+0x10c>
 8000efa:	0849      	lsrs	r1, r1, #1
 8000efc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000f00:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000f04:	f104 0401 	add.w	r4, r4, #1
 8000f08:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000f0c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000f10:	f080 809a 	bcs.w	8001048 <__adddf3+0x240>
 8000f14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000f18:	bf08      	it	eq
 8000f1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000f1e:	f150 0000 	adcs.w	r0, r0, #0
 8000f22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000f26:	ea41 0105 	orr.w	r1, r1, r5
 8000f2a:	bd30      	pop	{r4, r5, pc}
 8000f2c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000f30:	4140      	adcs	r0, r0
 8000f32:	eb41 0101 	adc.w	r1, r1, r1
 8000f36:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000f3a:	f1a4 0401 	sub.w	r4, r4, #1
 8000f3e:	d1e9      	bne.n	8000f14 <__adddf3+0x10c>
 8000f40:	f091 0f00 	teq	r1, #0
 8000f44:	bf04      	itt	eq
 8000f46:	4601      	moveq	r1, r0
 8000f48:	2000      	moveq	r0, #0
 8000f4a:	fab1 f381 	clz	r3, r1
 8000f4e:	bf08      	it	eq
 8000f50:	3320      	addeq	r3, #32
 8000f52:	f1a3 030b 	sub.w	r3, r3, #11
 8000f56:	f1b3 0220 	subs.w	r2, r3, #32
 8000f5a:	da0c      	bge.n	8000f76 <__adddf3+0x16e>
 8000f5c:	320c      	adds	r2, #12
 8000f5e:	dd08      	ble.n	8000f72 <__adddf3+0x16a>
 8000f60:	f102 0c14 	add.w	ip, r2, #20
 8000f64:	f1c2 020c 	rsb	r2, r2, #12
 8000f68:	fa01 f00c 	lsl.w	r0, r1, ip
 8000f6c:	fa21 f102 	lsr.w	r1, r1, r2
 8000f70:	e00c      	b.n	8000f8c <__adddf3+0x184>
 8000f72:	f102 0214 	add.w	r2, r2, #20
 8000f76:	bfd8      	it	le
 8000f78:	f1c2 0c20 	rsble	ip, r2, #32
 8000f7c:	fa01 f102 	lsl.w	r1, r1, r2
 8000f80:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000f84:	bfdc      	itt	le
 8000f86:	ea41 010c 	orrle.w	r1, r1, ip
 8000f8a:	4090      	lslle	r0, r2
 8000f8c:	1ae4      	subs	r4, r4, r3
 8000f8e:	bfa2      	ittt	ge
 8000f90:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000f94:	4329      	orrge	r1, r5
 8000f96:	bd30      	popge	{r4, r5, pc}
 8000f98:	ea6f 0404 	mvn.w	r4, r4
 8000f9c:	3c1f      	subs	r4, #31
 8000f9e:	da1c      	bge.n	8000fda <__adddf3+0x1d2>
 8000fa0:	340c      	adds	r4, #12
 8000fa2:	dc0e      	bgt.n	8000fc2 <__adddf3+0x1ba>
 8000fa4:	f104 0414 	add.w	r4, r4, #20
 8000fa8:	f1c4 0220 	rsb	r2, r4, #32
 8000fac:	fa20 f004 	lsr.w	r0, r0, r4
 8000fb0:	fa01 f302 	lsl.w	r3, r1, r2
 8000fb4:	ea40 0003 	orr.w	r0, r0, r3
 8000fb8:	fa21 f304 	lsr.w	r3, r1, r4
 8000fbc:	ea45 0103 	orr.w	r1, r5, r3
 8000fc0:	bd30      	pop	{r4, r5, pc}
 8000fc2:	f1c4 040c 	rsb	r4, r4, #12
 8000fc6:	f1c4 0220 	rsb	r2, r4, #32
 8000fca:	fa20 f002 	lsr.w	r0, r0, r2
 8000fce:	fa01 f304 	lsl.w	r3, r1, r4
 8000fd2:	ea40 0003 	orr.w	r0, r0, r3
 8000fd6:	4629      	mov	r1, r5
 8000fd8:	bd30      	pop	{r4, r5, pc}
 8000fda:	fa21 f004 	lsr.w	r0, r1, r4
 8000fde:	4629      	mov	r1, r5
 8000fe0:	bd30      	pop	{r4, r5, pc}
 8000fe2:	f094 0f00 	teq	r4, #0
 8000fe6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000fea:	bf06      	itte	eq
 8000fec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000ff0:	3401      	addeq	r4, #1
 8000ff2:	3d01      	subne	r5, #1
 8000ff4:	e74e      	b.n	8000e94 <__adddf3+0x8c>
 8000ff6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000ffa:	bf18      	it	ne
 8000ffc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001000:	d029      	beq.n	8001056 <__adddf3+0x24e>
 8001002:	ea94 0f05 	teq	r4, r5
 8001006:	bf08      	it	eq
 8001008:	ea90 0f02 	teqeq	r0, r2
 800100c:	d005      	beq.n	800101a <__adddf3+0x212>
 800100e:	ea54 0c00 	orrs.w	ip, r4, r0
 8001012:	bf04      	itt	eq
 8001014:	4619      	moveq	r1, r3
 8001016:	4610      	moveq	r0, r2
 8001018:	bd30      	pop	{r4, r5, pc}
 800101a:	ea91 0f03 	teq	r1, r3
 800101e:	bf1e      	ittt	ne
 8001020:	2100      	movne	r1, #0
 8001022:	2000      	movne	r0, #0
 8001024:	bd30      	popne	{r4, r5, pc}
 8001026:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800102a:	d105      	bne.n	8001038 <__adddf3+0x230>
 800102c:	0040      	lsls	r0, r0, #1
 800102e:	4149      	adcs	r1, r1
 8001030:	bf28      	it	cs
 8001032:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8001036:	bd30      	pop	{r4, r5, pc}
 8001038:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800103c:	bf3c      	itt	cc
 800103e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8001042:	bd30      	popcc	{r4, r5, pc}
 8001044:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001048:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800104c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001050:	f04f 0000 	mov.w	r0, #0
 8001054:	bd30      	pop	{r4, r5, pc}
 8001056:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800105a:	bf1a      	itte	ne
 800105c:	4619      	movne	r1, r3
 800105e:	4610      	movne	r0, r2
 8001060:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8001064:	bf1c      	itt	ne
 8001066:	460b      	movne	r3, r1
 8001068:	4602      	movne	r2, r0
 800106a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800106e:	bf06      	itte	eq
 8001070:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8001074:	ea91 0f03 	teqeq	r1, r3
 8001078:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800107c:	bd30      	pop	{r4, r5, pc}
 800107e:	bf00      	nop

08001080 <__aeabi_ui2d>:
 8001080:	f090 0f00 	teq	r0, #0
 8001084:	bf04      	itt	eq
 8001086:	2100      	moveq	r1, #0
 8001088:	4770      	bxeq	lr
 800108a:	b530      	push	{r4, r5, lr}
 800108c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001090:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001094:	f04f 0500 	mov.w	r5, #0
 8001098:	f04f 0100 	mov.w	r1, #0
 800109c:	e750      	b.n	8000f40 <__adddf3+0x138>
 800109e:	bf00      	nop

080010a0 <__aeabi_i2d>:
 80010a0:	f090 0f00 	teq	r0, #0
 80010a4:	bf04      	itt	eq
 80010a6:	2100      	moveq	r1, #0
 80010a8:	4770      	bxeq	lr
 80010aa:	b530      	push	{r4, r5, lr}
 80010ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80010b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80010b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80010b8:	bf48      	it	mi
 80010ba:	4240      	negmi	r0, r0
 80010bc:	f04f 0100 	mov.w	r1, #0
 80010c0:	e73e      	b.n	8000f40 <__adddf3+0x138>
 80010c2:	bf00      	nop

080010c4 <__aeabi_f2d>:
 80010c4:	0042      	lsls	r2, r0, #1
 80010c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80010ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80010ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80010d2:	bf1f      	itttt	ne
 80010d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80010d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80010dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80010e0:	4770      	bxne	lr
 80010e2:	f092 0f00 	teq	r2, #0
 80010e6:	bf14      	ite	ne
 80010e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80010ec:	4770      	bxeq	lr
 80010ee:	b530      	push	{r4, r5, lr}
 80010f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80010f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80010f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80010fc:	e720      	b.n	8000f40 <__adddf3+0x138>
 80010fe:	bf00      	nop

08001100 <__aeabi_ul2d>:
 8001100:	ea50 0201 	orrs.w	r2, r0, r1
 8001104:	bf08      	it	eq
 8001106:	4770      	bxeq	lr
 8001108:	b530      	push	{r4, r5, lr}
 800110a:	f04f 0500 	mov.w	r5, #0
 800110e:	e00a      	b.n	8001126 <__aeabi_l2d+0x16>

08001110 <__aeabi_l2d>:
 8001110:	ea50 0201 	orrs.w	r2, r0, r1
 8001114:	bf08      	it	eq
 8001116:	4770      	bxeq	lr
 8001118:	b530      	push	{r4, r5, lr}
 800111a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800111e:	d502      	bpl.n	8001126 <__aeabi_l2d+0x16>
 8001120:	4240      	negs	r0, r0
 8001122:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001126:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800112a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800112e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8001132:	f43f aedc 	beq.w	8000eee <__adddf3+0xe6>
 8001136:	f04f 0203 	mov.w	r2, #3
 800113a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800113e:	bf18      	it	ne
 8001140:	3203      	addne	r2, #3
 8001142:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001146:	bf18      	it	ne
 8001148:	3203      	addne	r2, #3
 800114a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800114e:	f1c2 0320 	rsb	r3, r2, #32
 8001152:	fa00 fc03 	lsl.w	ip, r0, r3
 8001156:	fa20 f002 	lsr.w	r0, r0, r2
 800115a:	fa01 fe03 	lsl.w	lr, r1, r3
 800115e:	ea40 000e 	orr.w	r0, r0, lr
 8001162:	fa21 f102 	lsr.w	r1, r1, r2
 8001166:	4414      	add	r4, r2
 8001168:	e6c1      	b.n	8000eee <__adddf3+0xe6>
 800116a:	bf00      	nop

0800116c <__aeabi_dmul>:
 800116c:	b570      	push	{r4, r5, r6, lr}
 800116e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001172:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001176:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800117a:	bf1d      	ittte	ne
 800117c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001180:	ea94 0f0c 	teqne	r4, ip
 8001184:	ea95 0f0c 	teqne	r5, ip
 8001188:	f000 f8de 	bleq	8001348 <__aeabi_dmul+0x1dc>
 800118c:	442c      	add	r4, r5
 800118e:	ea81 0603 	eor.w	r6, r1, r3
 8001192:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8001196:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800119a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800119e:	bf18      	it	ne
 80011a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80011a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80011a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011ac:	d038      	beq.n	8001220 <__aeabi_dmul+0xb4>
 80011ae:	fba0 ce02 	umull	ip, lr, r0, r2
 80011b2:	f04f 0500 	mov.w	r5, #0
 80011b6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80011ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80011be:	fbe0 e503 	umlal	lr, r5, r0, r3
 80011c2:	f04f 0600 	mov.w	r6, #0
 80011c6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80011ca:	f09c 0f00 	teq	ip, #0
 80011ce:	bf18      	it	ne
 80011d0:	f04e 0e01 	orrne.w	lr, lr, #1
 80011d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80011d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80011dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80011e0:	d204      	bcs.n	80011ec <__aeabi_dmul+0x80>
 80011e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80011e6:	416d      	adcs	r5, r5
 80011e8:	eb46 0606 	adc.w	r6, r6, r6
 80011ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80011f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80011f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80011f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80011fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8001200:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8001204:	bf88      	it	hi
 8001206:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800120a:	d81e      	bhi.n	800124a <__aeabi_dmul+0xde>
 800120c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8001210:	bf08      	it	eq
 8001212:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8001216:	f150 0000 	adcs.w	r0, r0, #0
 800121a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800121e:	bd70      	pop	{r4, r5, r6, pc}
 8001220:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8001224:	ea46 0101 	orr.w	r1, r6, r1
 8001228:	ea40 0002 	orr.w	r0, r0, r2
 800122c:	ea81 0103 	eor.w	r1, r1, r3
 8001230:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8001234:	bfc2      	ittt	gt
 8001236:	ebd4 050c 	rsbsgt	r5, r4, ip
 800123a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800123e:	bd70      	popgt	{r4, r5, r6, pc}
 8001240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001244:	f04f 0e00 	mov.w	lr, #0
 8001248:	3c01      	subs	r4, #1
 800124a:	f300 80ab 	bgt.w	80013a4 <__aeabi_dmul+0x238>
 800124e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8001252:	bfde      	ittt	le
 8001254:	2000      	movle	r0, #0
 8001256:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800125a:	bd70      	pople	{r4, r5, r6, pc}
 800125c:	f1c4 0400 	rsb	r4, r4, #0
 8001260:	3c20      	subs	r4, #32
 8001262:	da35      	bge.n	80012d0 <__aeabi_dmul+0x164>
 8001264:	340c      	adds	r4, #12
 8001266:	dc1b      	bgt.n	80012a0 <__aeabi_dmul+0x134>
 8001268:	f104 0414 	add.w	r4, r4, #20
 800126c:	f1c4 0520 	rsb	r5, r4, #32
 8001270:	fa00 f305 	lsl.w	r3, r0, r5
 8001274:	fa20 f004 	lsr.w	r0, r0, r4
 8001278:	fa01 f205 	lsl.w	r2, r1, r5
 800127c:	ea40 0002 	orr.w	r0, r0, r2
 8001280:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8001284:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001288:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800128c:	fa21 f604 	lsr.w	r6, r1, r4
 8001290:	eb42 0106 	adc.w	r1, r2, r6
 8001294:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001298:	bf08      	it	eq
 800129a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800129e:	bd70      	pop	{r4, r5, r6, pc}
 80012a0:	f1c4 040c 	rsb	r4, r4, #12
 80012a4:	f1c4 0520 	rsb	r5, r4, #32
 80012a8:	fa00 f304 	lsl.w	r3, r0, r4
 80012ac:	fa20 f005 	lsr.w	r0, r0, r5
 80012b0:	fa01 f204 	lsl.w	r2, r1, r4
 80012b4:	ea40 0002 	orr.w	r0, r0, r2
 80012b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80012bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80012c0:	f141 0100 	adc.w	r1, r1, #0
 80012c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80012c8:	bf08      	it	eq
 80012ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80012ce:	bd70      	pop	{r4, r5, r6, pc}
 80012d0:	f1c4 0520 	rsb	r5, r4, #32
 80012d4:	fa00 f205 	lsl.w	r2, r0, r5
 80012d8:	ea4e 0e02 	orr.w	lr, lr, r2
 80012dc:	fa20 f304 	lsr.w	r3, r0, r4
 80012e0:	fa01 f205 	lsl.w	r2, r1, r5
 80012e4:	ea43 0302 	orr.w	r3, r3, r2
 80012e8:	fa21 f004 	lsr.w	r0, r1, r4
 80012ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80012f0:	fa21 f204 	lsr.w	r2, r1, r4
 80012f4:	ea20 0002 	bic.w	r0, r0, r2
 80012f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80012fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001300:	bf08      	it	eq
 8001302:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8001306:	bd70      	pop	{r4, r5, r6, pc}
 8001308:	f094 0f00 	teq	r4, #0
 800130c:	d10f      	bne.n	800132e <__aeabi_dmul+0x1c2>
 800130e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8001312:	0040      	lsls	r0, r0, #1
 8001314:	eb41 0101 	adc.w	r1, r1, r1
 8001318:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800131c:	bf08      	it	eq
 800131e:	3c01      	subeq	r4, #1
 8001320:	d0f7      	beq.n	8001312 <__aeabi_dmul+0x1a6>
 8001322:	ea41 0106 	orr.w	r1, r1, r6
 8001326:	f095 0f00 	teq	r5, #0
 800132a:	bf18      	it	ne
 800132c:	4770      	bxne	lr
 800132e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8001332:	0052      	lsls	r2, r2, #1
 8001334:	eb43 0303 	adc.w	r3, r3, r3
 8001338:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800133c:	bf08      	it	eq
 800133e:	3d01      	subeq	r5, #1
 8001340:	d0f7      	beq.n	8001332 <__aeabi_dmul+0x1c6>
 8001342:	ea43 0306 	orr.w	r3, r3, r6
 8001346:	4770      	bx	lr
 8001348:	ea94 0f0c 	teq	r4, ip
 800134c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001350:	bf18      	it	ne
 8001352:	ea95 0f0c 	teqne	r5, ip
 8001356:	d00c      	beq.n	8001372 <__aeabi_dmul+0x206>
 8001358:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800135c:	bf18      	it	ne
 800135e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001362:	d1d1      	bne.n	8001308 <__aeabi_dmul+0x19c>
 8001364:	ea81 0103 	eor.w	r1, r1, r3
 8001368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800136c:	f04f 0000 	mov.w	r0, #0
 8001370:	bd70      	pop	{r4, r5, r6, pc}
 8001372:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001376:	bf06      	itte	eq
 8001378:	4610      	moveq	r0, r2
 800137a:	4619      	moveq	r1, r3
 800137c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001380:	d019      	beq.n	80013b6 <__aeabi_dmul+0x24a>
 8001382:	ea94 0f0c 	teq	r4, ip
 8001386:	d102      	bne.n	800138e <__aeabi_dmul+0x222>
 8001388:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800138c:	d113      	bne.n	80013b6 <__aeabi_dmul+0x24a>
 800138e:	ea95 0f0c 	teq	r5, ip
 8001392:	d105      	bne.n	80013a0 <__aeabi_dmul+0x234>
 8001394:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001398:	bf1c      	itt	ne
 800139a:	4610      	movne	r0, r2
 800139c:	4619      	movne	r1, r3
 800139e:	d10a      	bne.n	80013b6 <__aeabi_dmul+0x24a>
 80013a0:	ea81 0103 	eor.w	r1, r1, r3
 80013a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80013a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80013ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80013b0:	f04f 0000 	mov.w	r0, #0
 80013b4:	bd70      	pop	{r4, r5, r6, pc}
 80013b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80013ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80013be:	bd70      	pop	{r4, r5, r6, pc}

080013c0 <__aeabi_ddiv>:
 80013c0:	b570      	push	{r4, r5, r6, lr}
 80013c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80013c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80013ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80013ce:	bf1d      	ittte	ne
 80013d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80013d4:	ea94 0f0c 	teqne	r4, ip
 80013d8:	ea95 0f0c 	teqne	r5, ip
 80013dc:	f000 f8a7 	bleq	800152e <__aeabi_ddiv+0x16e>
 80013e0:	eba4 0405 	sub.w	r4, r4, r5
 80013e4:	ea81 0e03 	eor.w	lr, r1, r3
 80013e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80013ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80013f0:	f000 8088 	beq.w	8001504 <__aeabi_ddiv+0x144>
 80013f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80013f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80013fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8001400:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8001404:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8001408:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800140c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8001410:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8001414:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8001418:	429d      	cmp	r5, r3
 800141a:	bf08      	it	eq
 800141c:	4296      	cmpeq	r6, r2
 800141e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8001422:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8001426:	d202      	bcs.n	800142e <__aeabi_ddiv+0x6e>
 8001428:	085b      	lsrs	r3, r3, #1
 800142a:	ea4f 0232 	mov.w	r2, r2, rrx
 800142e:	1ab6      	subs	r6, r6, r2
 8001430:	eb65 0503 	sbc.w	r5, r5, r3
 8001434:	085b      	lsrs	r3, r3, #1
 8001436:	ea4f 0232 	mov.w	r2, r2, rrx
 800143a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800143e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8001442:	ebb6 0e02 	subs.w	lr, r6, r2
 8001446:	eb75 0e03 	sbcs.w	lr, r5, r3
 800144a:	bf22      	ittt	cs
 800144c:	1ab6      	subcs	r6, r6, r2
 800144e:	4675      	movcs	r5, lr
 8001450:	ea40 000c 	orrcs.w	r0, r0, ip
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	ea4f 0232 	mov.w	r2, r2, rrx
 800145a:	ebb6 0e02 	subs.w	lr, r6, r2
 800145e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001462:	bf22      	ittt	cs
 8001464:	1ab6      	subcs	r6, r6, r2
 8001466:	4675      	movcs	r5, lr
 8001468:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800146c:	085b      	lsrs	r3, r3, #1
 800146e:	ea4f 0232 	mov.w	r2, r2, rrx
 8001472:	ebb6 0e02 	subs.w	lr, r6, r2
 8001476:	eb75 0e03 	sbcs.w	lr, r5, r3
 800147a:	bf22      	ittt	cs
 800147c:	1ab6      	subcs	r6, r6, r2
 800147e:	4675      	movcs	r5, lr
 8001480:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001484:	085b      	lsrs	r3, r3, #1
 8001486:	ea4f 0232 	mov.w	r2, r2, rrx
 800148a:	ebb6 0e02 	subs.w	lr, r6, r2
 800148e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001492:	bf22      	ittt	cs
 8001494:	1ab6      	subcs	r6, r6, r2
 8001496:	4675      	movcs	r5, lr
 8001498:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800149c:	ea55 0e06 	orrs.w	lr, r5, r6
 80014a0:	d018      	beq.n	80014d4 <__aeabi_ddiv+0x114>
 80014a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80014a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80014aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80014ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80014b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80014b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80014ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80014be:	d1c0      	bne.n	8001442 <__aeabi_ddiv+0x82>
 80014c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80014c4:	d10b      	bne.n	80014de <__aeabi_ddiv+0x11e>
 80014c6:	ea41 0100 	orr.w	r1, r1, r0
 80014ca:	f04f 0000 	mov.w	r0, #0
 80014ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80014d2:	e7b6      	b.n	8001442 <__aeabi_ddiv+0x82>
 80014d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80014d8:	bf04      	itt	eq
 80014da:	4301      	orreq	r1, r0
 80014dc:	2000      	moveq	r0, #0
 80014de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80014e2:	bf88      	it	hi
 80014e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80014e8:	f63f aeaf 	bhi.w	800124a <__aeabi_dmul+0xde>
 80014ec:	ebb5 0c03 	subs.w	ip, r5, r3
 80014f0:	bf04      	itt	eq
 80014f2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80014f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80014fa:	f150 0000 	adcs.w	r0, r0, #0
 80014fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001502:	bd70      	pop	{r4, r5, r6, pc}
 8001504:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8001508:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800150c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8001510:	bfc2      	ittt	gt
 8001512:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001516:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800151a:	bd70      	popgt	{r4, r5, r6, pc}
 800151c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001520:	f04f 0e00 	mov.w	lr, #0
 8001524:	3c01      	subs	r4, #1
 8001526:	e690      	b.n	800124a <__aeabi_dmul+0xde>
 8001528:	ea45 0e06 	orr.w	lr, r5, r6
 800152c:	e68d      	b.n	800124a <__aeabi_dmul+0xde>
 800152e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001532:	ea94 0f0c 	teq	r4, ip
 8001536:	bf08      	it	eq
 8001538:	ea95 0f0c 	teqeq	r5, ip
 800153c:	f43f af3b 	beq.w	80013b6 <__aeabi_dmul+0x24a>
 8001540:	ea94 0f0c 	teq	r4, ip
 8001544:	d10a      	bne.n	800155c <__aeabi_ddiv+0x19c>
 8001546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800154a:	f47f af34 	bne.w	80013b6 <__aeabi_dmul+0x24a>
 800154e:	ea95 0f0c 	teq	r5, ip
 8001552:	f47f af25 	bne.w	80013a0 <__aeabi_dmul+0x234>
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	e72c      	b.n	80013b6 <__aeabi_dmul+0x24a>
 800155c:	ea95 0f0c 	teq	r5, ip
 8001560:	d106      	bne.n	8001570 <__aeabi_ddiv+0x1b0>
 8001562:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001566:	f43f aefd 	beq.w	8001364 <__aeabi_dmul+0x1f8>
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	e722      	b.n	80013b6 <__aeabi_dmul+0x24a>
 8001570:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001574:	bf18      	it	ne
 8001576:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800157a:	f47f aec5 	bne.w	8001308 <__aeabi_dmul+0x19c>
 800157e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8001582:	f47f af0d 	bne.w	80013a0 <__aeabi_dmul+0x234>
 8001586:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800158a:	f47f aeeb 	bne.w	8001364 <__aeabi_dmul+0x1f8>
 800158e:	e712      	b.n	80013b6 <__aeabi_dmul+0x24a>

08001590 <__gedf2>:
 8001590:	f04f 3cff 	mov.w	ip, #4294967295
 8001594:	e006      	b.n	80015a4 <__cmpdf2+0x4>
 8001596:	bf00      	nop

08001598 <__ledf2>:
 8001598:	f04f 0c01 	mov.w	ip, #1
 800159c:	e002      	b.n	80015a4 <__cmpdf2+0x4>
 800159e:	bf00      	nop

080015a0 <__cmpdf2>:
 80015a0:	f04f 0c01 	mov.w	ip, #1
 80015a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80015a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80015ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80015b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80015b4:	bf18      	it	ne
 80015b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80015ba:	d01b      	beq.n	80015f4 <__cmpdf2+0x54>
 80015bc:	b001      	add	sp, #4
 80015be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80015c2:	bf0c      	ite	eq
 80015c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80015c8:	ea91 0f03 	teqne	r1, r3
 80015cc:	bf02      	ittt	eq
 80015ce:	ea90 0f02 	teqeq	r0, r2
 80015d2:	2000      	moveq	r0, #0
 80015d4:	4770      	bxeq	lr
 80015d6:	f110 0f00 	cmn.w	r0, #0
 80015da:	ea91 0f03 	teq	r1, r3
 80015de:	bf58      	it	pl
 80015e0:	4299      	cmppl	r1, r3
 80015e2:	bf08      	it	eq
 80015e4:	4290      	cmpeq	r0, r2
 80015e6:	bf2c      	ite	cs
 80015e8:	17d8      	asrcs	r0, r3, #31
 80015ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80015ee:	f040 0001 	orr.w	r0, r0, #1
 80015f2:	4770      	bx	lr
 80015f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80015f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80015fc:	d102      	bne.n	8001604 <__cmpdf2+0x64>
 80015fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8001602:	d107      	bne.n	8001614 <__cmpdf2+0x74>
 8001604:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800160c:	d1d6      	bne.n	80015bc <__cmpdf2+0x1c>
 800160e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8001612:	d0d3      	beq.n	80015bc <__cmpdf2+0x1c>
 8001614:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop

0800161c <__aeabi_cdrcmple>:
 800161c:	4684      	mov	ip, r0
 800161e:	4610      	mov	r0, r2
 8001620:	4662      	mov	r2, ip
 8001622:	468c      	mov	ip, r1
 8001624:	4619      	mov	r1, r3
 8001626:	4663      	mov	r3, ip
 8001628:	e000      	b.n	800162c <__aeabi_cdcmpeq>
 800162a:	bf00      	nop

0800162c <__aeabi_cdcmpeq>:
 800162c:	b501      	push	{r0, lr}
 800162e:	f7ff ffb7 	bl	80015a0 <__cmpdf2>
 8001632:	2800      	cmp	r0, #0
 8001634:	bf48      	it	mi
 8001636:	f110 0f00 	cmnmi.w	r0, #0
 800163a:	bd01      	pop	{r0, pc}

0800163c <__aeabi_dcmpeq>:
 800163c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001640:	f7ff fff4 	bl	800162c <__aeabi_cdcmpeq>
 8001644:	bf0c      	ite	eq
 8001646:	2001      	moveq	r0, #1
 8001648:	2000      	movne	r0, #0
 800164a:	f85d fb08 	ldr.w	pc, [sp], #8
 800164e:	bf00      	nop

08001650 <__aeabi_dcmplt>:
 8001650:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001654:	f7ff ffea 	bl	800162c <__aeabi_cdcmpeq>
 8001658:	bf34      	ite	cc
 800165a:	2001      	movcc	r0, #1
 800165c:	2000      	movcs	r0, #0
 800165e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001662:	bf00      	nop

08001664 <__aeabi_dcmple>:
 8001664:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001668:	f7ff ffe0 	bl	800162c <__aeabi_cdcmpeq>
 800166c:	bf94      	ite	ls
 800166e:	2001      	movls	r0, #1
 8001670:	2000      	movhi	r0, #0
 8001672:	f85d fb08 	ldr.w	pc, [sp], #8
 8001676:	bf00      	nop

08001678 <__aeabi_dcmpge>:
 8001678:	f84d ed08 	str.w	lr, [sp, #-8]!
 800167c:	f7ff ffce 	bl	800161c <__aeabi_cdrcmple>
 8001680:	bf94      	ite	ls
 8001682:	2001      	movls	r0, #1
 8001684:	2000      	movhi	r0, #0
 8001686:	f85d fb08 	ldr.w	pc, [sp], #8
 800168a:	bf00      	nop

0800168c <__aeabi_dcmpgt>:
 800168c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001690:	f7ff ffc4 	bl	800161c <__aeabi_cdrcmple>
 8001694:	bf34      	ite	cc
 8001696:	2001      	movcc	r0, #1
 8001698:	2000      	movcs	r0, #0
 800169a:	f85d fb08 	ldr.w	pc, [sp], #8
 800169e:	bf00      	nop

080016a0 <__aeabi_d2f>:
 80016a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80016a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80016a8:	bf24      	itt	cs
 80016aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80016ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80016b2:	d90d      	bls.n	80016d0 <__aeabi_d2f+0x30>
 80016b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80016b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80016bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80016c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80016c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80016c8:	bf08      	it	eq
 80016ca:	f020 0001 	biceq.w	r0, r0, #1
 80016ce:	4770      	bx	lr
 80016d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80016d4:	d121      	bne.n	800171a <__aeabi_d2f+0x7a>
 80016d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80016da:	bfbc      	itt	lt
 80016dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80016e0:	4770      	bxlt	lr
 80016e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80016e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80016ea:	f1c2 0218 	rsb	r2, r2, #24
 80016ee:	f1c2 0c20 	rsb	ip, r2, #32
 80016f2:	fa10 f30c 	lsls.w	r3, r0, ip
 80016f6:	fa20 f002 	lsr.w	r0, r0, r2
 80016fa:	bf18      	it	ne
 80016fc:	f040 0001 	orrne.w	r0, r0, #1
 8001700:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001704:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001708:	fa03 fc0c 	lsl.w	ip, r3, ip
 800170c:	ea40 000c 	orr.w	r0, r0, ip
 8001710:	fa23 f302 	lsr.w	r3, r3, r2
 8001714:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001718:	e7cc      	b.n	80016b4 <__aeabi_d2f+0x14>
 800171a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800171e:	d107      	bne.n	8001730 <__aeabi_d2f+0x90>
 8001720:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8001724:	bf1e      	ittt	ne
 8001726:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800172a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800172e:	4770      	bxne	lr
 8001730:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8001734:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001738:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop

08001740 <__aeabi_frsub>:
 8001740:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8001744:	e002      	b.n	800174c <__addsf3>
 8001746:	bf00      	nop

08001748 <__aeabi_fsub>:
 8001748:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800174c <__addsf3>:
 800174c:	0042      	lsls	r2, r0, #1
 800174e:	bf1f      	itttt	ne
 8001750:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8001754:	ea92 0f03 	teqne	r2, r3
 8001758:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800175c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001760:	d06a      	beq.n	8001838 <__addsf3+0xec>
 8001762:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8001766:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800176a:	bfc1      	itttt	gt
 800176c:	18d2      	addgt	r2, r2, r3
 800176e:	4041      	eorgt	r1, r0
 8001770:	4048      	eorgt	r0, r1
 8001772:	4041      	eorgt	r1, r0
 8001774:	bfb8      	it	lt
 8001776:	425b      	neglt	r3, r3
 8001778:	2b19      	cmp	r3, #25
 800177a:	bf88      	it	hi
 800177c:	4770      	bxhi	lr
 800177e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001782:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001786:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800178a:	bf18      	it	ne
 800178c:	4240      	negne	r0, r0
 800178e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001792:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001796:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800179a:	bf18      	it	ne
 800179c:	4249      	negne	r1, r1
 800179e:	ea92 0f03 	teq	r2, r3
 80017a2:	d03f      	beq.n	8001824 <__addsf3+0xd8>
 80017a4:	f1a2 0201 	sub.w	r2, r2, #1
 80017a8:	fa41 fc03 	asr.w	ip, r1, r3
 80017ac:	eb10 000c 	adds.w	r0, r0, ip
 80017b0:	f1c3 0320 	rsb	r3, r3, #32
 80017b4:	fa01 f103 	lsl.w	r1, r1, r3
 80017b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80017bc:	d502      	bpl.n	80017c4 <__addsf3+0x78>
 80017be:	4249      	negs	r1, r1
 80017c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80017c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80017c8:	d313      	bcc.n	80017f2 <__addsf3+0xa6>
 80017ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80017ce:	d306      	bcc.n	80017de <__addsf3+0x92>
 80017d0:	0840      	lsrs	r0, r0, #1
 80017d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80017d6:	f102 0201 	add.w	r2, r2, #1
 80017da:	2afe      	cmp	r2, #254	; 0xfe
 80017dc:	d251      	bcs.n	8001882 <__addsf3+0x136>
 80017de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80017e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80017e6:	bf08      	it	eq
 80017e8:	f020 0001 	biceq.w	r0, r0, #1
 80017ec:	ea40 0003 	orr.w	r0, r0, r3
 80017f0:	4770      	bx	lr
 80017f2:	0049      	lsls	r1, r1, #1
 80017f4:	eb40 0000 	adc.w	r0, r0, r0
 80017f8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80017fc:	f1a2 0201 	sub.w	r2, r2, #1
 8001800:	d1ed      	bne.n	80017de <__addsf3+0x92>
 8001802:	fab0 fc80 	clz	ip, r0
 8001806:	f1ac 0c08 	sub.w	ip, ip, #8
 800180a:	ebb2 020c 	subs.w	r2, r2, ip
 800180e:	fa00 f00c 	lsl.w	r0, r0, ip
 8001812:	bfaa      	itet	ge
 8001814:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8001818:	4252      	neglt	r2, r2
 800181a:	4318      	orrge	r0, r3
 800181c:	bfbc      	itt	lt
 800181e:	40d0      	lsrlt	r0, r2
 8001820:	4318      	orrlt	r0, r3
 8001822:	4770      	bx	lr
 8001824:	f092 0f00 	teq	r2, #0
 8001828:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800182c:	bf06      	itte	eq
 800182e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8001832:	3201      	addeq	r2, #1
 8001834:	3b01      	subne	r3, #1
 8001836:	e7b5      	b.n	80017a4 <__addsf3+0x58>
 8001838:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800183c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001840:	bf18      	it	ne
 8001842:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001846:	d021      	beq.n	800188c <__addsf3+0x140>
 8001848:	ea92 0f03 	teq	r2, r3
 800184c:	d004      	beq.n	8001858 <__addsf3+0x10c>
 800184e:	f092 0f00 	teq	r2, #0
 8001852:	bf08      	it	eq
 8001854:	4608      	moveq	r0, r1
 8001856:	4770      	bx	lr
 8001858:	ea90 0f01 	teq	r0, r1
 800185c:	bf1c      	itt	ne
 800185e:	2000      	movne	r0, #0
 8001860:	4770      	bxne	lr
 8001862:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8001866:	d104      	bne.n	8001872 <__addsf3+0x126>
 8001868:	0040      	lsls	r0, r0, #1
 800186a:	bf28      	it	cs
 800186c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8001870:	4770      	bx	lr
 8001872:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8001876:	bf3c      	itt	cc
 8001878:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800187c:	4770      	bxcc	lr
 800187e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8001882:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8001886:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800188a:	4770      	bx	lr
 800188c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8001890:	bf16      	itet	ne
 8001892:	4608      	movne	r0, r1
 8001894:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8001898:	4601      	movne	r1, r0
 800189a:	0242      	lsls	r2, r0, #9
 800189c:	bf06      	itte	eq
 800189e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80018a2:	ea90 0f01 	teqeq	r0, r1
 80018a6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80018aa:	4770      	bx	lr

080018ac <__aeabi_ui2f>:
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e004      	b.n	80018bc <__aeabi_i2f+0x8>
 80018b2:	bf00      	nop

080018b4 <__aeabi_i2f>:
 80018b4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80018b8:	bf48      	it	mi
 80018ba:	4240      	negmi	r0, r0
 80018bc:	ea5f 0c00 	movs.w	ip, r0
 80018c0:	bf08      	it	eq
 80018c2:	4770      	bxeq	lr
 80018c4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80018c8:	4601      	mov	r1, r0
 80018ca:	f04f 0000 	mov.w	r0, #0
 80018ce:	e01c      	b.n	800190a <__aeabi_l2f+0x2a>

080018d0 <__aeabi_ul2f>:
 80018d0:	ea50 0201 	orrs.w	r2, r0, r1
 80018d4:	bf08      	it	eq
 80018d6:	4770      	bxeq	lr
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	e00a      	b.n	80018f4 <__aeabi_l2f+0x14>
 80018de:	bf00      	nop

080018e0 <__aeabi_l2f>:
 80018e0:	ea50 0201 	orrs.w	r2, r0, r1
 80018e4:	bf08      	it	eq
 80018e6:	4770      	bxeq	lr
 80018e8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80018ec:	d502      	bpl.n	80018f4 <__aeabi_l2f+0x14>
 80018ee:	4240      	negs	r0, r0
 80018f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80018f4:	ea5f 0c01 	movs.w	ip, r1
 80018f8:	bf02      	ittt	eq
 80018fa:	4684      	moveq	ip, r0
 80018fc:	4601      	moveq	r1, r0
 80018fe:	2000      	moveq	r0, #0
 8001900:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8001904:	bf08      	it	eq
 8001906:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800190a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800190e:	fabc f28c 	clz	r2, ip
 8001912:	3a08      	subs	r2, #8
 8001914:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8001918:	db10      	blt.n	800193c <__aeabi_l2f+0x5c>
 800191a:	fa01 fc02 	lsl.w	ip, r1, r2
 800191e:	4463      	add	r3, ip
 8001920:	fa00 fc02 	lsl.w	ip, r0, r2
 8001924:	f1c2 0220 	rsb	r2, r2, #32
 8001928:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800192c:	fa20 f202 	lsr.w	r2, r0, r2
 8001930:	eb43 0002 	adc.w	r0, r3, r2
 8001934:	bf08      	it	eq
 8001936:	f020 0001 	biceq.w	r0, r0, #1
 800193a:	4770      	bx	lr
 800193c:	f102 0220 	add.w	r2, r2, #32
 8001940:	fa01 fc02 	lsl.w	ip, r1, r2
 8001944:	f1c2 0220 	rsb	r2, r2, #32
 8001948:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800194c:	fa21 f202 	lsr.w	r2, r1, r2
 8001950:	eb43 0002 	adc.w	r0, r3, r2
 8001954:	bf08      	it	eq
 8001956:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800195a:	4770      	bx	lr

0800195c <__aeabi_fmul>:
 800195c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001960:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001964:	bf1e      	ittt	ne
 8001966:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800196a:	ea92 0f0c 	teqne	r2, ip
 800196e:	ea93 0f0c 	teqne	r3, ip
 8001972:	d06f      	beq.n	8001a54 <__aeabi_fmul+0xf8>
 8001974:	441a      	add	r2, r3
 8001976:	ea80 0c01 	eor.w	ip, r0, r1
 800197a:	0240      	lsls	r0, r0, #9
 800197c:	bf18      	it	ne
 800197e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8001982:	d01e      	beq.n	80019c2 <__aeabi_fmul+0x66>
 8001984:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001988:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800198c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8001990:	fba0 3101 	umull	r3, r1, r0, r1
 8001994:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001998:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800199c:	bf3e      	ittt	cc
 800199e:	0049      	lslcc	r1, r1, #1
 80019a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80019a4:	005b      	lslcc	r3, r3, #1
 80019a6:	ea40 0001 	orr.w	r0, r0, r1
 80019aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80019ae:	2afd      	cmp	r2, #253	; 0xfd
 80019b0:	d81d      	bhi.n	80019ee <__aeabi_fmul+0x92>
 80019b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80019ba:	bf08      	it	eq
 80019bc:	f020 0001 	biceq.w	r0, r0, #1
 80019c0:	4770      	bx	lr
 80019c2:	f090 0f00 	teq	r0, #0
 80019c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80019ca:	bf08      	it	eq
 80019cc:	0249      	lsleq	r1, r1, #9
 80019ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80019d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80019d6:	3a7f      	subs	r2, #127	; 0x7f
 80019d8:	bfc2      	ittt	gt
 80019da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80019de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80019e2:	4770      	bxgt	lr
 80019e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	3a01      	subs	r2, #1
 80019ee:	dc5d      	bgt.n	8001aac <__aeabi_fmul+0x150>
 80019f0:	f112 0f19 	cmn.w	r2, #25
 80019f4:	bfdc      	itt	le
 80019f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80019fa:	4770      	bxle	lr
 80019fc:	f1c2 0200 	rsb	r2, r2, #0
 8001a00:	0041      	lsls	r1, r0, #1
 8001a02:	fa21 f102 	lsr.w	r1, r1, r2
 8001a06:	f1c2 0220 	rsb	r2, r2, #32
 8001a0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8001a0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8001a12:	f140 0000 	adc.w	r0, r0, #0
 8001a16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8001a1a:	bf08      	it	eq
 8001a1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8001a20:	4770      	bx	lr
 8001a22:	f092 0f00 	teq	r2, #0
 8001a26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001a2a:	bf02      	ittt	eq
 8001a2c:	0040      	lsleq	r0, r0, #1
 8001a2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001a32:	3a01      	subeq	r2, #1
 8001a34:	d0f9      	beq.n	8001a2a <__aeabi_fmul+0xce>
 8001a36:	ea40 000c 	orr.w	r0, r0, ip
 8001a3a:	f093 0f00 	teq	r3, #0
 8001a3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001a42:	bf02      	ittt	eq
 8001a44:	0049      	lsleq	r1, r1, #1
 8001a46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001a4a:	3b01      	subeq	r3, #1
 8001a4c:	d0f9      	beq.n	8001a42 <__aeabi_fmul+0xe6>
 8001a4e:	ea41 010c 	orr.w	r1, r1, ip
 8001a52:	e78f      	b.n	8001974 <__aeabi_fmul+0x18>
 8001a54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001a58:	ea92 0f0c 	teq	r2, ip
 8001a5c:	bf18      	it	ne
 8001a5e:	ea93 0f0c 	teqne	r3, ip
 8001a62:	d00a      	beq.n	8001a7a <__aeabi_fmul+0x11e>
 8001a64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001a68:	bf18      	it	ne
 8001a6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001a6e:	d1d8      	bne.n	8001a22 <__aeabi_fmul+0xc6>
 8001a70:	ea80 0001 	eor.w	r0, r0, r1
 8001a74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001a78:	4770      	bx	lr
 8001a7a:	f090 0f00 	teq	r0, #0
 8001a7e:	bf17      	itett	ne
 8001a80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8001a84:	4608      	moveq	r0, r1
 8001a86:	f091 0f00 	teqne	r1, #0
 8001a8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8001a8e:	d014      	beq.n	8001aba <__aeabi_fmul+0x15e>
 8001a90:	ea92 0f0c 	teq	r2, ip
 8001a94:	d101      	bne.n	8001a9a <__aeabi_fmul+0x13e>
 8001a96:	0242      	lsls	r2, r0, #9
 8001a98:	d10f      	bne.n	8001aba <__aeabi_fmul+0x15e>
 8001a9a:	ea93 0f0c 	teq	r3, ip
 8001a9e:	d103      	bne.n	8001aa8 <__aeabi_fmul+0x14c>
 8001aa0:	024b      	lsls	r3, r1, #9
 8001aa2:	bf18      	it	ne
 8001aa4:	4608      	movne	r0, r1
 8001aa6:	d108      	bne.n	8001aba <__aeabi_fmul+0x15e>
 8001aa8:	ea80 0001 	eor.w	r0, r0, r1
 8001aac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8001ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001ab8:	4770      	bx	lr
 8001aba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8001abe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8001ac2:	4770      	bx	lr

08001ac4 <__aeabi_fdiv>:
 8001ac4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001ac8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001acc:	bf1e      	ittt	ne
 8001ace:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8001ad2:	ea92 0f0c 	teqne	r2, ip
 8001ad6:	ea93 0f0c 	teqne	r3, ip
 8001ada:	d069      	beq.n	8001bb0 <__aeabi_fdiv+0xec>
 8001adc:	eba2 0203 	sub.w	r2, r2, r3
 8001ae0:	ea80 0c01 	eor.w	ip, r0, r1
 8001ae4:	0249      	lsls	r1, r1, #9
 8001ae6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001aea:	d037      	beq.n	8001b5c <__aeabi_fdiv+0x98>
 8001aec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001af0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001af4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001af8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001afc:	428b      	cmp	r3, r1
 8001afe:	bf38      	it	cc
 8001b00:	005b      	lslcc	r3, r3, #1
 8001b02:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001b06:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001b0a:	428b      	cmp	r3, r1
 8001b0c:	bf24      	itt	cs
 8001b0e:	1a5b      	subcs	r3, r3, r1
 8001b10:	ea40 000c 	orrcs.w	r0, r0, ip
 8001b14:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001b18:	bf24      	itt	cs
 8001b1a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001b1e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001b22:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001b26:	bf24      	itt	cs
 8001b28:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001b2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001b30:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001b34:	bf24      	itt	cs
 8001b36:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001b3a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	bf18      	it	ne
 8001b42:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001b46:	d1e0      	bne.n	8001b0a <__aeabi_fdiv+0x46>
 8001b48:	2afd      	cmp	r2, #253	; 0xfd
 8001b4a:	f63f af50 	bhi.w	80019ee <__aeabi_fmul+0x92>
 8001b4e:	428b      	cmp	r3, r1
 8001b50:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001b54:	bf08      	it	eq
 8001b56:	f020 0001 	biceq.w	r0, r0, #1
 8001b5a:	4770      	bx	lr
 8001b5c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001b60:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001b64:	327f      	adds	r2, #127	; 0x7f
 8001b66:	bfc2      	ittt	gt
 8001b68:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001b6c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001b70:	4770      	bxgt	lr
 8001b72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	3a01      	subs	r2, #1
 8001b7c:	e737      	b.n	80019ee <__aeabi_fmul+0x92>
 8001b7e:	f092 0f00 	teq	r2, #0
 8001b82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001b86:	bf02      	ittt	eq
 8001b88:	0040      	lsleq	r0, r0, #1
 8001b8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001b8e:	3a01      	subeq	r2, #1
 8001b90:	d0f9      	beq.n	8001b86 <__aeabi_fdiv+0xc2>
 8001b92:	ea40 000c 	orr.w	r0, r0, ip
 8001b96:	f093 0f00 	teq	r3, #0
 8001b9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001b9e:	bf02      	ittt	eq
 8001ba0:	0049      	lsleq	r1, r1, #1
 8001ba2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001ba6:	3b01      	subeq	r3, #1
 8001ba8:	d0f9      	beq.n	8001b9e <__aeabi_fdiv+0xda>
 8001baa:	ea41 010c 	orr.w	r1, r1, ip
 8001bae:	e795      	b.n	8001adc <__aeabi_fdiv+0x18>
 8001bb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001bb4:	ea92 0f0c 	teq	r2, ip
 8001bb8:	d108      	bne.n	8001bcc <__aeabi_fdiv+0x108>
 8001bba:	0242      	lsls	r2, r0, #9
 8001bbc:	f47f af7d 	bne.w	8001aba <__aeabi_fmul+0x15e>
 8001bc0:	ea93 0f0c 	teq	r3, ip
 8001bc4:	f47f af70 	bne.w	8001aa8 <__aeabi_fmul+0x14c>
 8001bc8:	4608      	mov	r0, r1
 8001bca:	e776      	b.n	8001aba <__aeabi_fmul+0x15e>
 8001bcc:	ea93 0f0c 	teq	r3, ip
 8001bd0:	d104      	bne.n	8001bdc <__aeabi_fdiv+0x118>
 8001bd2:	024b      	lsls	r3, r1, #9
 8001bd4:	f43f af4c 	beq.w	8001a70 <__aeabi_fmul+0x114>
 8001bd8:	4608      	mov	r0, r1
 8001bda:	e76e      	b.n	8001aba <__aeabi_fmul+0x15e>
 8001bdc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001be0:	bf18      	it	ne
 8001be2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001be6:	d1ca      	bne.n	8001b7e <__aeabi_fdiv+0xba>
 8001be8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001bec:	f47f af5c 	bne.w	8001aa8 <__aeabi_fmul+0x14c>
 8001bf0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001bf4:	f47f af3c 	bne.w	8001a70 <__aeabi_fmul+0x114>
 8001bf8:	e75f      	b.n	8001aba <__aeabi_fmul+0x15e>
 8001bfa:	bf00      	nop

08001bfc <__gesf2>:
 8001bfc:	f04f 3cff 	mov.w	ip, #4294967295
 8001c00:	e006      	b.n	8001c10 <__cmpsf2+0x4>
 8001c02:	bf00      	nop

08001c04 <__lesf2>:
 8001c04:	f04f 0c01 	mov.w	ip, #1
 8001c08:	e002      	b.n	8001c10 <__cmpsf2+0x4>
 8001c0a:	bf00      	nop

08001c0c <__cmpsf2>:
 8001c0c:	f04f 0c01 	mov.w	ip, #1
 8001c10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001c14:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001c18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001c1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001c20:	bf18      	it	ne
 8001c22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001c26:	d011      	beq.n	8001c4c <__cmpsf2+0x40>
 8001c28:	b001      	add	sp, #4
 8001c2a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001c2e:	bf18      	it	ne
 8001c30:	ea90 0f01 	teqne	r0, r1
 8001c34:	bf58      	it	pl
 8001c36:	ebb2 0003 	subspl.w	r0, r2, r3
 8001c3a:	bf88      	it	hi
 8001c3c:	17c8      	asrhi	r0, r1, #31
 8001c3e:	bf38      	it	cc
 8001c40:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001c44:	bf18      	it	ne
 8001c46:	f040 0001 	orrne.w	r0, r0, #1
 8001c4a:	4770      	bx	lr
 8001c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001c50:	d102      	bne.n	8001c58 <__cmpsf2+0x4c>
 8001c52:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001c56:	d105      	bne.n	8001c64 <__cmpsf2+0x58>
 8001c58:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001c5c:	d1e4      	bne.n	8001c28 <__cmpsf2+0x1c>
 8001c5e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001c62:	d0e1      	beq.n	8001c28 <__cmpsf2+0x1c>
 8001c64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop

08001c6c <__aeabi_cfrcmple>:
 8001c6c:	4684      	mov	ip, r0
 8001c6e:	4608      	mov	r0, r1
 8001c70:	4661      	mov	r1, ip
 8001c72:	e7ff      	b.n	8001c74 <__aeabi_cfcmpeq>

08001c74 <__aeabi_cfcmpeq>:
 8001c74:	b50f      	push	{r0, r1, r2, r3, lr}
 8001c76:	f7ff ffc9 	bl	8001c0c <__cmpsf2>
 8001c7a:	2800      	cmp	r0, #0
 8001c7c:	bf48      	it	mi
 8001c7e:	f110 0f00 	cmnmi.w	r0, #0
 8001c82:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001c84 <__aeabi_fcmpeq>:
 8001c84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001c88:	f7ff fff4 	bl	8001c74 <__aeabi_cfcmpeq>
 8001c8c:	bf0c      	ite	eq
 8001c8e:	2001      	moveq	r0, #1
 8001c90:	2000      	movne	r0, #0
 8001c92:	f85d fb08 	ldr.w	pc, [sp], #8
 8001c96:	bf00      	nop

08001c98 <__aeabi_fcmplt>:
 8001c98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001c9c:	f7ff ffea 	bl	8001c74 <__aeabi_cfcmpeq>
 8001ca0:	bf34      	ite	cc
 8001ca2:	2001      	movcc	r0, #1
 8001ca4:	2000      	movcs	r0, #0
 8001ca6:	f85d fb08 	ldr.w	pc, [sp], #8
 8001caa:	bf00      	nop

08001cac <__aeabi_fcmple>:
 8001cac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001cb0:	f7ff ffe0 	bl	8001c74 <__aeabi_cfcmpeq>
 8001cb4:	bf94      	ite	ls
 8001cb6:	2001      	movls	r0, #1
 8001cb8:	2000      	movhi	r0, #0
 8001cba:	f85d fb08 	ldr.w	pc, [sp], #8
 8001cbe:	bf00      	nop

08001cc0 <__aeabi_fcmpge>:
 8001cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001cc4:	f7ff ffd2 	bl	8001c6c <__aeabi_cfrcmple>
 8001cc8:	bf94      	ite	ls
 8001cca:	2001      	movls	r0, #1
 8001ccc:	2000      	movhi	r0, #0
 8001cce:	f85d fb08 	ldr.w	pc, [sp], #8
 8001cd2:	bf00      	nop

08001cd4 <__aeabi_fcmpgt>:
 8001cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001cd8:	f7ff ffc8 	bl	8001c6c <__aeabi_cfrcmple>
 8001cdc:	bf34      	ite	cc
 8001cde:	2001      	movcc	r0, #1
 8001ce0:	2000      	movcs	r0, #0
 8001ce2:	f85d fb08 	ldr.w	pc, [sp], #8
 8001ce6:	bf00      	nop

08001ce8 <__errno>:
 8001ce8:	f240 0304 	movw	r3, #4
 8001cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	4770      	bx	lr

08001cf4 <__libc_init_array>:
 8001cf4:	b570      	push	{r4, r5, r6, lr}
 8001cf6:	f644 665c 	movw	r6, #20060	; 0x4e5c
 8001cfa:	f644 655c 	movw	r5, #20060	; 0x4e5c
 8001cfe:	f6c0 0600 	movt	r6, #2048	; 0x800
 8001d02:	f6c0 0500 	movt	r5, #2048	; 0x800
 8001d06:	1b76      	subs	r6, r6, r5
 8001d08:	10b6      	asrs	r6, r6, #2
 8001d0a:	d007      	beq.n	8001d1c <__libc_init_array+0x28>
 8001d0c:	3d04      	subs	r5, #4
 8001d0e:	2400      	movs	r4, #0
 8001d10:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8001d14:	3401      	adds	r4, #1
 8001d16:	4798      	blx	r3
 8001d18:	42a6      	cmp	r6, r4
 8001d1a:	d1f9      	bne.n	8001d10 <__libc_init_array+0x1c>
 8001d1c:	f644 6660 	movw	r6, #20064	; 0x4e60
 8001d20:	f644 655c 	movw	r5, #20060	; 0x4e5c
 8001d24:	f6c0 0600 	movt	r6, #2048	; 0x800
 8001d28:	f6c0 0500 	movt	r5, #2048	; 0x800
 8001d2c:	1b76      	subs	r6, r6, r5
 8001d2e:	f003 f889 	bl	8004e44 <_init>
 8001d32:	10b6      	asrs	r6, r6, #2
 8001d34:	d008      	beq.n	8001d48 <__libc_init_array+0x54>
 8001d36:	3d04      	subs	r5, #4
 8001d38:	2400      	movs	r4, #0
 8001d3a:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8001d3e:	3401      	adds	r4, #1
 8001d40:	4798      	blx	r3
 8001d42:	42a6      	cmp	r6, r4
 8001d44:	d1f9      	bne.n	8001d3a <__libc_init_array+0x46>
 8001d46:	bd70      	pop	{r4, r5, r6, pc}
 8001d48:	bd70      	pop	{r4, r5, r6, pc}
 8001d4a:	bf00      	nop

08001d4c <Reset_Handler>:
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	f000 b804 	b.w	8001d5a <LoopCopyDataInit>

08001d52 <CopyDataInit>:
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <LoopForever+0x6>)
 8001d54:	585b      	ldr	r3, [r3, r1]
 8001d56:	5043      	str	r3, [r0, r1]
 8001d58:	3104      	adds	r1, #4

08001d5a <LoopCopyDataInit>:
 8001d5a:	480d      	ldr	r0, [pc, #52]	; (8001d90 <LoopForever+0xa>)
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <LoopForever+0xe>)
 8001d5e:	1842      	adds	r2, r0, r1
 8001d60:	429a      	cmp	r2, r3
 8001d62:	f4ff aff6 	bcc.w	8001d52 <CopyDataInit>
 8001d66:	4a0c      	ldr	r2, [pc, #48]	; (8001d98 <LoopForever+0x12>)
 8001d68:	f000 b803 	b.w	8001d72 <LoopFillZerobss>

08001d6c <FillZerobss>:
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f842 3b04 	str.w	r3, [r2], #4

08001d72 <LoopFillZerobss>:
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <LoopForever+0x16>)
 8001d74:	429a      	cmp	r2, r3
 8001d76:	f4ff aff9 	bcc.w	8001d6c <FillZerobss>
 8001d7a:	f000 f813 	bl	8001da4 <SystemInit>
 8001d7e:	f7ff ffb9 	bl	8001cf4 <__libc_init_array>
 8001d82:	f000 f925 	bl	8001fd0 <main>

08001d86 <LoopForever>:
 8001d86:	f7ff bffe 	b.w	8001d86 <LoopForever>
 8001d8a:	0000      	.short	0x0000
 8001d8c:	08004e64 	.word	0x08004e64
 8001d90:	20000000 	.word	0x20000000
 8001d94:	20000150 	.word	0x20000150
 8001d98:	20000150 	.word	0x20000150
 8001d9c:	20000210 	.word	0x20000210

08001da0 <ADC1_2_IRQHandler>:
 8001da0:	f7ff bffe 	b.w	8001da0 <ADC1_2_IRQHandler>

08001da4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <SystemInit+0x84>)
 8001daa:	4a1f      	ldr	r2, [pc, #124]	; (8001e28 <SystemInit+0x84>)
 8001dac:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8001db0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001db4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <SystemInit+0x88>)
 8001dba:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <SystemInit+0x88>)
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8001dc4:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <SystemInit+0x88>)
 8001dc6:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <SystemInit+0x88>)
 8001dc8:	6859      	ldr	r1, [r3, #4]
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <SystemInit+0x8c>)
 8001dcc:	400b      	ands	r3, r1
 8001dce:	6053      	str	r3, [r2, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001dd0:	4a16      	ldr	r2, [pc, #88]	; (8001e2c <SystemInit+0x88>)
 8001dd2:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <SystemInit+0x88>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dde:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <SystemInit+0x88>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <SystemInit+0x88>)
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dea:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <SystemInit+0x88>)
 8001dee:	4a0f      	ldr	r2, [pc, #60]	; (8001e2c <SystemInit+0x88>)
 8001df0:	6852      	ldr	r2, [r2, #4]
 8001df2:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001df6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <SystemInit+0x88>)
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <SystemInit+0x88>)
 8001dfc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dfe:	f022 020f 	bic.w	r2, r2, #15
 8001e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001e04:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <SystemInit+0x88>)
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <SystemInit+0x88>)
 8001e08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <SystemInit+0x90>)
 8001e0c:	400b      	ands	r3, r1
 8001e0e:	6313      	str	r3, [r2, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <SystemInit+0x88>)
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001e18:	f000 f80e 	bl	8001e38 <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e1c:	4b02      	ldr	r3, [pc, #8]	; (8001e28 <SystemInit+0x84>)
 8001e1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e22:	609a      	str	r2, [r3, #8]
#endif  
}
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	f87fc00c 	.word	0xf87fc00c
 8001e34:	ff00fccc 	.word	0xff00fccc

08001e38 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	603b      	str	r3, [r7, #0]
 #if defined (PLL_SOURCE_HSE)
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 #elif defined (PLL_SOURCE_HSE_BYPASS)
  /* HSE oscillator bypassed with external clock */    
  RCC->CR |= (uint32_t)(RCC_CR_HSEON | RCC_CR_HSEBYP);
 8001e4a:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <SetSysClock+0xe4>)
 8001e4c:	4a33      	ldr	r2, [pc, #204]	; (8001f1c <SetSysClock+0xe4>)
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8001e54:	601a      	str	r2, [r3, #0]
 #endif /* PLL_SOURCE_HSE */
   
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001e56:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <SetSysClock+0xe4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f103 0301 	add.w	r3, r3, #1
 8001e66:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d103      	bne.n	8001e76 <SetSysClock+0x3e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001e74:	d1ef      	bne.n	8001e56 <SetSysClock+0x1e>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001e76:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <SetSysClock+0xe4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <SetSysClock+0x52>
  {
    HSEStatus = (uint32_t)0x01;
 8001e82:	f04f 0301 	mov.w	r3, #1
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	e002      	b.n	8001e90 <SetSysClock+0x58>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d13d      	bne.n	8001f12 <SetSysClock+0xda>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 8001e96:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <SetSysClock+0xe8>)
 8001e98:	f04f 0212 	mov.w	r2, #18
 8001e9c:	601a      	str	r2, [r3, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <SetSysClock+0xe4>)
 8001ea0:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <SetSysClock+0xe4>)
 8001ea2:	6852      	ldr	r2, [r2, #4]
 8001ea4:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <SetSysClock+0xe4>)
 8001ea8:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <SetSysClock+0xe4>)
 8001eaa:	6852      	ldr	r2, [r2, #4]
 8001eac:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001eae:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <SetSysClock+0xe4>)
 8001eb0:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <SetSysClock+0xe4>)
 8001eb2:	6852      	ldr	r2, [r2, #4]
 8001eb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001eb8:	605a      	str	r2, [r3, #4]
    
   
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001eba:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <SetSysClock+0xe4>)
 8001ebc:	4a17      	ldr	r2, [pc, #92]	; (8001f1c <SetSysClock+0xe4>)
 8001ebe:	6852      	ldr	r2, [r2, #4]
 8001ec0:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8001ec4:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLMULL9);
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <SetSysClock+0xe4>)
 8001ec8:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <SetSysClock+0xe4>)
 8001eca:	6852      	ldr	r2, [r2, #4]
 8001ecc:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8001ed0:	605a      	str	r2, [r3, #4]
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <SetSysClock+0xe4>)
 8001ed4:	4a11      	ldr	r2, [pc, #68]	; (8001f1c <SetSysClock+0xe4>)
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001edc:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001ede:	bf00      	nop
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <SetSysClock+0xe4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f9      	beq.n	8001ee0 <SetSysClock+0xa8>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <SetSysClock+0xe4>)
 8001eee:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <SetSysClock+0xe4>)
 8001ef0:	6852      	ldr	r2, [r2, #4]
 8001ef2:	f022 0203 	bic.w	r2, r2, #3
 8001ef6:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <SetSysClock+0xe4>)
 8001efa:	4a08      	ldr	r2, [pc, #32]	; (8001f1c <SetSysClock+0xe4>)
 8001efc:	6852      	ldr	r2, [r2, #4]
 8001efe:	f042 0202 	orr.w	r2, r2, #2
 8001f02:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001f04:	bf00      	nop
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <SetSysClock+0xe4>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d1f9      	bne.n	8001f06 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
#endif /* PLL_SOURCE_HSI */  
}
 8001f12:	f107 070c 	add.w	r7, r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40022000 	.word	0x40022000

08001f24 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	da0d      	bge.n	8001f54 <NVIC_SetPriority+0x30>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001f38:	490e      	ldr	r1, [pc, #56]	; (8001f74 <NVIC_SetPriority+0x50>)
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	f1a3 0304 	sub.w	r3, r3, #4
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	18cb      	adds	r3, r1, r3
 8001f50:	761a      	strb	r2, [r3, #24]
 8001f52:	e00a      	b.n	8001f6a <NVIC_SetPriority+0x46>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001f54:	4908      	ldr	r1, [pc, #32]	; (8001f78 <NVIC_SetPriority+0x54>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	18cb      	adds	r3, r1, r3
 8001f66:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f6a:	f107 070c 	add.w	r7, r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00
 8001f78:	e000e100 	.word	0xe000e100

08001f7c <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d902      	bls.n	8001f94 <SysTick_Config+0x18>
 8001f8e:	f04f 0301 	mov.w	r3, #1
 8001f92:	e016      	b.n	8001fc2 <SysTick_Config+0x46>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <SysTick_Config+0x50>)
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001f9c:	f102 32ff 	add.w	r2, r2, #4294967295
 8001fa0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8001fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa6:	f04f 010f 	mov.w	r1, #15
 8001faa:	f7ff ffbb 	bl	8001f24 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <SysTick_Config+0x50>)
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <SysTick_Config+0x50>)
 8001fb8:	f04f 0207 	mov.w	r2, #7
 8001fbc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8001fbe:	f04f 0300 	mov.w	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f107 0708 	add.w	r7, r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	e000e010 	.word	0xe000e010

08001fd0 <main>:
  * @brief  Main program.
  * @param  None 
  * @retval None
  */
int main(void)
{  
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	71fb      	strb	r3, [r7, #7]
  /* SysTick end of count event each 10ms */
  RCC_GetClocksFreq(&RCC_Clocks);
 8001fdc:	48d9      	ldr	r0, [pc, #868]	; (8002344 <main+0x374>)
 8001fde:	f002 fbd9 	bl	8004794 <RCC_GetClocksFreq>
 SysTick_Config(RCC_Clocks.HCLK_Frequency / 100);
 8001fe2:	4bd8      	ldr	r3, [pc, #864]	; (8002344 <main+0x374>)
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	4bd8      	ldr	r3, [pc, #864]	; (8002348 <main+0x378>)
 8001fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fec:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ffc3 	bl	8001f7c <SysTick_Config>
  
  /* Initialize LEDs and User Button available on STM32F3-Discovery board */
  STM_EVAL_LEDInit(LED3);
 8001ff6:	f04f 0000 	mov.w	r0, #0
 8001ffa:	f001 fe93 	bl	8003d24 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 8001ffe:	f04f 0001 	mov.w	r0, #1
 8002002:	f001 fe8f 	bl	8003d24 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED5);
 8002006:	f04f 0002 	mov.w	r0, #2
 800200a:	f001 fe8b 	bl	8003d24 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED6);
 800200e:	f04f 0003 	mov.w	r0, #3
 8002012:	f001 fe87 	bl	8003d24 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED7);
 8002016:	f04f 0004 	mov.w	r0, #4
 800201a:	f001 fe83 	bl	8003d24 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED8);
 800201e:	f04f 0005 	mov.w	r0, #5
 8002022:	f001 fe7f 	bl	8003d24 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED9);
 8002026:	f04f 0006 	mov.w	r0, #6
 800202a:	f001 fe7b 	bl	8003d24 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED10);
 800202e:	f04f 0007 	mov.w	r0, #7
 8002032:	f001 fe77 	bl	8003d24 <STM_EVAL_LEDInit>
  
  STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_EXTI); 
 8002036:	f04f 0000 	mov.w	r0, #0
 800203a:	f04f 0101 	mov.w	r1, #1
 800203e:	f001 fef5 	bl	8003e2c <STM_EVAL_PBInit>

  /* Configure the USB */
  //Demo_USB();
  
  /* Reset UserButton_Pressed variable */
  UserButtonPressed = 0x00; 
 8002042:	4bc2      	ldr	r3, [pc, #776]	; (800234c <main+0x37c>)
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
   
  /* Infinite loop */
  while (1)
  {   
    /* LEDs Off */
    STM_EVAL_LEDOff(LED3);
 800204a:	f04f 0000 	mov.w	r0, #0
 800204e:	f001 feb5 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED6);
 8002052:	f04f 0003 	mov.w	r0, #3
 8002056:	f001 feb1 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED7);
 800205a:	f04f 0004 	mov.w	r0, #4
 800205e:	f001 fead 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED4);
 8002062:	f04f 0001 	mov.w	r0, #1
 8002066:	f001 fea9 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED10);
 800206a:	f04f 0007 	mov.w	r0, #7
 800206e:	f001 fea5 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED8);
 8002072:	f04f 0005 	mov.w	r0, #5
 8002076:	f001 fea1 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED9);
 800207a:	f04f 0006 	mov.w	r0, #6
 800207e:	f001 fe9d 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED5);
 8002082:	f04f 0002 	mov.w	r0, #2
 8002086:	f001 fe99 	bl	8003dbc <STM_EVAL_LEDOff>
    
    /* Waiting User Button is pressed */
    while (UserButtonPressed == 0x00)
 800208a:	e03f      	b.n	800210c <main+0x13c>
    {
      /* Toggle LD3 */
      STM_EVAL_LEDToggle(LED3);
 800208c:	f04f 0000 	mov.w	r0, #0
 8002090:	f001 feac 	bl	8003dec <STM_EVAL_LEDToggle>
      /* Insert 50 ms delay */
      Delay(5);
 8002094:	f04f 0005 	mov.w	r0, #5
 8002098:	f001 f9a0 	bl	80033dc <Delay>
      /* Toggle LD5 */
      STM_EVAL_LEDToggle(LED5);
 800209c:	f04f 0002 	mov.w	r0, #2
 80020a0:	f001 fea4 	bl	8003dec <STM_EVAL_LEDToggle>
      /* Insert 50 ms delay */
      Delay(5);
 80020a4:	f04f 0005 	mov.w	r0, #5
 80020a8:	f001 f998 	bl	80033dc <Delay>
      /* Toggle LD7 */
      STM_EVAL_LEDToggle(LED7);
 80020ac:	f04f 0004 	mov.w	r0, #4
 80020b0:	f001 fe9c 	bl	8003dec <STM_EVAL_LEDToggle>
      /* Insert 50 ms delay */
      Delay(5);
 80020b4:	f04f 0005 	mov.w	r0, #5
 80020b8:	f001 f990 	bl	80033dc <Delay>
      /* Toggle LD9 */
      STM_EVAL_LEDToggle(LED9);
 80020bc:	f04f 0006 	mov.w	r0, #6
 80020c0:	f001 fe94 	bl	8003dec <STM_EVAL_LEDToggle>
      /* Insert 50 ms delay */
      Delay(5);
 80020c4:	f04f 0005 	mov.w	r0, #5
 80020c8:	f001 f988 	bl	80033dc <Delay>
      /* Toggle LD10 */
      STM_EVAL_LEDToggle(LED10);
 80020cc:	f04f 0007 	mov.w	r0, #7
 80020d0:	f001 fe8c 	bl	8003dec <STM_EVAL_LEDToggle>
      /* Insert 50 ms delay */
      Delay(5);
 80020d4:	f04f 0005 	mov.w	r0, #5
 80020d8:	f001 f980 	bl	80033dc <Delay>
      /* Toggle LD8 */
      STM_EVAL_LEDToggle(LED8);
 80020dc:	f04f 0005 	mov.w	r0, #5
 80020e0:	f001 fe84 	bl	8003dec <STM_EVAL_LEDToggle>
      /* Insert 50 ms delay */
      Delay(5); 
 80020e4:	f04f 0005 	mov.w	r0, #5
 80020e8:	f001 f978 	bl	80033dc <Delay>
      /* Toggle LD6 */
      STM_EVAL_LEDToggle(LED6);
 80020ec:	f04f 0003 	mov.w	r0, #3
 80020f0:	f001 fe7c 	bl	8003dec <STM_EVAL_LEDToggle>
      /* Insert 50 ms delay */
      Delay(5);
 80020f4:	f04f 0005 	mov.w	r0, #5
 80020f8:	f001 f970 	bl	80033dc <Delay>
      /* Toggle LD4 */
      STM_EVAL_LEDToggle(LED4);
 80020fc:	f04f 0001 	mov.w	r0, #1
 8002100:	f001 fe74 	bl	8003dec <STM_EVAL_LEDToggle>
      /* Insert 50 ms delay */
      Delay(5);
 8002104:	f04f 0005 	mov.w	r0, #5
 8002108:	f001 f968 	bl	80033dc <Delay>
    STM_EVAL_LEDOff(LED8);
    STM_EVAL_LEDOff(LED9);
    STM_EVAL_LEDOff(LED5);
    
    /* Waiting User Button is pressed */
    while (UserButtonPressed == 0x00)
 800210c:	4b8f      	ldr	r3, [pc, #572]	; (800234c <main+0x37c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0bb      	beq.n	800208c <main+0xbc>
      STM_EVAL_LEDToggle(LED4);
      /* Insert 50 ms delay */
      Delay(5);
    }
    
    DataReady = 0x00;
 8002114:	4b8e      	ldr	r3, [pc, #568]	; (8002350 <main+0x380>)
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
    
    /* All LEDs Off */
    STM_EVAL_LEDOff(LED3);
 800211c:	f04f 0000 	mov.w	r0, #0
 8002120:	f001 fe4c 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED6);
 8002124:	f04f 0003 	mov.w	r0, #3
 8002128:	f001 fe48 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED7);
 800212c:	f04f 0004 	mov.w	r0, #4
 8002130:	f001 fe44 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED4);
 8002134:	f04f 0001 	mov.w	r0, #1
 8002138:	f001 fe40 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED10);
 800213c:	f04f 0007 	mov.w	r0, #7
 8002140:	f001 fe3c 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED8);
 8002144:	f04f 0005 	mov.w	r0, #5
 8002148:	f001 fe38 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED9);
 800214c:	f04f 0006 	mov.w	r0, #6
 8002150:	f001 fe34 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED5); 
 8002154:	f04f 0002 	mov.w	r0, #2
 8002158:	f001 fe30 	bl	8003dbc <STM_EVAL_LEDOff>
    
    /* Demo Gyroscope */
   // Demo_GyroConfig();

    /* Waiting User Button is pressed */
    while (UserButtonPressed == 0x01)
 800215c:	e0b1      	b.n	80022c2 <main+0x2f2>
    {
      /* Wait for data ready */
      while(DataReady != 0x05)
 800215e:	bf00      	nop
 8002160:	4b7b      	ldr	r3, [pc, #492]	; (8002350 <main+0x380>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b05      	cmp	r3, #5
 8002168:	d1fa      	bne.n	8002160 <main+0x190>
      {}
      DataReady = 0x00;
 800216a:	4b79      	ldr	r3, [pc, #484]	; (8002350 <main+0x380>)
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
      
      /* LEDs Off */
      STM_EVAL_LEDOff(LED3);
 8002172:	f04f 0000 	mov.w	r0, #0
 8002176:	f001 fe21 	bl	8003dbc <STM_EVAL_LEDOff>
      STM_EVAL_LEDOff(LED6);
 800217a:	f04f 0003 	mov.w	r0, #3
 800217e:	f001 fe1d 	bl	8003dbc <STM_EVAL_LEDOff>
      STM_EVAL_LEDOff(LED7);
 8002182:	f04f 0004 	mov.w	r0, #4
 8002186:	f001 fe19 	bl	8003dbc <STM_EVAL_LEDOff>
      STM_EVAL_LEDOff(LED4);
 800218a:	f04f 0001 	mov.w	r0, #1
 800218e:	f001 fe15 	bl	8003dbc <STM_EVAL_LEDOff>
      STM_EVAL_LEDOff(LED10);
 8002192:	f04f 0007 	mov.w	r0, #7
 8002196:	f001 fe11 	bl	8003dbc <STM_EVAL_LEDOff>
      STM_EVAL_LEDOff(LED8);
 800219a:	f04f 0005 	mov.w	r0, #5
 800219e:	f001 fe0d 	bl	8003dbc <STM_EVAL_LEDOff>
      STM_EVAL_LEDOff(LED9);
 80021a2:	f04f 0006 	mov.w	r0, #6
 80021a6:	f001 fe09 	bl	8003dbc <STM_EVAL_LEDOff>
      STM_EVAL_LEDOff(LED5);
 80021aa:	f04f 0002 	mov.w	r0, #2
 80021ae:	f001 fe05 	bl	8003dbc <STM_EVAL_LEDOff>
      
      /* Read Gyro Angular data */
      Demo_GyroReadAngRate(Buffer);
 80021b2:	4868      	ldr	r0, [pc, #416]	; (8002354 <main+0x384>)
 80021b4:	f000 fe08 	bl	8002dc8 <Demo_GyroReadAngRate>
         
      /* Update autoreload and capture compare registers value*/
      Xval = ABS((int8_t)(Buffer[0]));
 80021b8:	4b66      	ldr	r3, [pc, #408]	; (8002354 <main+0x384>)
 80021ba:	edd3 7a00 	vldr	s15, [r3]
 80021be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021c2:	ee17 3a90 	vmov	r3, s15
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	b25b      	sxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bfb8      	it	lt
 80021ce:	425b      	neglt	r3, r3
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b61      	ldr	r3, [pc, #388]	; (8002358 <main+0x388>)
 80021d4:	701a      	strb	r2, [r3, #0]
      Yval = ABS((int8_t)(Buffer[1])); 
 80021d6:	4b5f      	ldr	r3, [pc, #380]	; (8002354 <main+0x384>)
 80021d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80021dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021e0:	ee17 3a90 	vmov	r3, s15
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	b25b      	sxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bfb8      	it	lt
 80021ec:	425b      	neglt	r3, r3
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	4b5a      	ldr	r3, [pc, #360]	; (800235c <main+0x38c>)
 80021f2:	701a      	strb	r2, [r3, #0]
      
      if ( Xval>Yval)
 80021f4:	4b58      	ldr	r3, [pc, #352]	; (8002358 <main+0x388>)
 80021f6:	781a      	ldrb	r2, [r3, #0]
 80021f8:	4b58      	ldr	r3, [pc, #352]	; (800235c <main+0x38c>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d930      	bls.n	8002262 <main+0x292>
      {
        if ((int8_t)Buffer[0] > 5.0f)
 8002200:	4b54      	ldr	r3, [pc, #336]	; (8002354 <main+0x384>)
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800220a:	ee17 3a90 	vmov	r3, s15
 800220e:	b2db      	uxtb	r3, r3
 8002210:	b25b      	sxtb	r3, r3
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800221a:	eef1 7a04 	vmov.f32	s15, #20
 800221e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002226:	dd03      	ble.n	8002230 <main+0x260>
        { 
          /* LD10 On */
          STM_EVAL_LEDOn(LED10);
 8002228:	f04f 0007 	mov.w	r0, #7
 800222c:	f001 fdae 	bl	8003d8c <STM_EVAL_LEDOn>
        }
        if ((int8_t)Buffer[0] < -5.0f)
 8002230:	4b48      	ldr	r3, [pc, #288]	; (8002354 <main+0x384>)
 8002232:	edd3 7a00 	vldr	s15, [r3]
 8002236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800223a:	ee17 3a90 	vmov	r3, s15
 800223e:	b2db      	uxtb	r3, r3
 8002240:	b25b      	sxtb	r3, r3
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800224a:	eef9 7a04 	vmov.f32	s15, #148	; 0x94
 800224e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002256:	d534      	bpl.n	80022c2 <main+0x2f2>
        { 
          /* LD3 On */
          STM_EVAL_LEDOn(LED3);
 8002258:	f04f 0000 	mov.w	r0, #0
 800225c:	f001 fd96 	bl	8003d8c <STM_EVAL_LEDOn>
 8002260:	e02f      	b.n	80022c2 <main+0x2f2>
        }
      }
      else
      {
        if ((int8_t)Buffer[1] < -5.0f)
 8002262:	4b3c      	ldr	r3, [pc, #240]	; (8002354 <main+0x384>)
 8002264:	edd3 7a01 	vldr	s15, [r3, #4]
 8002268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800226c:	ee17 3a90 	vmov	r3, s15
 8002270:	b2db      	uxtb	r3, r3
 8002272:	b25b      	sxtb	r3, r3
 8002274:	ee07 3a90 	vmov	s15, r3
 8002278:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800227c:	eef9 7a04 	vmov.f32	s15, #148	; 0x94
 8002280:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002288:	d503      	bpl.n	8002292 <main+0x2c2>
        {
          /* LD6 on */
          STM_EVAL_LEDOn(LED6);
 800228a:	f04f 0003 	mov.w	r0, #3
 800228e:	f001 fd7d 	bl	8003d8c <STM_EVAL_LEDOn>
        }
        if ((int8_t)Buffer[1] > 5.0f)
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <main+0x384>)
 8002294:	edd3 7a01 	vldr	s15, [r3, #4]
 8002298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800229c:	ee17 3a90 	vmov	r3, s15
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	b25b      	sxtb	r3, r3
 80022a4:	ee07 3a90 	vmov	s15, r3
 80022a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ac:	eef1 7a04 	vmov.f32	s15, #20
 80022b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b8:	dd03      	ble.n	80022c2 <main+0x2f2>
        {
          /* LD7 On */
          STM_EVAL_LEDOn(LED7);
 80022ba:	f04f 0004 	mov.w	r0, #4
 80022be:	f001 fd65 	bl	8003d8c <STM_EVAL_LEDOn>
    
    /* Demo Gyroscope */
   // Demo_GyroConfig();

    /* Waiting User Button is pressed */
    while (UserButtonPressed == 0x01)
 80022c2:	4b22      	ldr	r3, [pc, #136]	; (800234c <main+0x37c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	f43f af49 	beq.w	800215e <main+0x18e>
          STM_EVAL_LEDOn(LED7);
        } 
      }
    }
        
    DataReady = 0x00;
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <main+0x380>)
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
    
    /* LEDs Off */
    STM_EVAL_LEDOff(LED4);
 80022d4:	f04f 0001 	mov.w	r0, #1
 80022d8:	f001 fd70 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED3);
 80022dc:	f04f 0000 	mov.w	r0, #0
 80022e0:	f001 fd6c 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED6);
 80022e4:	f04f 0003 	mov.w	r0, #3
 80022e8:	f001 fd68 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED7);
 80022ec:	f04f 0004 	mov.w	r0, #4
 80022f0:	f001 fd64 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED10);
 80022f4:	f04f 0007 	mov.w	r0, #7
 80022f8:	f001 fd60 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED8);
 80022fc:	f04f 0005 	mov.w	r0, #5
 8002300:	f001 fd5c 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED9);
 8002304:	f04f 0006 	mov.w	r0, #6
 8002308:	f001 fd58 	bl	8003dbc <STM_EVAL_LEDOff>
    STM_EVAL_LEDOff(LED5);
 800230c:	f04f 0002 	mov.w	r0, #2
 8002310:	f001 fd54 	bl	8003dbc <STM_EVAL_LEDOff>
    
    /* Demo Compass */
    Demo_CompassConfig();
 8002314:	f000 fe1e 	bl	8002f54 <Demo_CompassConfig>
    
    /* Waiting User Button is pressed */
    while (UserButtonPressed == 0x02)
 8002318:	f000 bd3c 	b.w	8002d94 <main+0xdc4>
    {
      /* Wait for data ready */
      while(DataReady !=0x05)
 800231c:	bf00      	nop
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <main+0x380>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b05      	cmp	r3, #5
 8002326:	d1fa      	bne.n	800231e <main+0x34e>
      {}
      DataReady = 0x00;
 8002328:	4b09      	ldr	r3, [pc, #36]	; (8002350 <main+0x380>)
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
      
      /* Read Compass data */
      Demo_CompassReadMag(MagBuffer);
 8002330:	480b      	ldr	r0, [pc, #44]	; (8002360 <main+0x390>)
 8002332:	f000 ff59 	bl	80031e8 <Demo_CompassReadMag>
      Demo_CompassReadAcc(AccBuffer);
 8002336:	480b      	ldr	r0, [pc, #44]	; (8002364 <main+0x394>)
 8002338:	f000 fe4e 	bl	8002fd8 <Demo_CompassReadAcc>
      
      for(i=0;i<3;i++)
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	71fb      	strb	r3, [r7, #7]
 8002342:	e027      	b.n	8002394 <main+0x3c4>
 8002344:	200001d4 	.word	0x200001d4
 8002348:	51eb851f 	.word	0x51eb851f
 800234c:	20000170 	.word	0x20000170
 8002350:	2000019d 	.word	0x2000019d
 8002354:	20000190 	.word	0x20000190
 8002358:	200001bc 	.word	0x200001bc
 800235c:	2000019c 	.word	0x2000019c
 8002360:	20000178 	.word	0x20000178
 8002364:	20000184 	.word	0x20000184
        AccBuffer[i] /= 100.0f;
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	79fa      	ldrb	r2, [r7, #7]
 800236c:	49a0      	ldr	r1, [pc, #640]	; (80025f0 <main+0x620>)
 800236e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8002372:	188a      	adds	r2, r1, r2
 8002374:	ed92 7a00 	vldr	s14, [r2]
 8002378:	eddf 7a9e 	vldr	s15, [pc, #632]	; 80025f4 <main+0x624>
 800237c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8002380:	4a9b      	ldr	r2, [pc, #620]	; (80025f0 <main+0x620>)
 8002382:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002386:	18d3      	adds	r3, r2, r3
 8002388:	edc3 7a00 	vstr	s15, [r3]
      
      /* Read Compass data */
      Demo_CompassReadMag(MagBuffer);
      Demo_CompassReadAcc(AccBuffer);
      
      for(i=0;i<3;i++)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f103 0301 	add.w	r3, r3, #1
 8002392:	71fb      	strb	r3, [r7, #7]
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d9e6      	bls.n	8002368 <main+0x398>
        AccBuffer[i] /= 100.0f;
      
      fNormAcc = sqrt((AccBuffer[0]*AccBuffer[0])+(AccBuffer[1]*AccBuffer[1])+(AccBuffer[2]*AccBuffer[2]));
 800239a:	4b95      	ldr	r3, [pc, #596]	; (80025f0 <main+0x620>)
 800239c:	ed93 7a00 	vldr	s14, [r3]
 80023a0:	4b93      	ldr	r3, [pc, #588]	; (80025f0 <main+0x620>)
 80023a2:	edd3 7a00 	vldr	s15, [r3]
 80023a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023aa:	4b91      	ldr	r3, [pc, #580]	; (80025f0 <main+0x620>)
 80023ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80023b0:	4b8f      	ldr	r3, [pc, #572]	; (80025f0 <main+0x620>)
 80023b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80023b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023be:	4b8c      	ldr	r3, [pc, #560]	; (80025f0 <main+0x620>)
 80023c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80023c4:	4b8a      	ldr	r3, [pc, #552]	; (80025f0 <main+0x620>)
 80023c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d2:	ee17 0a90 	vmov	r0, s15
 80023d6:	f7fe fe75 	bl	80010c4 <__aeabi_f2d>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4610      	mov	r0, r2
 80023e0:	4619      	mov	r1, r3
 80023e2:	f7fd ff89 	bl	80002f8 <sqrt>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7ff f957 	bl	80016a0 <__aeabi_d2f>
 80023f2:	4602      	mov	r2, r0
 80023f4:	4b80      	ldr	r3, [pc, #512]	; (80025f8 <main+0x628>)
 80023f6:	601a      	str	r2, [r3, #0]
      
      fSinRoll = -AccBuffer[1]/fNormAcc;
 80023f8:	4b7d      	ldr	r3, [pc, #500]	; (80025f0 <main+0x620>)
 80023fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80023fe:	eeb1 7a67 	vneg.f32	s14, s15
 8002402:	4b7d      	ldr	r3, [pc, #500]	; (80025f8 <main+0x628>)
 8002404:	edd3 7a00 	vldr	s15, [r3]
 8002408:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800240c:	4b7b      	ldr	r3, [pc, #492]	; (80025fc <main+0x62c>)
 800240e:	edc3 7a00 	vstr	s15, [r3]
      fCosRoll = sqrt(1.0-(fSinRoll * fSinRoll));
 8002412:	4b7a      	ldr	r3, [pc, #488]	; (80025fc <main+0x62c>)
 8002414:	ed93 7a00 	vldr	s14, [r3]
 8002418:	4b78      	ldr	r3, [pc, #480]	; (80025fc <main+0x62c>)
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002422:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8002426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800242a:	ee17 0a90 	vmov	r0, s15
 800242e:	f7fe fe49 	bl	80010c4 <__aeabi_f2d>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	f7fd ff5d 	bl	80002f8 <sqrt>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4610      	mov	r0, r2
 8002444:	4619      	mov	r1, r3
 8002446:	f7ff f92b 	bl	80016a0 <__aeabi_d2f>
 800244a:	4602      	mov	r2, r0
 800244c:	4b6c      	ldr	r3, [pc, #432]	; (8002600 <main+0x630>)
 800244e:	601a      	str	r2, [r3, #0]
      fSinPitch = AccBuffer[0]/fNormAcc;
 8002450:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <main+0x620>)
 8002452:	ed93 7a00 	vldr	s14, [r3]
 8002456:	4b68      	ldr	r3, [pc, #416]	; (80025f8 <main+0x628>)
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8002460:	4b68      	ldr	r3, [pc, #416]	; (8002604 <main+0x634>)
 8002462:	edc3 7a00 	vstr	s15, [r3]
      fCosPitch = sqrt(1.0-(fSinPitch * fSinPitch));
 8002466:	4b67      	ldr	r3, [pc, #412]	; (8002604 <main+0x634>)
 8002468:	ed93 7a00 	vldr	s14, [r3]
 800246c:	4b65      	ldr	r3, [pc, #404]	; (8002604 <main+0x634>)
 800246e:	edd3 7a00 	vldr	s15, [r3]
 8002472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002476:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 800247a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800247e:	ee17 0a90 	vmov	r0, s15
 8002482:	f7fe fe1f 	bl	80010c4 <__aeabi_f2d>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f7fd ff33 	bl	80002f8 <sqrt>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	f7ff f901 	bl	80016a0 <__aeabi_d2f>
 800249e:	4602      	mov	r2, r0
 80024a0:	4b59      	ldr	r3, [pc, #356]	; (8002608 <main+0x638>)
 80024a2:	601a      	str	r2, [r3, #0]
     if ( fSinRoll >0)
 80024a4:	4b55      	ldr	r3, [pc, #340]	; (80025fc <main+0x62c>)
 80024a6:	edd3 7a00 	vldr	s15, [r3]
 80024aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b2:	dd5e      	ble.n	8002572 <main+0x5a2>
     {
       if (fCosRoll>0)
 80024b4:	4b52      	ldr	r3, [pc, #328]	; (8002600 <main+0x630>)
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c2:	dd26      	ble.n	8002512 <main+0x542>
       {
         RollAng = acos(fCosRoll)*180/PI;
 80024c4:	4b4e      	ldr	r3, [pc, #312]	; (8002600 <main+0x630>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fdfb 	bl	80010c4 <__aeabi_f2d>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	f7fd febb 	bl	8000250 <acos>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	4b49      	ldr	r3, [pc, #292]	; (800260c <main+0x63c>)
 80024e8:	f7fe fe40 	bl	800116c <__aeabi_dmul>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	a33c      	add	r3, pc, #240	; (adr r3, 80025e8 <main+0x618>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f7fe ff61 	bl	80013c0 <__aeabi_ddiv>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f7ff f8cb 	bl	80016a0 <__aeabi_d2f>
 800250a:	4602      	mov	r2, r0
 800250c:	4b40      	ldr	r3, [pc, #256]	; (8002610 <main+0x640>)
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	e0b1      	b.n	8002676 <main+0x6a6>
       }
       else
       {
         RollAng = acos(fCosRoll)*180/PI + 180;
 8002512:	4b3b      	ldr	r3, [pc, #236]	; (8002600 <main+0x630>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fdd4 	bl	80010c4 <__aeabi_f2d>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	f7fd fe94 	bl	8000250 <acos>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	4b35      	ldr	r3, [pc, #212]	; (800260c <main+0x63c>)
 8002536:	f7fe fe19 	bl	800116c <__aeabi_dmul>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	a329      	add	r3, pc, #164	; (adr r3, 80025e8 <main+0x618>)
 8002544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002548:	f7fe ff3a 	bl	80013c0 <__aeabi_ddiv>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	4b2c      	ldr	r3, [pc, #176]	; (800260c <main+0x63c>)
 800255a:	f7fe fc55 	bl	8000e08 <__adddf3>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4610      	mov	r0, r2
 8002564:	4619      	mov	r1, r3
 8002566:	f7ff f89b 	bl	80016a0 <__aeabi_d2f>
 800256a:	4602      	mov	r2, r0
 800256c:	4b28      	ldr	r3, [pc, #160]	; (8002610 <main+0x640>)
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e081      	b.n	8002676 <main+0x6a6>
       }
     }
     else
     {
       if (fCosRoll>0)
 8002572:	4b23      	ldr	r3, [pc, #140]	; (8002600 <main+0x630>)
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800257c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002580:	dd4a      	ble.n	8002618 <main+0x648>
       {
         RollAng = acos(fCosRoll)*180/PI + 360;
 8002582:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <main+0x630>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe fd9c 	bl	80010c4 <__aeabi_f2d>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
 8002594:	f7fd fe5c 	bl	8000250 <acos>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <main+0x63c>)
 80025a6:	f7fe fde1 	bl	800116c <__aeabi_dmul>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4610      	mov	r0, r2
 80025b0:	4619      	mov	r1, r3
 80025b2:	a30d      	add	r3, pc, #52	; (adr r3, 80025e8 <main+0x618>)
 80025b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b8:	f7fe ff02 	bl	80013c0 <__aeabi_ddiv>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <main+0x644>)
 80025ca:	f7fe fc1d 	bl	8000e08 <__adddf3>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4610      	mov	r0, r2
 80025d4:	4619      	mov	r1, r3
 80025d6:	f7ff f863 	bl	80016a0 <__aeabi_d2f>
 80025da:	4602      	mov	r2, r0
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <main+0x640>)
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e049      	b.n	8002676 <main+0x6a6>
 80025e2:	bf00      	nop
 80025e4:	f3af 8000 	nop.w
 80025e8:	60000000 	.word	0x60000000
 80025ec:	400921fb 	.word	0x400921fb
 80025f0:	20000184 	.word	0x20000184
 80025f4:	42c80000 	.word	0x42c80000
 80025f8:	200001d0 	.word	0x200001d0
 80025fc:	200001c8 	.word	0x200001c8
 8002600:	200001c0 	.word	0x200001c0
 8002604:	200001cc 	.word	0x200001cc
 8002608:	200001a0 	.word	0x200001a0
 800260c:	40668000 	.word	0x40668000
 8002610:	200001a4 	.word	0x200001a4
 8002614:	40768000 	.word	0x40768000
       }
       else
       {
         RollAng = acos(fCosRoll)*180/PI + 180;
 8002618:	4b69      	ldr	r3, [pc, #420]	; (80027c0 <main+0x7f0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fd51 	bl	80010c4 <__aeabi_f2d>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
 800262a:	f7fd fe11 	bl	8000250 <acos>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4610      	mov	r0, r2
 8002634:	4619      	mov	r1, r3
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	4b62      	ldr	r3, [pc, #392]	; (80027c4 <main+0x7f4>)
 800263c:	f7fe fd96 	bl	800116c <__aeabi_dmul>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	a35b      	add	r3, pc, #364	; (adr r3, 80027b8 <main+0x7e8>)
 800264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264e:	f7fe feb7 	bl	80013c0 <__aeabi_ddiv>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	4b59      	ldr	r3, [pc, #356]	; (80027c4 <main+0x7f4>)
 8002660:	f7fe fbd2 	bl	8000e08 <__adddf3>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	f7ff f818 	bl	80016a0 <__aeabi_d2f>
 8002670:	4602      	mov	r2, r0
 8002672:	4b55      	ldr	r3, [pc, #340]	; (80027c8 <main+0x7f8>)
 8002674:	601a      	str	r2, [r3, #0]
       }
     }
     
      if ( fSinPitch >0)
 8002676:	4b55      	ldr	r3, [pc, #340]	; (80027cc <main+0x7fc>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002684:	dd5e      	ble.n	8002744 <main+0x774>
     {
       if (fCosPitch>0)
 8002686:	4b52      	ldr	r3, [pc, #328]	; (80027d0 <main+0x800>)
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002694:	dd26      	ble.n	80026e4 <main+0x714>
       {
            PitchAng = acos(fCosPitch)*180/PI;
 8002696:	4b4e      	ldr	r3, [pc, #312]	; (80027d0 <main+0x800>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fd12 	bl	80010c4 <__aeabi_f2d>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	f7fd fdd2 	bl	8000250 <acos>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	4b42      	ldr	r3, [pc, #264]	; (80027c4 <main+0x7f4>)
 80026ba:	f7fe fd57 	bl	800116c <__aeabi_dmul>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	a33c      	add	r3, pc, #240	; (adr r3, 80027b8 <main+0x7e8>)
 80026c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026cc:	f7fe fe78 	bl	80013c0 <__aeabi_ddiv>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	f7fe ffe2 	bl	80016a0 <__aeabi_d2f>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b3d      	ldr	r3, [pc, #244]	; (80027d4 <main+0x804>)
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e0aa      	b.n	800283a <main+0x86a>
       }
       else
       {
          PitchAng = acos(fCosPitch)*180/PI + 180;
 80026e4:	4b3a      	ldr	r3, [pc, #232]	; (80027d0 <main+0x800>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fceb 	bl	80010c4 <__aeabi_f2d>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	f7fd fdab 	bl	8000250 <acos>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <main+0x7f4>)
 8002708:	f7fe fd30 	bl	800116c <__aeabi_dmul>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	a328      	add	r3, pc, #160	; (adr r3, 80027b8 <main+0x7e8>)
 8002716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271a:	f7fe fe51 	bl	80013c0 <__aeabi_ddiv>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	4b26      	ldr	r3, [pc, #152]	; (80027c4 <main+0x7f4>)
 800272c:	f7fe fb6c 	bl	8000e08 <__adddf3>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f7fe ffb2 	bl	80016a0 <__aeabi_d2f>
 800273c:	4602      	mov	r2, r0
 800273e:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <main+0x804>)
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	e07a      	b.n	800283a <main+0x86a>
       }
     }
     else
     {
       if (fCosPitch>0)
 8002744:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <main+0x800>)
 8002746:	edd3 7a00 	vldr	s15, [r3]
 800274a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002752:	dd43      	ble.n	80027dc <main+0x80c>
       {
            PitchAng = acos(fCosPitch)*180/PI + 360;
 8002754:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <main+0x800>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe fcb3 	bl	80010c4 <__aeabi_f2d>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4610      	mov	r0, r2
 8002764:	4619      	mov	r1, r3
 8002766:	f7fd fd73 	bl	8000250 <acos>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <main+0x7f4>)
 8002778:	f7fe fcf8 	bl	800116c <__aeabi_dmul>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4610      	mov	r0, r2
 8002782:	4619      	mov	r1, r3
 8002784:	a30c      	add	r3, pc, #48	; (adr r3, 80027b8 <main+0x7e8>)
 8002786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278a:	f7fe fe19 	bl	80013c0 <__aeabi_ddiv>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <main+0x808>)
 800279c:	f7fe fb34 	bl	8000e08 <__adddf3>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	f7fe ff7a 	bl	80016a0 <__aeabi_d2f>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <main+0x804>)
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	e042      	b.n	800283a <main+0x86a>
 80027b4:	f3af 8000 	nop.w
 80027b8:	60000000 	.word	0x60000000
 80027bc:	400921fb 	.word	0x400921fb
 80027c0:	200001c0 	.word	0x200001c0
 80027c4:	40668000 	.word	0x40668000
 80027c8:	200001a4 	.word	0x200001a4
 80027cc:	200001cc 	.word	0x200001cc
 80027d0:	200001a0 	.word	0x200001a0
 80027d4:	200001a8 	.word	0x200001a8
 80027d8:	40768000 	.word	0x40768000
       }
       else
       {
          PitchAng = acos(fCosPitch)*180/PI + 180;
 80027dc:	4bc4      	ldr	r3, [pc, #784]	; (8002af0 <main+0xb20>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe fc6f 	bl	80010c4 <__aeabi_f2d>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	f7fd fd2f 	bl	8000250 <acos>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4610      	mov	r0, r2
 80027f8:	4619      	mov	r1, r3
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	4bbd      	ldr	r3, [pc, #756]	; (8002af4 <main+0xb24>)
 8002800:	f7fe fcb4 	bl	800116c <__aeabi_dmul>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	a3b6      	add	r3, pc, #728	; (adr r3, 8002ae8 <main+0xb18>)
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	f7fe fdd5 	bl	80013c0 <__aeabi_ddiv>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	4bb4      	ldr	r3, [pc, #720]	; (8002af4 <main+0xb24>)
 8002824:	f7fe faf0 	bl	8000e08 <__adddf3>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	f7fe ff36 	bl	80016a0 <__aeabi_d2f>
 8002834:	4602      	mov	r2, r0
 8002836:	4bb0      	ldr	r3, [pc, #704]	; (8002af8 <main+0xb28>)
 8002838:	601a      	str	r2, [r3, #0]
       }
     }

      if (RollAng >=360)
 800283a:	4bb0      	ldr	r3, [pc, #704]	; (8002afc <main+0xb2c>)
 800283c:	ed93 7a00 	vldr	s14, [r3]
 8002840:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8002b00 <main+0xb30>
 8002844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284c:	db09      	blt.n	8002862 <main+0x892>
      {
        RollAng = RollAng - 360;
 800284e:	4bab      	ldr	r3, [pc, #684]	; (8002afc <main+0xb2c>)
 8002850:	ed93 7a00 	vldr	s14, [r3]
 8002854:	eddf 7aaa 	vldr	s15, [pc, #680]	; 8002b00 <main+0xb30>
 8002858:	ee77 7a67 	vsub.f32	s15, s14, s15
 800285c:	4ba7      	ldr	r3, [pc, #668]	; (8002afc <main+0xb2c>)
 800285e:	edc3 7a00 	vstr	s15, [r3]
      }
      
      if (PitchAng >=360)
 8002862:	4ba5      	ldr	r3, [pc, #660]	; (8002af8 <main+0xb28>)
 8002864:	ed93 7a00 	vldr	s14, [r3]
 8002868:	eddf 7aa5 	vldr	s15, [pc, #660]	; 8002b00 <main+0xb30>
 800286c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	db09      	blt.n	800288a <main+0x8ba>
      {
        PitchAng = PitchAng - 360;
 8002876:	4ba0      	ldr	r3, [pc, #640]	; (8002af8 <main+0xb28>)
 8002878:	ed93 7a00 	vldr	s14, [r3]
 800287c:	eddf 7aa0 	vldr	s15, [pc, #640]	; 8002b00 <main+0xb30>
 8002880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002884:	4b9c      	ldr	r3, [pc, #624]	; (8002af8 <main+0xb28>)
 8002886:	edc3 7a00 	vstr	s15, [r3]
      }
      
      fTiltedX = MagBuffer[0]*fCosPitch+MagBuffer[2]*fSinPitch;
 800288a:	4b9e      	ldr	r3, [pc, #632]	; (8002b04 <main+0xb34>)
 800288c:	ed93 7a00 	vldr	s14, [r3]
 8002890:	4b97      	ldr	r3, [pc, #604]	; (8002af0 <main+0xb20>)
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ee27 7a27 	vmul.f32	s14, s14, s15
 800289a:	4b9a      	ldr	r3, [pc, #616]	; (8002b04 <main+0xb34>)
 800289c:	edd3 6a02 	vldr	s13, [r3, #8]
 80028a0:	4b99      	ldr	r3, [pc, #612]	; (8002b08 <main+0xb38>)
 80028a2:	edd3 7a00 	vldr	s15, [r3]
 80028a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ae:	4b97      	ldr	r3, [pc, #604]	; (8002b0c <main+0xb3c>)
 80028b0:	edc3 7a00 	vstr	s15, [r3]
      fTiltedY = MagBuffer[0]*fSinRoll*fSinPitch+MagBuffer[1]*fCosRoll-MagBuffer[1]*fSinRoll*fCosPitch;
 80028b4:	4b93      	ldr	r3, [pc, #588]	; (8002b04 <main+0xb34>)
 80028b6:	ed93 7a00 	vldr	s14, [r3]
 80028ba:	4b95      	ldr	r3, [pc, #596]	; (8002b10 <main+0xb40>)
 80028bc:	edd3 7a00 	vldr	s15, [r3]
 80028c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028c4:	4b90      	ldr	r3, [pc, #576]	; (8002b08 <main+0xb38>)
 80028c6:	edd3 7a00 	vldr	s15, [r3]
 80028ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ce:	4b8d      	ldr	r3, [pc, #564]	; (8002b04 <main+0xb34>)
 80028d0:	edd3 6a01 	vldr	s13, [r3, #4]
 80028d4:	4b8f      	ldr	r3, [pc, #572]	; (8002b14 <main+0xb44>)
 80028d6:	edd3 7a00 	vldr	s15, [r3]
 80028da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e2:	4b88      	ldr	r3, [pc, #544]	; (8002b04 <main+0xb34>)
 80028e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80028e8:	4b89      	ldr	r3, [pc, #548]	; (8002b10 <main+0xb40>)
 80028ea:	edd3 7a00 	vldr	s15, [r3]
 80028ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028f2:	4b7f      	ldr	r3, [pc, #508]	; (8002af0 <main+0xb20>)
 80028f4:	edd3 7a00 	vldr	s15, [r3]
 80028f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002900:	4b85      	ldr	r3, [pc, #532]	; (8002b18 <main+0xb48>)
 8002902:	edc3 7a00 	vstr	s15, [r3]
      
      HeadingValue = (float) ((atan2f((float)fTiltedY,(float)fTiltedX))*180)/PI;
 8002906:	4b84      	ldr	r3, [pc, #528]	; (8002b18 <main+0xb48>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b80      	ldr	r3, [pc, #512]	; (8002b0c <main+0xb3c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	f7fd fd47 	bl	80003a4 <atan2f>
 8002916:	ee07 0a10 	vmov	s14, r0
 800291a:	eddf 7a80 	vldr	s15, [pc, #512]	; 8002b1c <main+0xb4c>
 800291e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002922:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8002b20 <main+0xb50>
 8002926:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800292a:	4b7e      	ldr	r3, [pc, #504]	; (8002b24 <main+0xb54>)
 800292c:	edc3 7a00 	vstr	s15, [r3]
 
      if (HeadingValue < 0)
 8002930:	4b7c      	ldr	r3, [pc, #496]	; (8002b24 <main+0xb54>)
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293e:	d509      	bpl.n	8002954 <main+0x984>
      {
        HeadingValue = HeadingValue + 360;    
 8002940:	4b78      	ldr	r3, [pc, #480]	; (8002b24 <main+0xb54>)
 8002942:	ed93 7a00 	vldr	s14, [r3]
 8002946:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8002b00 <main+0xb30>
 800294a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800294e:	4b75      	ldr	r3, [pc, #468]	; (8002b24 <main+0xb54>)
 8002950:	edc3 7a00 	vstr	s15, [r3]
      }
      
      if ((RollAng <= 40.0f) && (PitchAng <= 40.0f))
 8002954:	4b69      	ldr	r3, [pc, #420]	; (8002afc <main+0xb2c>)
 8002956:	ed93 7a00 	vldr	s14, [r3]
 800295a:	eddf 7a73 	vldr	s15, [pc, #460]	; 8002b28 <main+0xb58>
 800295e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002966:	f200 81f1 	bhi.w	8002d4c <main+0xd7c>
 800296a:	4b63      	ldr	r3, [pc, #396]	; (8002af8 <main+0xb28>)
 800296c:	ed93 7a00 	vldr	s14, [r3]
 8002970:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8002b28 <main+0xb58>
 8002974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297c:	f200 81e6 	bhi.w	8002d4c <main+0xd7c>
      {
        if (((HeadingValue < 25.0f)&&(HeadingValue >= 0.0f))||((HeadingValue >=340.0f)&&(HeadingValue <= 360.0f)))
 8002980:	4b68      	ldr	r3, [pc, #416]	; (8002b24 <main+0xb54>)
 8002982:	ed93 7a00 	vldr	s14, [r3]
 8002986:	eef3 7a09 	vmov.f32	s15, #57	; 0x39
 800298a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800298e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002992:	d507      	bpl.n	80029a4 <main+0x9d4>
 8002994:	4b63      	ldr	r3, [pc, #396]	; (8002b24 <main+0xb54>)
 8002996:	edd3 7a00 	vldr	s15, [r3]
 800299a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800299e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a2:	da13      	bge.n	80029cc <main+0x9fc>
 80029a4:	4b5f      	ldr	r3, [pc, #380]	; (8002b24 <main+0xb54>)
 80029a6:	ed93 7a00 	vldr	s14, [r3]
 80029aa:	eddf 7a60 	vldr	s15, [pc, #384]	; 8002b2c <main+0xb5c>
 80029ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b6:	db2a      	blt.n	8002a0e <main+0xa3e>
 80029b8:	4b5a      	ldr	r3, [pc, #360]	; (8002b24 <main+0xb54>)
 80029ba:	ed93 7a00 	vldr	s14, [r3]
 80029be:	eddf 7a50 	vldr	s15, [pc, #320]	; 8002b00 <main+0xb30>
 80029c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	d820      	bhi.n	8002a0e <main+0xa3e>
        {
          STM_EVAL_LEDOn(LED10);
 80029cc:	f04f 0007 	mov.w	r0, #7
 80029d0:	f001 f9dc 	bl	8003d8c <STM_EVAL_LEDOn>
          STM_EVAL_LEDOff(LED3);
 80029d4:	f04f 0000 	mov.w	r0, #0
 80029d8:	f001 f9f0 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED6);
 80029dc:	f04f 0003 	mov.w	r0, #3
 80029e0:	f001 f9ec 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED7);
 80029e4:	f04f 0004 	mov.w	r0, #4
 80029e8:	f001 f9e8 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED4);
 80029ec:	f04f 0001 	mov.w	r0, #1
 80029f0:	f001 f9e4 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED8);
 80029f4:	f04f 0005 	mov.w	r0, #5
 80029f8:	f001 f9e0 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED9);
 80029fc:	f04f 0006 	mov.w	r0, #6
 8002a00:	f001 f9dc 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED5);
 8002a04:	f04f 0002 	mov.w	r0, #2
 8002a08:	f001 f9d8 	bl	8003dbc <STM_EVAL_LEDOff>
 8002a0c:	e19d      	b.n	8002d4a <main+0xd7a>
        }
        else  if ((HeadingValue <70.0f)&&(HeadingValue >= 25.0f))
 8002a0e:	4b45      	ldr	r3, [pc, #276]	; (8002b24 <main+0xb54>)
 8002a10:	ed93 7a00 	vldr	s14, [r3]
 8002a14:	eddf 7a46 	vldr	s15, [pc, #280]	; 8002b30 <main+0xb60>
 8002a18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a20:	d52a      	bpl.n	8002a78 <main+0xaa8>
 8002a22:	4b40      	ldr	r3, [pc, #256]	; (8002b24 <main+0xb54>)
 8002a24:	ed93 7a00 	vldr	s14, [r3]
 8002a28:	eef3 7a09 	vmov.f32	s15, #57	; 0x39
 8002a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a34:	db20      	blt.n	8002a78 <main+0xaa8>
        {
          STM_EVAL_LEDOn(LED9);
 8002a36:	f04f 0006 	mov.w	r0, #6
 8002a3a:	f001 f9a7 	bl	8003d8c <STM_EVAL_LEDOn>
          STM_EVAL_LEDOff(LED6);
 8002a3e:	f04f 0003 	mov.w	r0, #3
 8002a42:	f001 f9bb 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED10);
 8002a46:	f04f 0007 	mov.w	r0, #7
 8002a4a:	f001 f9b7 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED3);
 8002a4e:	f04f 0000 	mov.w	r0, #0
 8002a52:	f001 f9b3 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED8);
 8002a56:	f04f 0005 	mov.w	r0, #5
 8002a5a:	f001 f9af 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED5);
 8002a5e:	f04f 0002 	mov.w	r0, #2
 8002a62:	f001 f9ab 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED4);
 8002a66:	f04f 0001 	mov.w	r0, #1
 8002a6a:	f001 f9a7 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED7);
 8002a6e:	f04f 0004 	mov.w	r0, #4
 8002a72:	f001 f9a3 	bl	8003dbc <STM_EVAL_LEDOff>
 8002a76:	e168      	b.n	8002d4a <main+0xd7a>
        } 
        else  if ((HeadingValue < 115.0f)&&(HeadingValue >= 70.0f))
 8002a78:	4b2a      	ldr	r3, [pc, #168]	; (8002b24 <main+0xb54>)
 8002a7a:	ed93 7a00 	vldr	s14, [r3]
 8002a7e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8002b34 <main+0xb64>
 8002a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8a:	d555      	bpl.n	8002b38 <main+0xb68>
 8002a8c:	4b25      	ldr	r3, [pc, #148]	; (8002b24 <main+0xb54>)
 8002a8e:	ed93 7a00 	vldr	s14, [r3]
 8002a92:	eddf 7a27 	vldr	s15, [pc, #156]	; 8002b30 <main+0xb60>
 8002a96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9e:	db4b      	blt.n	8002b38 <main+0xb68>
        {
          STM_EVAL_LEDOn(LED7);
 8002aa0:	f04f 0004 	mov.w	r0, #4
 8002aa4:	f001 f972 	bl	8003d8c <STM_EVAL_LEDOn>
          STM_EVAL_LEDOff(LED3);
 8002aa8:	f04f 0000 	mov.w	r0, #0
 8002aac:	f001 f986 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED4);
 8002ab0:	f04f 0001 	mov.w	r0, #1
 8002ab4:	f001 f982 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED9);
 8002ab8:	f04f 0006 	mov.w	r0, #6
 8002abc:	f001 f97e 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED10);
 8002ac0:	f04f 0007 	mov.w	r0, #7
 8002ac4:	f001 f97a 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED8);
 8002ac8:	f04f 0005 	mov.w	r0, #5
 8002acc:	f001 f976 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED6);
 8002ad0:	f04f 0003 	mov.w	r0, #3
 8002ad4:	f001 f972 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED5);
 8002ad8:	f04f 0002 	mov.w	r0, #2
 8002adc:	f001 f96e 	bl	8003dbc <STM_EVAL_LEDOff>
 8002ae0:	e133      	b.n	8002d4a <main+0xd7a>
 8002ae2:	bf00      	nop
 8002ae4:	f3af 8000 	nop.w
 8002ae8:	60000000 	.word	0x60000000
 8002aec:	400921fb 	.word	0x400921fb
 8002af0:	200001a0 	.word	0x200001a0
 8002af4:	40668000 	.word	0x40668000
 8002af8:	200001a8 	.word	0x200001a8
 8002afc:	200001a4 	.word	0x200001a4
 8002b00:	43b40000 	.word	0x43b40000
 8002b04:	20000178 	.word	0x20000178
 8002b08:	200001cc 	.word	0x200001cc
 8002b0c:	200001c4 	.word	0x200001c4
 8002b10:	200001c8 	.word	0x200001c8
 8002b14:	200001c0 	.word	0x200001c0
 8002b18:	200001ac 	.word	0x200001ac
 8002b1c:	43340000 	.word	0x43340000
 8002b20:	40490fdb 	.word	0x40490fdb
 8002b24:	20000174 	.word	0x20000174
 8002b28:	42200000 	.word	0x42200000
 8002b2c:	43aa0000 	.word	0x43aa0000
 8002b30:	428c0000 	.word	0x428c0000
 8002b34:	42e60000 	.word	0x42e60000
        }
        else  if ((HeadingValue <160.0f)&&(HeadingValue >= 115.0f))
 8002b38:	4b9a      	ldr	r3, [pc, #616]	; (8002da4 <main+0xdd4>)
 8002b3a:	ed93 7a00 	vldr	s14, [r3]
 8002b3e:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8002da8 <main+0xdd8>
 8002b42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4a:	d52a      	bpl.n	8002ba2 <main+0xbd2>
 8002b4c:	4b95      	ldr	r3, [pc, #596]	; (8002da4 <main+0xdd4>)
 8002b4e:	ed93 7a00 	vldr	s14, [r3]
 8002b52:	eddf 7a96 	vldr	s15, [pc, #600]	; 8002dac <main+0xddc>
 8002b56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5e:	db20      	blt.n	8002ba2 <main+0xbd2>
        {
          STM_EVAL_LEDOn(LED5);
 8002b60:	f04f 0002 	mov.w	r0, #2
 8002b64:	f001 f912 	bl	8003d8c <STM_EVAL_LEDOn>
          STM_EVAL_LEDOff(LED6);
 8002b68:	f04f 0003 	mov.w	r0, #3
 8002b6c:	f001 f926 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED10);
 8002b70:	f04f 0007 	mov.w	r0, #7
 8002b74:	f001 f922 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED8);
 8002b78:	f04f 0005 	mov.w	r0, #5
 8002b7c:	f001 f91e 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED9);
 8002b80:	f04f 0006 	mov.w	r0, #6
 8002b84:	f001 f91a 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED7);
 8002b88:	f04f 0004 	mov.w	r0, #4
 8002b8c:	f001 f916 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED4);
 8002b90:	f04f 0001 	mov.w	r0, #1
 8002b94:	f001 f912 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED3);
 8002b98:	f04f 0000 	mov.w	r0, #0
 8002b9c:	f001 f90e 	bl	8003dbc <STM_EVAL_LEDOff>
 8002ba0:	e0d3      	b.n	8002d4a <main+0xd7a>
        } 
        else  if ((HeadingValue <205.0f)&&(HeadingValue >= 160.0f))
 8002ba2:	4b80      	ldr	r3, [pc, #512]	; (8002da4 <main+0xdd4>)
 8002ba4:	ed93 7a00 	vldr	s14, [r3]
 8002ba8:	eddf 7a81 	vldr	s15, [pc, #516]	; 8002db0 <main+0xde0>
 8002bac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb4:	d52a      	bpl.n	8002c0c <main+0xc3c>
 8002bb6:	4b7b      	ldr	r3, [pc, #492]	; (8002da4 <main+0xdd4>)
 8002bb8:	ed93 7a00 	vldr	s14, [r3]
 8002bbc:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8002da8 <main+0xdd8>
 8002bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc8:	db20      	blt.n	8002c0c <main+0xc3c>
        {
          STM_EVAL_LEDOn(LED3);
 8002bca:	f04f 0000 	mov.w	r0, #0
 8002bce:	f001 f8dd 	bl	8003d8c <STM_EVAL_LEDOn>
          STM_EVAL_LEDOff(LED6);
 8002bd2:	f04f 0003 	mov.w	r0, #3
 8002bd6:	f001 f8f1 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED4);
 8002bda:	f04f 0001 	mov.w	r0, #1
 8002bde:	f001 f8ed 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED8);
 8002be2:	f04f 0005 	mov.w	r0, #5
 8002be6:	f001 f8e9 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED9);
 8002bea:	f04f 0006 	mov.w	r0, #6
 8002bee:	f001 f8e5 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED5);
 8002bf2:	f04f 0002 	mov.w	r0, #2
 8002bf6:	f001 f8e1 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED10);
 8002bfa:	f04f 0007 	mov.w	r0, #7
 8002bfe:	f001 f8dd 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED7);
 8002c02:	f04f 0004 	mov.w	r0, #4
 8002c06:	f001 f8d9 	bl	8003dbc <STM_EVAL_LEDOff>
 8002c0a:	e09e      	b.n	8002d4a <main+0xd7a>
        } 
        else  if ((HeadingValue <250.0f)&&(HeadingValue >= 205.0f))
 8002c0c:	4b65      	ldr	r3, [pc, #404]	; (8002da4 <main+0xdd4>)
 8002c0e:	ed93 7a00 	vldr	s14, [r3]
 8002c12:	eddf 7a68 	vldr	s15, [pc, #416]	; 8002db4 <main+0xde4>
 8002c16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1e:	d52a      	bpl.n	8002c76 <main+0xca6>
 8002c20:	4b60      	ldr	r3, [pc, #384]	; (8002da4 <main+0xdd4>)
 8002c22:	ed93 7a00 	vldr	s14, [r3]
 8002c26:	eddf 7a62 	vldr	s15, [pc, #392]	; 8002db0 <main+0xde0>
 8002c2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c32:	db20      	blt.n	8002c76 <main+0xca6>
        {
          STM_EVAL_LEDOn(LED4);
 8002c34:	f04f 0001 	mov.w	r0, #1
 8002c38:	f001 f8a8 	bl	8003d8c <STM_EVAL_LEDOn>
          STM_EVAL_LEDOff(LED6);
 8002c3c:	f04f 0003 	mov.w	r0, #3
 8002c40:	f001 f8bc 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED10);
 8002c44:	f04f 0007 	mov.w	r0, #7
 8002c48:	f001 f8b8 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED8);
 8002c4c:	f04f 0005 	mov.w	r0, #5
 8002c50:	f001 f8b4 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED9);
 8002c54:	f04f 0006 	mov.w	r0, #6
 8002c58:	f001 f8b0 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED5);
 8002c5c:	f04f 0002 	mov.w	r0, #2
 8002c60:	f001 f8ac 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED3);
 8002c64:	f04f 0000 	mov.w	r0, #0
 8002c68:	f001 f8a8 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED7);
 8002c6c:	f04f 0004 	mov.w	r0, #4
 8002c70:	f001 f8a4 	bl	8003dbc <STM_EVAL_LEDOff>
 8002c74:	e069      	b.n	8002d4a <main+0xd7a>
        } 
        else  if ((HeadingValue < 295.0f)&&(HeadingValue >= 250.0f))
 8002c76:	4b4b      	ldr	r3, [pc, #300]	; (8002da4 <main+0xdd4>)
 8002c78:	ed93 7a00 	vldr	s14, [r3]
 8002c7c:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8002db8 <main+0xde8>
 8002c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c88:	d52a      	bpl.n	8002ce0 <main+0xd10>
 8002c8a:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <main+0xdd4>)
 8002c8c:	ed93 7a00 	vldr	s14, [r3]
 8002c90:	eddf 7a48 	vldr	s15, [pc, #288]	; 8002db4 <main+0xde4>
 8002c94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9c:	db20      	blt.n	8002ce0 <main+0xd10>
        {
          STM_EVAL_LEDOn(LED6);
 8002c9e:	f04f 0003 	mov.w	r0, #3
 8002ca2:	f001 f873 	bl	8003d8c <STM_EVAL_LEDOn>
          STM_EVAL_LEDOff(LED9);
 8002ca6:	f04f 0006 	mov.w	r0, #6
 8002caa:	f001 f887 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED10);
 8002cae:	f04f 0007 	mov.w	r0, #7
 8002cb2:	f001 f883 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED8);
 8002cb6:	f04f 0005 	mov.w	r0, #5
 8002cba:	f001 f87f 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED3);
 8002cbe:	f04f 0000 	mov.w	r0, #0
 8002cc2:	f001 f87b 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED5);
 8002cc6:	f04f 0002 	mov.w	r0, #2
 8002cca:	f001 f877 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED4);
 8002cce:	f04f 0001 	mov.w	r0, #1
 8002cd2:	f001 f873 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED7);
 8002cd6:	f04f 0004 	mov.w	r0, #4
 8002cda:	f001 f86f 	bl	8003dbc <STM_EVAL_LEDOff>
 8002cde:	e034      	b.n	8002d4a <main+0xd7a>
        }        
        else  if ((HeadingValue < 340.0f)&&(HeadingValue >= 295.0f))
 8002ce0:	4b30      	ldr	r3, [pc, #192]	; (8002da4 <main+0xdd4>)
 8002ce2:	ed93 7a00 	vldr	s14, [r3]
 8002ce6:	eddf 7a35 	vldr	s15, [pc, #212]	; 8002dbc <main+0xdec>
 8002cea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf2:	d52a      	bpl.n	8002d4a <main+0xd7a>
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <main+0xdd4>)
 8002cf6:	ed93 7a00 	vldr	s14, [r3]
 8002cfa:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8002db8 <main+0xde8>
 8002cfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d06:	db20      	blt.n	8002d4a <main+0xd7a>
        {
          STM_EVAL_LEDOn(LED8);
 8002d08:	f04f 0005 	mov.w	r0, #5
 8002d0c:	f001 f83e 	bl	8003d8c <STM_EVAL_LEDOn>
          STM_EVAL_LEDOff(LED6);
 8002d10:	f04f 0003 	mov.w	r0, #3
 8002d14:	f001 f852 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED10);
 8002d18:	f04f 0007 	mov.w	r0, #7
 8002d1c:	f001 f84e 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED7);
 8002d20:	f04f 0004 	mov.w	r0, #4
 8002d24:	f001 f84a 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED9);
 8002d28:	f04f 0006 	mov.w	r0, #6
 8002d2c:	f001 f846 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED3);
 8002d30:	f04f 0000 	mov.w	r0, #0
 8002d34:	f001 f842 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED4);
 8002d38:	f04f 0001 	mov.w	r0, #1
 8002d3c:	f001 f83e 	bl	8003dbc <STM_EVAL_LEDOff>
          STM_EVAL_LEDOff(LED5);
 8002d40:	f04f 0002 	mov.w	r0, #2
 8002d44:	f001 f83a 	bl	8003dbc <STM_EVAL_LEDOff>
        HeadingValue = HeadingValue + 360;    
      }
      
      if ((RollAng <= 40.0f) && (PitchAng <= 40.0f))
      {
        if (((HeadingValue < 25.0f)&&(HeadingValue >= 0.0f))||((HeadingValue >=340.0f)&&(HeadingValue <= 360.0f)))
 8002d48:	e024      	b.n	8002d94 <main+0xdc4>
 8002d4a:	e023      	b.n	8002d94 <main+0xdc4>
        }
      }
      else
      {
        /* Toggle All LEDs */
        STM_EVAL_LEDToggle(LED7);
 8002d4c:	f04f 0004 	mov.w	r0, #4
 8002d50:	f001 f84c 	bl	8003dec <STM_EVAL_LEDToggle>
        STM_EVAL_LEDToggle(LED6);
 8002d54:	f04f 0003 	mov.w	r0, #3
 8002d58:	f001 f848 	bl	8003dec <STM_EVAL_LEDToggle>
        STM_EVAL_LEDToggle(LED10);
 8002d5c:	f04f 0007 	mov.w	r0, #7
 8002d60:	f001 f844 	bl	8003dec <STM_EVAL_LEDToggle>
        STM_EVAL_LEDToggle(LED8);
 8002d64:	f04f 0005 	mov.w	r0, #5
 8002d68:	f001 f840 	bl	8003dec <STM_EVAL_LEDToggle>
        STM_EVAL_LEDToggle(LED9);
 8002d6c:	f04f 0006 	mov.w	r0, #6
 8002d70:	f001 f83c 	bl	8003dec <STM_EVAL_LEDToggle>
        STM_EVAL_LEDToggle(LED3);
 8002d74:	f04f 0000 	mov.w	r0, #0
 8002d78:	f001 f838 	bl	8003dec <STM_EVAL_LEDToggle>
        STM_EVAL_LEDToggle(LED4);
 8002d7c:	f04f 0001 	mov.w	r0, #1
 8002d80:	f001 f834 	bl	8003dec <STM_EVAL_LEDToggle>
        STM_EVAL_LEDToggle(LED5);
 8002d84:	f04f 0002 	mov.w	r0, #2
 8002d88:	f001 f830 	bl	8003dec <STM_EVAL_LEDToggle>
        /* Delay 50ms */
        Delay(5);
 8002d8c:	f04f 0005 	mov.w	r0, #5
 8002d90:	f000 fb24 	bl	80033dc <Delay>
    
    /* Demo Compass */
    Demo_CompassConfig();
    
    /* Waiting User Button is pressed */
    while (UserButtonPressed == 0x02)
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <main+0xdf0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	f43f aabf 	beq.w	800231c <main+0x34c>
        STM_EVAL_LEDToggle(LED5);
        /* Delay 50ms */
        Delay(5);
      }
    }
  }
 8002d9e:	f7ff b954 	b.w	800204a <main+0x7a>
 8002da2:	bf00      	nop
 8002da4:	20000174 	.word	0x20000174
 8002da8:	43200000 	.word	0x43200000
 8002dac:	42e60000 	.word	0x42e60000
 8002db0:	434d0000 	.word	0x434d0000
 8002db4:	437a0000 	.word	0x437a0000
 8002db8:	43938000 	.word	0x43938000
 8002dbc:	43aa0000 	.word	0x43aa0000
 8002dc0:	20000170 	.word	0x20000170
 8002dc4:	f3af 8000 	nop.w

08002dc8 <Demo_GyroReadAngRate>:
  * @brief  Calculate the angular Data rate Gyroscope.
  * @param  pfData : Data out pointer
  * @retval None
  */
void Demo_GyroReadAngRate (float* pfData)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	; 0x28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	82bb      	strh	r3, [r7, #20]
  uint8_t tmpreg = 0;
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	623b      	str	r3, [r7, #32]

  L3GD20_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8002dfa:	f107 030f 	add.w	r3, r7, #15
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f04f 0123 	mov.w	r1, #35	; 0x23
 8002e04:	f04f 0201 	mov.w	r2, #1
 8002e08:	f000 fba8 	bl	800355c <L3GD20_Read>
  
  L3GD20_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8002e0c:	f107 0318 	add.w	r3, r7, #24
 8002e10:	4618      	mov	r0, r3
 8002e12:	f04f 0128 	mov.w	r1, #40	; 0x28
 8002e16:	f04f 0206 	mov.w	r2, #6
 8002e1a:	f000 fb9f 	bl	800355c <L3GD20_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & 0x40))
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d12b      	bne.n	8002e80 <Demo_GyroReadAngRate+0xb8>
  {
    for(i=0; i<3; i++)
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	623b      	str	r3, [r7, #32]
 8002e2e:	e023      	b.n	8002e78 <Demo_GyroReadAngRate+0xb0>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002e36:	f103 0301 	add.w	r3, r3, #1
 8002e3a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002e3e:	18cb      	adds	r3, r1, r3
 8002e40:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002e44:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002e50:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002e54:	18cb      	adds	r3, r1, r3
 8002e56:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002e5a:	18d3      	adds	r3, r2, r3
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002e66:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002e6a:	18cb      	adds	r3, r1, r3
 8002e6c:	f823 2c18 	strh.w	r2, [r3, #-24]
  L3GD20_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & 0x40))
  {
    for(i=0; i<3; i++)
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	f103 0301 	add.w	r3, r3, #1
 8002e76:	623b      	str	r3, [r7, #32]
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	ddd8      	ble.n	8002e30 <Demo_GyroReadAngRate+0x68>
 8002e7e:	e02a      	b.n	8002ed6 <Demo_GyroReadAngRate+0x10e>
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	623b      	str	r3, [r7, #32]
 8002e86:	e023      	b.n	8002ed0 <Demo_GyroReadAngRate+0x108>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002e8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e92:	18d3      	adds	r3, r2, r3
 8002e94:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002e98:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002ea4:	f103 0301 	add.w	r3, r3, #1
 8002ea8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002eac:	18cb      	adds	r3, r1, r3
 8002eae:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002eb2:	18d3      	adds	r3, r2, r3
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002ebe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002ec2:	18cb      	adds	r3, r1, r3
 8002ec4:	f823 2c18 	strh.w	r2, [r3, #-24]
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	f103 0301 	add.w	r3, r3, #1
 8002ece:	623b      	str	r3, [r7, #32]
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	ddd8      	ble.n	8002e88 <Demo_GyroReadAngRate+0xc0>
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & 0x30)
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002edc:	2b10      	cmp	r3, #16
 8002ede:	d006      	beq.n	8002eee <Demo_GyroReadAngRate+0x126>
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d007      	beq.n	8002ef4 <Demo_GyroReadAngRate+0x12c>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d108      	bne.n	8002efa <Demo_GyroReadAngRate+0x132>
  {
  case 0x00:
    sensitivity=L3G_Sensitivity_250dps;
 8002ee8:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <Demo_GyroReadAngRate+0x180>)
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002eec:	e005      	b.n	8002efa <Demo_GyroReadAngRate+0x132>
    
  case 0x10:
    sensitivity=L3G_Sensitivity_500dps;
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <Demo_GyroReadAngRate+0x184>)
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002ef2:	e002      	b.n	8002efa <Demo_GyroReadAngRate+0x132>
    
  case 0x20:
    sensitivity=L3G_Sensitivity_2000dps;
 8002ef4:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <Demo_GyroReadAngRate+0x188>)
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002ef8:	bf00      	nop
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	623b      	str	r3, [r7, #32]
 8002f00:	e01b      	b.n	8002f3a <Demo_GyroReadAngRate+0x172>
  {
    pfData[i]=(float)RawData[i]/sensitivity;
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	18d2      	adds	r2, r2, r3
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002f12:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002f16:	18cb      	adds	r3, r1, r3
 8002f18:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002f1c:	b21b      	sxth	r3, r3
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f2a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8002f2e:	edc2 7a00 	vstr	s15, [r2]
  case 0x20:
    sensitivity=L3G_Sensitivity_2000dps;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	f103 0301 	add.w	r3, r3, #1
 8002f38:	623b      	str	r3, [r7, #32]
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	dde0      	ble.n	8002f02 <Demo_GyroReadAngRate+0x13a>
  {
    pfData[i]=(float)RawData[i]/sensitivity;
  }
}
 8002f40:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	42e491ec 	.word	0x42e491ec
 8002f4c:	42649254 	.word	0x42649254
 8002f50:	41648f5c 	.word	0x41648f5c

08002f54 <Demo_CompassConfig>:
  * @brief  Configure the Mems to compass application.
  * @param  None
  * @retval None
  */
void Demo_CompassConfig(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
  LSM303DLHCMag_InitTypeDef LSM303DLHC_InitStructure;
  LSM303DLHCAcc_InitTypeDef LSM303DLHCAcc_InitStructure;
  LSM303DLHCAcc_FilterConfigTypeDef LSM303DLHCFilter_InitStructure;
  
  /* Configure MEMS magnetometer main parameters: temp, working mode, full Scale and Data rate */
  LSM303DLHC_InitStructure.Temperature_Sensor = LSM303DLHC_TEMPSENSOR_DISABLE;
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	733b      	strb	r3, [r7, #12]
  LSM303DLHC_InitStructure.MagOutput_DataRate =LSM303DLHC_ODR_30_HZ ;
 8002f60:	f04f 0314 	mov.w	r3, #20
 8002f64:	737b      	strb	r3, [r7, #13]
  LSM303DLHC_InitStructure.MagFull_Scale = LSM303DLHC_FS_8_1_GA;
 8002f66:	f04f 03e0 	mov.w	r3, #224	; 0xe0
 8002f6a:	73fb      	strb	r3, [r7, #15]
  LSM303DLHC_InitStructure.Working_Mode = LSM303DLHC_CONTINUOS_CONVERSION;
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	73bb      	strb	r3, [r7, #14]
  LSM303DLHC_MagInit(&LSM303DLHC_InitStructure);
 8002f72:	f107 030c 	add.w	r3, r7, #12
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fbf8 	bl	800376c <LSM303DLHC_MagInit>
  
   /* Fill the accelerometer structure */
  LSM303DLHCAcc_InitStructure.Power_Mode = LSM303DLHC_NORMAL_MODE;
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	713b      	strb	r3, [r7, #4]
  LSM303DLHCAcc_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8002f82:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002f86:	717b      	strb	r3, [r7, #5]
  LSM303DLHCAcc_InitStructure.Axes_Enable= LSM303DLHC_AXES_ENABLE;
 8002f88:	f04f 0307 	mov.w	r3, #7
 8002f8c:	71bb      	strb	r3, [r7, #6]
  LSM303DLHCAcc_InitStructure.AccFull_Scale = LSM303DLHC_FULLSCALE_2G;
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	72bb      	strb	r3, [r7, #10]
  LSM303DLHCAcc_InitStructure.BlockData_Update = LSM303DLHC_BlockUpdate_Continous;
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	723b      	strb	r3, [r7, #8]
  LSM303DLHCAcc_InitStructure.Endianness=LSM303DLHC_BLE_LSB;
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	727b      	strb	r3, [r7, #9]
  LSM303DLHCAcc_InitStructure.High_Resolution=LSM303DLHC_HR_ENABLE;
 8002fa0:	f04f 0308 	mov.w	r3, #8
 8002fa4:	71fb      	strb	r3, [r7, #7]
  /* Configure the accelerometer main parameters */
  LSM303DLHC_AccInit(&LSM303DLHCAcc_InitStructure);
 8002fa6:	f107 0304 	add.w	r3, r7, #4
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fb68 	bl	8003680 <LSM303DLHC_AccInit>
  
  /* Fill the accelerometer LPF structure */
  LSM303DLHCFilter_InitStructure.HighPassFilter_Mode_Selection =LSM303DLHC_HPM_NORMAL_MODE;
 8002fb0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002fb4:	703b      	strb	r3, [r7, #0]
  LSM303DLHCFilter_InitStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8002fb6:	f04f 0310 	mov.w	r3, #16
 8002fba:	707b      	strb	r3, [r7, #1]
  LSM303DLHCFilter_InitStructure.HighPassFilter_AOI1 = LSM303DLHC_HPF_AOI1_DISABLE;
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	70bb      	strb	r3, [r7, #2]
  LSM303DLHCFilter_InitStructure.HighPassFilter_AOI2 = LSM303DLHC_HPF_AOI2_DISABLE;
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	70fb      	strb	r3, [r7, #3]

  /* Configure the accelerometer LPF main parameters */
  LSM303DLHC_AccFilterConfig(&LSM303DLHCFilter_InitStructure);
 8002fc8:	463b      	mov	r3, r7
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fb9a 	bl	8003704 <LSM303DLHC_AccFilterConfig>
}
 8002fd0:	f107 0710 	add.w	r7, r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <Demo_CompassReadAcc>:
* @brief Read LSM303DLHC output register, and calculate the acceleration ACC=(1/SENSITIVITY)* (out_h*256+out_l)/16 (12 bit rappresentation)
* @param pnData: pointer to float buffer where to store data
* @retval None
*/
void Demo_CompassReadAcc(float* pfData)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2];
  uint8_t buffer[6], cDivider;
  uint8_t i = 0;
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  float LSM_Acc_Sensitivity = LSM_Acc_Sensitivity_2g;
 8002fe8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002fec:	623b      	str	r3, [r7, #32]
  
  /* Read the register content */
  LSM303DLHC_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrlx,2);
 8002fee:	f107 0314 	add.w	r3, r7, #20
 8002ff2:	f04f 0032 	mov.w	r0, #50	; 0x32
 8002ff6:	f04f 0123 	mov.w	r1, #35	; 0x23
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f04f 0302 	mov.w	r3, #2
 8003000:	f000 fcd0 	bl	80039a4 <LSM303DLHC_Read>
  LSM303DLHC_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A, buffer, 6);
 8003004:	f107 030c 	add.w	r3, r7, #12
 8003008:	f04f 0032 	mov.w	r0, #50	; 0x32
 800300c:	f04f 0128 	mov.w	r1, #40	; 0x28
 8003010:	461a      	mov	r2, r3
 8003012:	f04f 0306 	mov.w	r3, #6
 8003016:	f000 fcc5 	bl	80039a4 <LSM303DLHC_Read>
   
  if(ctrlx[1]&0x40)
 800301a:	7d7b      	ldrb	r3, [r7, #21]
 800301c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <Demo_CompassReadAcc+0x56>
    cDivider=64;
 8003024:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800302c:	e003      	b.n	8003036 <Demo_CompassReadAcc+0x5e>
  else
    cDivider=16;
 800302e:	f04f 0310 	mov.w	r3, #16
 8003032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* check in the control register4 the data alignment*/
  if(!(ctrlx[0] & 0x40) || (ctrlx[1] & 0x40)) /* Little Endian Mode or FIFO mode */
 8003036:	7d3b      	ldrb	r3, [r7, #20]
 8003038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303c:	2b00      	cmp	r3, #0
 800303e:	d004      	beq.n	800304a <Demo_CompassReadAcc+0x72>
 8003040:	7d7b      	ldrb	r3, [r7, #21]
 8003042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d036      	beq.n	80030b8 <Demo_CompassReadAcc+0xe0>
  {
    for(i=0; i<3; i++)
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003052:	e02c      	b.n	80030ae <Demo_CompassReadAcc+0xd6>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i])/cDivider;
 8003054:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003058:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800305c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003060:	f102 0201 	add.w	r2, r2, #1
 8003064:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003068:	1882      	adds	r2, r0, r2
 800306a:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800306e:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003072:	b292      	uxth	r2, r2
 8003074:	b211      	sxth	r1, r2
 8003076:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800307a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800307e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003082:	1882      	adds	r2, r0, r2
 8003084:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8003088:	1889      	adds	r1, r1, r2
 800308a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800308e:	fb91 f2f2 	sdiv	r2, r1, r2
 8003092:	b292      	uxth	r2, r2
 8003094:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003098:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800309c:	18cb      	adds	r3, r1, r3
 800309e:	f823 2c10 	strh.w	r2, [r3, #-16]
    cDivider=16;

  /* check in the control register4 the data alignment*/
  if(!(ctrlx[0] & 0x40) || (ctrlx[1] & 0x40)) /* Little Endian Mode or FIFO mode */
  {
    for(i=0; i<3; i++)
 80030a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030a6:	f103 0301 	add.w	r3, r3, #1
 80030aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80030ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d9ce      	bls.n	8003054 <Demo_CompassReadAcc+0x7c>
    cDivider=64;
  else
    cDivider=16;

  /* check in the control register4 the data alignment*/
  if(!(ctrlx[0] & 0x40) || (ctrlx[1] & 0x40)) /* Little Endian Mode or FIFO mode */
 80030b6:	e035      	b.n	8003124 <Demo_CompassReadAcc+0x14c>
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i])/cDivider;
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80030c0:	e02c      	b.n	800311c <Demo_CompassReadAcc+0x144>
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1])/cDivider;
 80030c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80030ca:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80030ce:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80030d2:	1882      	adds	r2, r0, r2
 80030d4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80030d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80030dc:	b292      	uxth	r2, r2
 80030de:	b211      	sxth	r1, r2
 80030e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80030e4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80030e8:	f102 0201 	add.w	r2, r2, #1
 80030ec:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80030f0:	1882      	adds	r2, r0, r2
 80030f2:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80030f6:	1889      	adds	r1, r1, r2
 80030f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80030fc:	fb91 f2f2 	sdiv	r2, r1, r2
 8003100:	b292      	uxth	r2, r2
 8003102:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003106:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800310a:	18cb      	adds	r3, r1, r3
 800310c:	f823 2c10 	strh.w	r2, [r3, #-16]
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i])/cDivider;
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8003110:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003114:	f103 0301 	add.w	r3, r3, #1
 8003118:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800311c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003120:	2b02      	cmp	r3, #2
 8003122:	d9ce      	bls.n	80030c2 <Demo_CompassReadAcc+0xea>
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1])/cDivider;
  }
  /* Read the register content */
  LSM303DLHC_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrlx,2);
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	f04f 0032 	mov.w	r0, #50	; 0x32
 800312c:	f04f 0123 	mov.w	r1, #35	; 0x23
 8003130:	461a      	mov	r2, r3
 8003132:	f04f 0302 	mov.w	r3, #2
 8003136:	f000 fc35 	bl	80039a4 <LSM303DLHC_Read>


  if(ctrlx[1]&0x40)
 800313a:	7d7b      	ldrb	r3, [r7, #21]
 800313c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <Demo_CompassReadAcc+0x174>
  {
    /* FIFO mode */
    LSM_Acc_Sensitivity = 0.25;
 8003144:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8003148:	623b      	str	r3, [r7, #32]
 800314a:	e01d      	b.n	8003188 <Demo_CompassReadAcc+0x1b0>
  }
  else
  {
    /* normal mode */
    /* switch the sensitivity value set in the CRTL4*/
    switch(ctrlx[0] & 0x30)
 800314c:	7d3b      	ldrb	r3, [r7, #20]
 800314e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003152:	2b10      	cmp	r3, #16
 8003154:	d00d      	beq.n	8003172 <Demo_CompassReadAcc+0x19a>
 8003156:	2b10      	cmp	r3, #16
 8003158:	dc02      	bgt.n	8003160 <Demo_CompassReadAcc+0x188>
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <Demo_CompassReadAcc+0x192>
 800315e:	e013      	b.n	8003188 <Demo_CompassReadAcc+0x1b0>
 8003160:	2b20      	cmp	r3, #32
 8003162:	d00a      	beq.n	800317a <Demo_CompassReadAcc+0x1a2>
 8003164:	2b30      	cmp	r3, #48	; 0x30
 8003166:	d00c      	beq.n	8003182 <Demo_CompassReadAcc+0x1aa>
 8003168:	e00e      	b.n	8003188 <Demo_CompassReadAcc+0x1b0>
    {
    case LSM303DLHC_FULLSCALE_2G:
      LSM_Acc_Sensitivity = LSM_Acc_Sensitivity_2g;
 800316a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800316e:	623b      	str	r3, [r7, #32]
      break;
 8003170:	e00a      	b.n	8003188 <Demo_CompassReadAcc+0x1b0>
    case LSM303DLHC_FULLSCALE_4G:
      LSM_Acc_Sensitivity = LSM_Acc_Sensitivity_4g;
 8003172:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003176:	623b      	str	r3, [r7, #32]
      break;
 8003178:	e006      	b.n	8003188 <Demo_CompassReadAcc+0x1b0>
    case LSM303DLHC_FULLSCALE_8G:
      LSM_Acc_Sensitivity = LSM_Acc_Sensitivity_8g;
 800317a:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800317e:	623b      	str	r3, [r7, #32]
      break;
 8003180:	e002      	b.n	8003188 <Demo_CompassReadAcc+0x1b0>
    case LSM303DLHC_FULLSCALE_16G:
      LSM_Acc_Sensitivity = LSM_Acc_Sensitivity_16g;
 8003182:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <Demo_CompassReadAcc+0x20c>)
 8003184:	623b      	str	r3, [r7, #32]
      break;
 8003186:	bf00      	nop
    }
  }

  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003190:	e01f      	b.n	80031d2 <Demo_CompassReadAcc+0x1fa>
  {
    pfData[i]=(float)pnRawData[i]/LSM_Acc_Sensitivity;
 8003192:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003196:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	18d2      	adds	r2, r2, r3
 800319e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80031a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80031aa:	18c3      	adds	r3, r0, r3
 80031ac:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80031b0:	b21b      	sxth	r3, r3
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80031be:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80031c2:	edc2 7a00 	vstr	s15, [r2]
      break;
    }
  }

  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80031c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031ca:	f103 0301 	add.w	r3, r3, #1
 80031ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80031d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d9db      	bls.n	8003192 <Demo_CompassReadAcc+0x1ba>
  {
    pfData[i]=(float)pnRawData[i]/LSM_Acc_Sensitivity;
  }

}
 80031da:	f107 0728 	add.w	r7, r7, #40	; 0x28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	3daacd9f 	.word	0x3daacd9f

080031e8 <Demo_CompassReadMag>:
  * @brief  calculate the magnetic field Magn.
* @param  pfData: pointer to the data out
  * @retval None
  */
void Demo_CompassReadMag (float* pfData)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  static uint8_t buffer[6] = {0};
  uint8_t CTRLB = 0;
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	72bb      	strb	r3, [r7, #10]
  uint16_t Magn_Sensitivity_XY = 0, Magn_Sensitivity_Z = 0;
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	81fb      	strh	r3, [r7, #14]
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	81bb      	strh	r3, [r7, #12]
  uint8_t i =0;
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	72fb      	strb	r3, [r7, #11]
  LSM303DLHC_Read(MAG_I2C_ADDRESS, LSM303DLHC_CRB_REG_M, &CTRLB, 1);
 8003208:	f107 030a 	add.w	r3, r7, #10
 800320c:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8003210:	f04f 0101 	mov.w	r1, #1
 8003214:	461a      	mov	r2, r3
 8003216:	f04f 0301 	mov.w	r3, #1
 800321a:	f000 fbc3 	bl	80039a4 <LSM303DLHC_Read>
  
  LSM303DLHC_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_X_H_M, buffer, 1);
 800321e:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8003222:	f04f 0103 	mov.w	r1, #3
 8003226:	4a67      	ldr	r2, [pc, #412]	; (80033c4 <Demo_CompassReadMag+0x1dc>)
 8003228:	f04f 0301 	mov.w	r3, #1
 800322c:	f000 fbba 	bl	80039a4 <LSM303DLHC_Read>
  LSM303DLHC_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_X_L_M, buffer+1, 1);
 8003230:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8003234:	f04f 0104 	mov.w	r1, #4
 8003238:	4a63      	ldr	r2, [pc, #396]	; (80033c8 <Demo_CompassReadMag+0x1e0>)
 800323a:	f04f 0301 	mov.w	r3, #1
 800323e:	f000 fbb1 	bl	80039a4 <LSM303DLHC_Read>
  LSM303DLHC_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_M, buffer+2, 1);
 8003242:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8003246:	f04f 0107 	mov.w	r1, #7
 800324a:	4a60      	ldr	r2, [pc, #384]	; (80033cc <Demo_CompassReadMag+0x1e4>)
 800324c:	f04f 0301 	mov.w	r3, #1
 8003250:	f000 fba8 	bl	80039a4 <LSM303DLHC_Read>
  LSM303DLHC_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_M, buffer+3, 1);
 8003254:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8003258:	f04f 0108 	mov.w	r1, #8
 800325c:	4a5c      	ldr	r2, [pc, #368]	; (80033d0 <Demo_CompassReadMag+0x1e8>)
 800325e:	f04f 0301 	mov.w	r3, #1
 8003262:	f000 fb9f 	bl	80039a4 <LSM303DLHC_Read>
  LSM303DLHC_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_M, buffer+4, 1);
 8003266:	f04f 003c 	mov.w	r0, #60	; 0x3c
 800326a:	f04f 0105 	mov.w	r1, #5
 800326e:	4a59      	ldr	r2, [pc, #356]	; (80033d4 <Demo_CompassReadMag+0x1ec>)
 8003270:	f04f 0301 	mov.w	r3, #1
 8003274:	f000 fb96 	bl	80039a4 <LSM303DLHC_Read>
  LSM303DLHC_Read(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_M, buffer+5, 1);
 8003278:	f04f 003c 	mov.w	r0, #60	; 0x3c
 800327c:	f04f 0106 	mov.w	r1, #6
 8003280:	4a55      	ldr	r2, [pc, #340]	; (80033d8 <Demo_CompassReadMag+0x1f0>)
 8003282:	f04f 0301 	mov.w	r3, #1
 8003286:	f000 fb8d 	bl	80039a4 <LSM303DLHC_Read>
  /* Switch the sensitivity set in the CRTLB*/
  switch(CTRLB & 0xE0)
 800328a:	7abb      	ldrb	r3, [r7, #10]
 800328c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003290:	2b80      	cmp	r3, #128	; 0x80
 8003292:	d024      	beq.n	80032de <Demo_CompassReadMag+0xf6>
 8003294:	2b80      	cmp	r3, #128	; 0x80
 8003296:	dc06      	bgt.n	80032a6 <Demo_CompassReadMag+0xbe>
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d012      	beq.n	80032c2 <Demo_CompassReadMag+0xda>
 800329c:	2b60      	cmp	r3, #96	; 0x60
 800329e:	d017      	beq.n	80032d0 <Demo_CompassReadMag+0xe8>
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d007      	beq.n	80032b4 <Demo_CompassReadMag+0xcc>
 80032a4:	e037      	b.n	8003316 <Demo_CompassReadMag+0x12e>
 80032a6:	2bc0      	cmp	r3, #192	; 0xc0
 80032a8:	d027      	beq.n	80032fa <Demo_CompassReadMag+0x112>
 80032aa:	2be0      	cmp	r3, #224	; 0xe0
 80032ac:	d02c      	beq.n	8003308 <Demo_CompassReadMag+0x120>
 80032ae:	2ba0      	cmp	r3, #160	; 0xa0
 80032b0:	d01c      	beq.n	80032ec <Demo_CompassReadMag+0x104>
 80032b2:	e030      	b.n	8003316 <Demo_CompassReadMag+0x12e>
  {
  case LSM303DLHC_FS_1_3_GA:
    Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_1_3Ga;
 80032b4:	f240 434c 	movw	r3, #1100	; 0x44c
 80032b8:	81fb      	strh	r3, [r7, #14]
    Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_1_3Ga;
 80032ba:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 80032be:	81bb      	strh	r3, [r7, #12]
    break;
 80032c0:	e029      	b.n	8003316 <Demo_CompassReadMag+0x12e>
  case LSM303DLHC_FS_1_9_GA:
    Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_1_9Ga;
 80032c2:	f240 3357 	movw	r3, #855	; 0x357
 80032c6:	81fb      	strh	r3, [r7, #14]
    Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_1_9Ga;
 80032c8:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 80032cc:	81bb      	strh	r3, [r7, #12]
    break;
 80032ce:	e022      	b.n	8003316 <Demo_CompassReadMag+0x12e>
  case LSM303DLHC_FS_2_5_GA:
    Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
 80032d0:	f240 239e 	movw	r3, #670	; 0x29e
 80032d4:	81fb      	strh	r3, [r7, #14]
    Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_2_5Ga;
 80032d6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80032da:	81bb      	strh	r3, [r7, #12]
    break;
 80032dc:	e01b      	b.n	8003316 <Demo_CompassReadMag+0x12e>
  case LSM303DLHC_FS_4_0_GA:
    Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_4Ga;
 80032de:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80032e2:	81fb      	strh	r3, [r7, #14]
    Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_4Ga;
 80032e4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80032e8:	81bb      	strh	r3, [r7, #12]
    break;
 80032ea:	e014      	b.n	8003316 <Demo_CompassReadMag+0x12e>
  case LSM303DLHC_FS_4_7_GA:
    Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_4_7Ga;
 80032ec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80032f0:	81fb      	strh	r3, [r7, #14]
    Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_4_7Ga;
 80032f2:	f240 1363 	movw	r3, #355	; 0x163
 80032f6:	81bb      	strh	r3, [r7, #12]
    break;
 80032f8:	e00d      	b.n	8003316 <Demo_CompassReadMag+0x12e>
  case LSM303DLHC_FS_5_6_GA:
    Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_5_6Ga;
 80032fa:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80032fe:	81fb      	strh	r3, [r7, #14]
    Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_5_6Ga;
 8003300:	f240 1327 	movw	r3, #295	; 0x127
 8003304:	81bb      	strh	r3, [r7, #12]
    break;
 8003306:	e006      	b.n	8003316 <Demo_CompassReadMag+0x12e>
  case LSM303DLHC_FS_8_1_GA:
    Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_8_1Ga;
 8003308:	f04f 03e6 	mov.w	r3, #230	; 0xe6
 800330c:	81fb      	strh	r3, [r7, #14]
    Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_8_1Ga;
 800330e:	f04f 03cd 	mov.w	r3, #205	; 0xcd
 8003312:	81bb      	strh	r3, [r7, #12]
    break;
 8003314:	bf00      	nop
  }
  
  for(i=0; i<2; i++)
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	72fb      	strb	r3, [r7, #11]
 800331c:	e02c      	b.n	8003378 <Demo_CompassReadMag+0x190>
  {
    pfData[i]=(float)((int16_t)(((uint16_t)buffer[2*i] << 8) + buffer[2*i+1])*1000)/Magn_Sensitivity_XY;
 800331e:	7afb      	ldrb	r3, [r7, #11]
 8003320:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	18d3      	adds	r3, r2, r3
 8003328:	7afa      	ldrb	r2, [r7, #11]
 800332a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800332e:	4925      	ldr	r1, [pc, #148]	; (80033c4 <Demo_CompassReadMag+0x1dc>)
 8003330:	5c8a      	ldrb	r2, [r1, r2]
 8003332:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003336:	b291      	uxth	r1, r2
 8003338:	7afa      	ldrb	r2, [r7, #11]
 800333a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800333e:	f102 0201 	add.w	r2, r2, #1
 8003342:	4820      	ldr	r0, [pc, #128]	; (80033c4 <Demo_CompassReadMag+0x1dc>)
 8003344:	5c82      	ldrb	r2, [r0, r2]
 8003346:	188a      	adds	r2, r1, r2
 8003348:	b292      	uxth	r2, r2
 800334a:	b292      	uxth	r2, r2
 800334c:	b212      	sxth	r2, r2
 800334e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003352:	fb01 f202 	mul.w	r2, r1, r2
 8003356:	ee06 2a90 	vmov	s13, r2
 800335a:	eeb8 7ae6 	vcvt.f32.s32	s14, s13
 800335e:	89fa      	ldrh	r2, [r7, #14]
 8003360:	ee06 2a90 	vmov	s13, r2
 8003364:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 8003368:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800336c:	edc3 7a00 	vstr	s15, [r3]
    Magn_Sensitivity_XY = LSM303DLHC_M_SENSITIVITY_XY_8_1Ga;
    Magn_Sensitivity_Z = LSM303DLHC_M_SENSITIVITY_Z_8_1Ga;
    break;
  }
  
  for(i=0; i<2; i++)
 8003370:	7afb      	ldrb	r3, [r7, #11]
 8003372:	f103 0301 	add.w	r3, r3, #1
 8003376:	72fb      	strb	r3, [r7, #11]
 8003378:	7afb      	ldrb	r3, [r7, #11]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d9cf      	bls.n	800331e <Demo_CompassReadMag+0x136>
  {
    pfData[i]=(float)((int16_t)(((uint16_t)buffer[2*i] << 8) + buffer[2*i+1])*1000)/Magn_Sensitivity_XY;
  }
  pfData[2]=(float)((int16_t)(((uint16_t)buffer[4] << 8) + buffer[5])*1000)/Magn_Sensitivity_Z;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f103 0308 	add.w	r3, r3, #8
 8003384:	4a0f      	ldr	r2, [pc, #60]	; (80033c4 <Demo_CompassReadMag+0x1dc>)
 8003386:	7912      	ldrb	r2, [r2, #4]
 8003388:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800338c:	b291      	uxth	r1, r2
 800338e:	4a0d      	ldr	r2, [pc, #52]	; (80033c4 <Demo_CompassReadMag+0x1dc>)
 8003390:	7952      	ldrb	r2, [r2, #5]
 8003392:	188a      	adds	r2, r1, r2
 8003394:	b292      	uxth	r2, r2
 8003396:	b292      	uxth	r2, r2
 8003398:	b212      	sxth	r2, r2
 800339a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800339e:	fb01 f202 	mul.w	r2, r1, r2
 80033a2:	ee07 2a90 	vmov	s15, r2
 80033a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033aa:	89ba      	ldrh	r2, [r7, #12]
 80033ac:	ee06 2a90 	vmov	s13, r2
 80033b0:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 80033b4:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80033b8:	edc3 7a00 	vstr	s15, [r3]
}
 80033bc:	f107 0710 	add.w	r7, r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	200001b0 	.word	0x200001b0
 80033c8:	200001b1 	.word	0x200001b1
 80033cc:	200001b2 	.word	0x200001b2
 80033d0:	200001b3 	.word	0x200001b3
 80033d4:	200001b4 	.word	0x200001b4
 80033d8:	200001b5 	.word	0x200001b5

080033dc <Delay>:
  * @brief  Inserts a delay time.
  * @param  nTime: specifies the delay time length, in 10 ms.
  * @retval None
  */
void Delay(__IO uint32_t nTime)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <Delay+0x24>)
 80033e8:	601a      	str	r2, [r3, #0]

  while(TimingDelay != 0);
 80033ea:	bf00      	nop
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <Delay+0x24>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1fb      	bne.n	80033ec <Delay+0x10>
}
 80033f4:	f107 070c 	add.w	r7, r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	2000016c 	.word	0x2000016c

08003404 <TimingDelay_Decrement>:
  * @brief  Decrements the TimingDelay variable.
  * @param  None
  * @retval None
  */
void TimingDelay_Decrement(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  if (TimingDelay != 0x00)
 8003408:	4b06      	ldr	r3, [pc, #24]	; (8003424 <TimingDelay_Decrement+0x20>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <TimingDelay_Decrement+0x18>
  { 
    TimingDelay--;
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <TimingDelay_Decrement+0x20>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f103 32ff 	add.w	r2, r3, #4294967295
 8003418:	4b02      	ldr	r3, [pc, #8]	; (8003424 <TimingDelay_Decrement+0x20>)
 800341a:	601a      	str	r2, [r3, #0]
  }
}
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	2000016c 	.word	0x2000016c

08003428 <LSM303DLHC_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None.
  * @retval None.
  */
uint32_t LSM303DLHC_TIMEOUT_UserCallback(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return 0;
 800342c:	f04f 0300 	mov.w	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <L3GD20_TIMEOUT_UserCallback>:
  * @brief  Basic management of the timeout situation.
  * @param  None.
  * @retval None.
  */
uint32_t L3GD20_TIMEOUT_UserCallback(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return 0;
 800343c:	f04f 0300 	mov.w	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
}
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop

08003454 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8003458:	e7fe      	b.n	8003458 <HardFault_Handler+0x4>
 800345a:	bf00      	nop

0800345c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8003460:	e7fe      	b.n	8003460 <MemManage_Handler+0x4>
 8003462:	bf00      	nop

08003464 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8003468:	e7fe      	b.n	8003468 <BusFault_Handler+0x4>
 800346a:	bf00      	nop

0800346c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8003470:	e7fe      	b.n	8003470 <UsageFault_Handler+0x4>
 8003472:	bf00      	nop

08003474 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
}
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop

08003480 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
}
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop

0800348c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
}
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop

08003498 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 800349c:	f7ff ffb2 	bl	8003404 <TimingDelay_Decrement>
  //USBConnectTimeOut--;
  DataReady ++;
 80034a0:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <SysTick_Handler+0x1c>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f103 0301 	add.w	r3, r3, #1
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	4b01      	ldr	r3, [pc, #4]	; (80034b4 <SysTick_Handler+0x1c>)
 80034ae:	701a      	strb	r2, [r3, #0]
}
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	2000019d 	.word	0x2000019d

080034b8 <EXTI0_IRQHandler>:
  * @brief  This function handles EXTI0_IRQ Handler.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{ 
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  if ((EXTI_GetITStatus(USER_BUTTON_EXTI_LINE) == SET)&&(STM_EVAL_PBGetState(BUTTON_USER) != RESET))
 80034bc:	f04f 0000 	mov.w	r0, #0
 80034c0:	f000 fed2 	bl	8004268 <EXTI_GetITStatus>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d140      	bne.n	800354c <EXTI0_IRQHandler+0x94>
 80034ca:	f04f 0000 	mov.w	r0, #0
 80034ce:	f000 fd1d 	bl	8003f0c <STM_EVAL_PBGetState>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d039      	beq.n	800354c <EXTI0_IRQHandler+0x94>
  {
    /* Delay */
    for(i=0; i<0x7FFFF; i++);
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <EXTI0_IRQHandler+0x98>)
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e005      	b.n	80034ee <EXTI0_IRQHandler+0x36>
 80034e2:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <EXTI0_IRQHandler+0x98>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f103 0201 	add.w	r2, r3, #1
 80034ea:	4b19      	ldr	r3, [pc, #100]	; (8003550 <EXTI0_IRQHandler+0x98>)
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	4b18      	ldr	r3, [pc, #96]	; (8003550 <EXTI0_IRQHandler+0x98>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	4b18      	ldr	r3, [pc, #96]	; (8003554 <EXTI0_IRQHandler+0x9c>)
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d9f4      	bls.n	80034e2 <EXTI0_IRQHandler+0x2a>
    
    /* Wait for SEL button to be pressed  */
    while(STM_EVAL_PBGetState(BUTTON_USER) != RESET); 
 80034f8:	bf00      	nop
 80034fa:	f04f 0000 	mov.w	r0, #0
 80034fe:	f000 fd05 	bl	8003f0c <STM_EVAL_PBGetState>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1f8      	bne.n	80034fa <EXTI0_IRQHandler+0x42>
    /* Delay */
    for(i=0; i<0x7FFFF; i++);
 8003508:	4b11      	ldr	r3, [pc, #68]	; (8003550 <EXTI0_IRQHandler+0x98>)
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e005      	b.n	800351e <EXTI0_IRQHandler+0x66>
 8003512:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <EXTI0_IRQHandler+0x98>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f103 0201 	add.w	r2, r3, #1
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <EXTI0_IRQHandler+0x98>)
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <EXTI0_IRQHandler+0x98>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <EXTI0_IRQHandler+0x9c>)
 8003524:	429a      	cmp	r2, r3
 8003526:	d9f4      	bls.n	8003512 <EXTI0_IRQHandler+0x5a>
    UserButtonPressed++;
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <EXTI0_IRQHandler+0xa0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f103 0201 	add.w	r2, r3, #1
 8003530:	4b09      	ldr	r3, [pc, #36]	; (8003558 <EXTI0_IRQHandler+0xa0>)
 8003532:	601a      	str	r2, [r3, #0]
    
    if (UserButtonPressed > 0x2)
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <EXTI0_IRQHandler+0xa0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d903      	bls.n	8003544 <EXTI0_IRQHandler+0x8c>
    {
      UserButtonPressed = 0x0;
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <EXTI0_IRQHandler+0xa0>)
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
    }
    
    /* Clear the EXTI line pending bit */
    EXTI_ClearITPendingBit(USER_BUTTON_EXTI_LINE);
 8003544:	f04f 0000 	mov.w	r0, #0
 8003548:	f000 fed0 	bl	80042ec <EXTI_ClearITPendingBit>
  }
}
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200001b8 	.word	0x200001b8
 8003554:	0007fffe 	.word	0x0007fffe
 8003558:	20000170 	.word	0x20000170

0800355c <L3GD20_Read>:
  * @param  ReadAddr : L3GD20's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the L3GD20.
  * @retval None
  */
void L3GD20_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	460a      	mov	r2, r1
 8003568:	70fa      	strb	r2, [r7, #3]
 800356a:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 800356c:	883b      	ldrh	r3, [r7, #0]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d904      	bls.n	800357c <L3GD20_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003578:	70fb      	strb	r3, [r7, #3]
 800357a:	e003      	b.n	8003584 <L3GD20_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003582:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  L3GD20_CS_LOW();
 8003584:	4812      	ldr	r0, [pc, #72]	; (80035d0 <L3GD20_Read+0x74>)
 8003586:	f04f 0108 	mov.w	r1, #8
 800358a:	f000 ff9f 	bl	80044cc <GPIO_ResetBits>
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(ReadAddr);
 800358e:	78fb      	ldrb	r3, [r7, #3]
 8003590:	4618      	mov	r0, r3
 8003592:	f000 f81f 	bl	80035d4 <L3GD20_SendByte>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8003596:	e00f      	b.n	80035b8 <L3GD20_Read+0x5c>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to L3GD20 (Slave device) */
    *pBuffer = L3GD20_SendByte(DUMMY_BYTE);
 8003598:	f04f 0000 	mov.w	r0, #0
 800359c:	f000 f81a 	bl	80035d4 <L3GD20_SendByte>
 80035a0:	4603      	mov	r3, r0
 80035a2:	461a      	mov	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80035a8:	883b      	ldrh	r3, [r7, #0]
 80035aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80035ae:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f103 0301 	add.w	r3, r3, #1
 80035b6:	607b      	str	r3, [r7, #4]
  
  /* Send the Address of the indexed register */
  L3GD20_SendByte(ReadAddr);
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80035b8:	883b      	ldrh	r3, [r7, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1ec      	bne.n	8003598 <L3GD20_Read+0x3c>
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  L3GD20_CS_HIGH();
 80035be:	4804      	ldr	r0, [pc, #16]	; (80035d0 <L3GD20_Read+0x74>)
 80035c0:	f04f 0108 	mov.w	r1, #8
 80035c4:	f000 ff74 	bl	80044b0 <GPIO_SetBits>
}  
 80035c8:	f107 0708 	add.w	r7, r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	48001000 	.word	0x48001000

080035d4 <L3GD20_SendByte>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t L3GD20_SendByte(uint8_t byte)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
  /* Loop while DR register in not empty */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 80035de:	4b26      	ldr	r3, [pc, #152]	; (8003678 <L3GD20_SendByte+0xa4>)
 80035e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035e4:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 80035e6:	e011      	b.n	800360c <L3GD20_SendByte+0x38>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 80035e8:	4b23      	ldr	r3, [pc, #140]	; (8003678 <L3GD20_SendByte+0xa4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf14      	ite	ne
 80035f0:	2200      	movne	r2, #0
 80035f2:	2201      	moveq	r2, #1
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	f103 31ff 	add.w	r1, r3, #4294967295
 80035fa:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <L3GD20_SendByte+0xa4>)
 80035fc:	6019      	str	r1, [r3, #0]
 80035fe:	2a00      	cmp	r2, #0
 8003600:	d004      	beq.n	800360c <L3GD20_SendByte+0x38>
 8003602:	f7ff ff19 	bl	8003438 <L3GD20_TIMEOUT_UserCallback>
 8003606:	4603      	mov	r3, r0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e02f      	b.n	800366c <L3GD20_SendByte+0x98>
  */
static uint8_t L3GD20_SendByte(uint8_t byte)
{
  /* Loop while DR register in not empty */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_TXE) == RESET)
 800360c:	481b      	ldr	r0, [pc, #108]	; (800367c <L3GD20_SendByte+0xa8>)
 800360e:	f04f 0102 	mov.w	r1, #2
 8003612:	f001 fb6d 	bl	8004cf0 <SPI_I2S_GetFlagStatus>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0e5      	beq.n	80035e8 <L3GD20_SendByte+0x14>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
  }
  
  /* Send a Byte through the SPI peripheral */
  SPI_SendData8(L3GD20_SPI, byte);
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	4817      	ldr	r0, [pc, #92]	; (800367c <L3GD20_SendByte+0xa8>)
 8003620:	4619      	mov	r1, r3
 8003622:	f001 fb37 	bl	8004c94 <SPI_SendData8>
  
  /* Wait to receive a Byte */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
 8003626:	4b14      	ldr	r3, [pc, #80]	; (8003678 <L3GD20_SendByte+0xa4>)
 8003628:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800362c:	601a      	str	r2, [r3, #0]
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 800362e:	e011      	b.n	8003654 <L3GD20_SendByte+0x80>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
 8003630:	4b11      	ldr	r3, [pc, #68]	; (8003678 <L3GD20_SendByte+0xa4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf14      	ite	ne
 8003638:	2200      	movne	r2, #0
 800363a:	2201      	moveq	r2, #1
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	f103 31ff 	add.w	r1, r3, #4294967295
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <L3GD20_SendByte+0xa4>)
 8003644:	6019      	str	r1, [r3, #0]
 8003646:	2a00      	cmp	r2, #0
 8003648:	d004      	beq.n	8003654 <L3GD20_SendByte+0x80>
 800364a:	f7ff fef5 	bl	8003438 <L3GD20_TIMEOUT_UserCallback>
 800364e:	4603      	mov	r3, r0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	e00b      	b.n	800366c <L3GD20_SendByte+0x98>
  /* Send a Byte through the SPI peripheral */
  SPI_SendData8(L3GD20_SPI, byte);
  
  /* Wait to receive a Byte */
  L3GD20Timeout = L3GD20_FLAG_TIMEOUT;
  while (SPI_I2S_GetFlagStatus(L3GD20_SPI, SPI_I2S_FLAG_RXNE) == RESET)
 8003654:	4809      	ldr	r0, [pc, #36]	; (800367c <L3GD20_SendByte+0xa8>)
 8003656:	f04f 0101 	mov.w	r1, #1
 800365a:	f001 fb49 	bl	8004cf0 <SPI_I2S_GetFlagStatus>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0e5      	beq.n	8003630 <L3GD20_SendByte+0x5c>
  {
    if((L3GD20Timeout--) == 0) return L3GD20_TIMEOUT_UserCallback();
  }
  
  /* Return the Byte read from the SPI bus */
  return (uint8_t)SPI_ReceiveData8(L3GD20_SPI);
 8003664:	4805      	ldr	r0, [pc, #20]	; (800367c <L3GD20_SendByte+0xa8>)
 8003666:	f001 fb2d 	bl	8004cc4 <SPI_ReceiveData8>
 800366a:	4603      	mov	r3, r0
}
 800366c:	4618      	mov	r0, r3
 800366e:	f107 0708 	add.w	r7, r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	200000f8 	.word	0x200000f8
 800367c:	40013000 	.word	0x40013000

08003680 <LSM303DLHC_AccInit>:
  * @param  LSM303DLHC_InitStruct: pointer to a LSM303DLHC_InitTypeDef structure 
  *         that contains the configuration setting for the LSM303DLHC.
  * @retval None
  */
void LSM303DLHC_AccInit(LSM303DLHCAcc_InitTypeDef *LSM303DLHC_InitStruct)
{  
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	73fb      	strb	r3, [r7, #15]
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	73bb      	strb	r3, [r7, #14]
  
  /* Configure the low level interface ---------------------------------------*/
  LSM303DLHC_LowLevel_Init();
 8003694:	f000 fa74 	bl	8003b80 <LSM303DLHC_LowLevel_Init>
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (LSM303DLHC_InitStruct->Power_Mode | LSM303DLHC_InitStruct->AccOutput_DataRate | \
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	781a      	ldrb	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	785b      	ldrb	r3, [r3, #1]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	b2da      	uxtb	r2, r3
                    LSM303DLHC_InitStruct->Axes_Enable);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	789b      	ldrb	r3, [r3, #2]
  
  /* Configure the low level interface ---------------------------------------*/
  LSM303DLHC_LowLevel_Init();
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (LSM303DLHC_InitStruct->Power_Mode | LSM303DLHC_InitStruct->AccOutput_DataRate | \
 80036a8:	4313      	orrs	r3, r2
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	73fb      	strb	r3, [r7, #15]
                    LSM303DLHC_InitStruct->Axes_Enable);
  
  ctrl4 |= (uint8_t) (LSM303DLHC_InitStruct->BlockData_Update | LSM303DLHC_InitStruct->Endianness | \
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	791a      	ldrb	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	795b      	ldrb	r3, [r3, #5]
 80036bc:	4313      	orrs	r3, r2
 80036be:	b2da      	uxtb	r2, r3
                    LSM303DLHC_InitStruct->AccFull_Scale|LSM303DLHC_InitStruct->High_Resolution);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	799b      	ldrb	r3, [r3, #6]
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (LSM303DLHC_InitStruct->Power_Mode | LSM303DLHC_InitStruct->AccOutput_DataRate | \
                    LSM303DLHC_InitStruct->Axes_Enable);
  
  ctrl4 |= (uint8_t) (LSM303DLHC_InitStruct->BlockData_Update | LSM303DLHC_InitStruct->Endianness | \
 80036c4:	4313      	orrs	r3, r2
 80036c6:	b2da      	uxtb	r2, r3
                    LSM303DLHC_InitStruct->AccFull_Scale|LSM303DLHC_InitStruct->High_Resolution);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	78db      	ldrb	r3, [r3, #3]
  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl1 |= (uint8_t) (LSM303DLHC_InitStruct->Power_Mode | LSM303DLHC_InitStruct->AccOutput_DataRate | \
                    LSM303DLHC_InitStruct->Axes_Enable);
  
  ctrl4 |= (uint8_t) (LSM303DLHC_InitStruct->BlockData_Update | LSM303DLHC_InitStruct->Endianness | \
 80036cc:	4313      	orrs	r3, r2
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	7bbb      	ldrb	r3, [r7, #14]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	73bb      	strb	r3, [r7, #14]
                    LSM303DLHC_InitStruct->AccFull_Scale|LSM303DLHC_InitStruct->High_Resolution);
                    
  /* Write value to ACC MEMS CTRL_REG1 regsister */
  LSM303DLHC_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, &ctrl1);
 80036d8:	f107 030f 	add.w	r3, r7, #15
 80036dc:	f04f 0032 	mov.w	r0, #50	; 0x32
 80036e0:	f04f 0120 	mov.w	r1, #32
 80036e4:	461a      	mov	r2, r3
 80036e6:	f000 f885 	bl	80037f4 <LSM303DLHC_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 regsister */
  LSM303DLHC_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, &ctrl4);
 80036ea:	f107 030e 	add.w	r3, r7, #14
 80036ee:	f04f 0032 	mov.w	r0, #50	; 0x32
 80036f2:	f04f 0123 	mov.w	r1, #35	; 0x23
 80036f6:	461a      	mov	r2, r3
 80036f8:	f000 f87c 	bl	80037f4 <LSM303DLHC_Write>
}
 80036fc:	f107 0710 	add.w	r7, r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <LSM303DLHC_AccFilterConfig>:
  * @param  LSM303DLHC_FilterStruct: pointer to a LSM303DLHC_FilterConfigTypeDef structure 
  *         that contains the configuration setting for the LSM303DLHC.        
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(LSM303DLHCAcc_FilterConfigTypeDef *LSM303DLHC_FilterStruct) 
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  LSM303DLHC_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, &tmpreg, 1);
 800370c:	f107 030f 	add.w	r3, r7, #15
 8003710:	f04f 0032 	mov.w	r0, #50	; 0x32
 8003714:	f04f 0121 	mov.w	r1, #33	; 0x21
 8003718:	461a      	mov	r2, r3
 800371a:	f04f 0301 	mov.w	r3, #1
 800371e:	f000 f941 	bl	80039a4 <LSM303DLHC_Read>
  
  tmpreg &= 0x0C;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	b2db      	uxtb	r3, r3
 800372a:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
  tmpreg |= (uint8_t) (LSM303DLHC_FilterStruct->HighPassFilter_Mode_Selection |\
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	781a      	ldrb	r2, [r3, #0]
                      LSM303DLHC_FilterStruct->HighPassFilter_CutOff_Frequency|\
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	785b      	ldrb	r3, [r3, #1]
  LSM303DLHC_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, &tmpreg, 1);
  
  tmpreg &= 0x0C;
  
  /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
  tmpreg |= (uint8_t) (LSM303DLHC_FilterStruct->HighPassFilter_Mode_Selection |\
 8003734:	4313      	orrs	r3, r2
 8003736:	b2da      	uxtb	r2, r3
                      LSM303DLHC_FilterStruct->HighPassFilter_CutOff_Frequency|\
                      LSM303DLHC_FilterStruct->HighPassFilter_AOI1|\
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	789b      	ldrb	r3, [r3, #2]
  LSM303DLHC_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, &tmpreg, 1);
  
  tmpreg &= 0x0C;
  
  /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
  tmpreg |= (uint8_t) (LSM303DLHC_FilterStruct->HighPassFilter_Mode_Selection |\
 800373c:	4313      	orrs	r3, r2
 800373e:	b2da      	uxtb	r2, r3
                      LSM303DLHC_FilterStruct->HighPassFilter_CutOff_Frequency|\
                      LSM303DLHC_FilterStruct->HighPassFilter_AOI1|\
                      LSM303DLHC_FilterStruct->HighPassFilter_AOI2);                             
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	78db      	ldrb	r3, [r3, #3]
  LSM303DLHC_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, &tmpreg, 1);
  
  tmpreg &= 0x0C;
  
  /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
  tmpreg |= (uint8_t) (LSM303DLHC_FilterStruct->HighPassFilter_Mode_Selection |\
 8003744:	4313      	orrs	r3, r2
 8003746:	b2da      	uxtb	r2, r3
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	4313      	orrs	r3, r2
 800374c:	b2db      	uxtb	r3, r3
 800374e:	73fb      	strb	r3, [r7, #15]
                      LSM303DLHC_FilterStruct->HighPassFilter_CutOff_Frequency|\
                      LSM303DLHC_FilterStruct->HighPassFilter_AOI1|\
                      LSM303DLHC_FilterStruct->HighPassFilter_AOI2);                             
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  LSM303DLHC_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, &tmpreg);
 8003750:	f107 030f 	add.w	r3, r7, #15
 8003754:	f04f 0032 	mov.w	r0, #50	; 0x32
 8003758:	f04f 0121 	mov.w	r1, #33	; 0x21
 800375c:	461a      	mov	r2, r3
 800375e:	f000 f849 	bl	80037f4 <LSM303DLHC_Write>
}
 8003762:	f107 0710 	add.w	r7, r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop

0800376c <LSM303DLHC_MagInit>:
  * @param  LSM303DLHC_InitStruct: pointer to a LSM303DLHC_MagInitTypeDef structure 
  *         that contains the configuration setting for the LSM303DLHC.
  * @retval None
  */
void LSM303DLHC_MagInit(LSM303DLHCMag_InitTypeDef *LSM303DLHC_InitStruct)
{  
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint8_t cra_regm = 0x00, crb_regm = 0x00, mr_regm = 0x00;
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	73fb      	strb	r3, [r7, #15]
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	73bb      	strb	r3, [r7, #14]
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	737b      	strb	r3, [r7, #13]
  
  /* Configure the low level interface ---------------------------------------*/
  LSM303DLHC_LowLevel_Init();
 8003786:	f000 f9fb 	bl	8003b80 <LSM303DLHC_LowLevel_Init>
  
  /* Configure MEMS: temp and Data rate */
  cra_regm |= (uint8_t) (LSM303DLHC_InitStruct->Temperature_Sensor | LSM303DLHC_InitStruct->MagOutput_DataRate);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	781a      	ldrb	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	785b      	ldrb	r3, [r3, #1]
 8003792:	4313      	orrs	r3, r2
 8003794:	b2da      	uxtb	r2, r3
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	4313      	orrs	r3, r2
 800379a:	b2db      	uxtb	r3, r3
 800379c:	73fb      	strb	r3, [r7, #15]
    
  /* Configure MEMS: full Scale */
  crb_regm |= (uint8_t) (LSM303DLHC_InitStruct->MagFull_Scale);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	78da      	ldrb	r2, [r3, #3]
 80037a2:	7bbb      	ldrb	r3, [r7, #14]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	73bb      	strb	r3, [r7, #14]
      
  /* Configure MEMS: working mode */
  mr_regm |= (uint8_t) (LSM303DLHC_InitStruct->Working_Mode);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	789a      	ldrb	r2, [r3, #2]
 80037ae:	7b7b      	ldrb	r3, [r7, #13]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	737b      	strb	r3, [r7, #13]
                    
  /* Write value to Mag MEMS CRA_REG regsister */
  LSM303DLHC_Write(MAG_I2C_ADDRESS, LSM303DLHC_CRA_REG_M, &cra_regm);
 80037b6:	f107 030f 	add.w	r3, r7, #15
 80037ba:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80037be:	f04f 0100 	mov.w	r1, #0
 80037c2:	461a      	mov	r2, r3
 80037c4:	f000 f816 	bl	80037f4 <LSM303DLHC_Write>
  
  /* Write value to Mag MEMS CRB_REG regsister */
  LSM303DLHC_Write(MAG_I2C_ADDRESS, LSM303DLHC_CRB_REG_M, &crb_regm);
 80037c8:	f107 030e 	add.w	r3, r7, #14
 80037cc:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80037d0:	f04f 0101 	mov.w	r1, #1
 80037d4:	461a      	mov	r2, r3
 80037d6:	f000 f80d 	bl	80037f4 <LSM303DLHC_Write>

  /* Write value to Mag MEMS MR_REG regsister */
  LSM303DLHC_Write(MAG_I2C_ADDRESS, LSM303DLHC_MR_REG_M, &mr_regm);
 80037da:	f107 030d 	add.w	r3, r7, #13
 80037de:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80037e2:	f04f 0102 	mov.w	r1, #2
 80037e6:	461a      	mov	r2, r3
 80037e8:	f000 f804 	bl	80037f4 <LSM303DLHC_Write>
}
 80037ec:	f107 0710 	add.w	r7, r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <LSM303DLHC_Write>:
  * @param  RegAddr : specifies the LSM303DLHC register to be written.
  * @param  pBuffer : pointer to the buffer  containing the data to be written to the LSM303DLH.
  * @retval LSM303DLHC Status
  */
uint16_t LSM303DLHC_Write(uint8_t DeviceAddr, uint8_t RegAddr, uint8_t* pBuffer)
{  
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	460b      	mov	r3, r1
 80037fc:	603a      	str	r2, [r7, #0]
 80037fe:	4602      	mov	r2, r0
 8003800:	71fa      	strb	r2, [r7, #7]
 8003802:	71bb      	strb	r3, [r7, #6]
  /* Test on BUSY Flag */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 8003804:	4b65      	ldr	r3, [pc, #404]	; (800399c <LSM303DLHC_Write+0x1a8>)
 8003806:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800380a:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_BUSY) != RESET)
 800380c:	e011      	b.n	8003832 <LSM303DLHC_Write+0x3e>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 800380e:	4b63      	ldr	r3, [pc, #396]	; (800399c <LSM303DLHC_Write+0x1a8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	bf14      	ite	ne
 8003816:	2200      	movne	r2, #0
 8003818:	2201      	moveq	r2, #1
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	f103 31ff 	add.w	r1, r3, #4294967295
 8003820:	4b5e      	ldr	r3, [pc, #376]	; (800399c <LSM303DLHC_Write+0x1a8>)
 8003822:	6019      	str	r1, [r3, #0]
 8003824:	2a00      	cmp	r2, #0
 8003826:	d004      	beq.n	8003832 <LSM303DLHC_Write+0x3e>
 8003828:	f7ff fdfe 	bl	8003428 <LSM303DLHC_TIMEOUT_UserCallback>
 800382c:	4603      	mov	r3, r0
 800382e:	b29b      	uxth	r3, r3
 8003830:	e0af      	b.n	8003992 <LSM303DLHC_Write+0x19e>
  */
uint16_t LSM303DLHC_Write(uint8_t DeviceAddr, uint8_t RegAddr, uint8_t* pBuffer)
{  
  /* Test on BUSY Flag */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_BUSY) != RESET)
 8003832:	485b      	ldr	r0, [pc, #364]	; (80039a0 <LSM303DLHC_Write+0x1ac>)
 8003834:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003838:	f000 ff7a 	bl	8004730 <I2C_GetFlagStatus>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1e5      	bne.n	800380e <LSM303DLHC_Write+0x1a>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
  }
  
  /* Configure slave address, nbytes, reload, end mode and start or stop generation */
  I2C_TransferHandling(LSM303DLHC_I2C, DeviceAddr, 1, I2C_Reload_Mode, I2C_Generate_Start_Write);
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	b29b      	uxth	r3, r3
 8003846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800384a:	9200      	str	r2, [sp, #0]
 800384c:	4854      	ldr	r0, [pc, #336]	; (80039a0 <LSM303DLHC_Write+0x1ac>)
 800384e:	4619      	mov	r1, r3
 8003850:	f04f 0201 	mov.w	r2, #1
 8003854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003858:	f000 ff1e 	bl	8004698 <I2C_TransferHandling>
  
  /* Wait until TXIS flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;  
 800385c:	4b4f      	ldr	r3, [pc, #316]	; (800399c <LSM303DLHC_Write+0x1a8>)
 800385e:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8003862:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TXIS) == RESET)   
 8003864:	e011      	b.n	800388a <LSM303DLHC_Write+0x96>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 8003866:	4b4d      	ldr	r3, [pc, #308]	; (800399c <LSM303DLHC_Write+0x1a8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf14      	ite	ne
 800386e:	2200      	movne	r2, #0
 8003870:	2201      	moveq	r2, #1
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	f103 31ff 	add.w	r1, r3, #4294967295
 8003878:	4b48      	ldr	r3, [pc, #288]	; (800399c <LSM303DLHC_Write+0x1a8>)
 800387a:	6019      	str	r1, [r3, #0]
 800387c:	2a00      	cmp	r2, #0
 800387e:	d004      	beq.n	800388a <LSM303DLHC_Write+0x96>
 8003880:	f7ff fdd2 	bl	8003428 <LSM303DLHC_TIMEOUT_UserCallback>
 8003884:	4603      	mov	r3, r0
 8003886:	b29b      	uxth	r3, r3
 8003888:	e083      	b.n	8003992 <LSM303DLHC_Write+0x19e>
  /* Configure slave address, nbytes, reload, end mode and start or stop generation */
  I2C_TransferHandling(LSM303DLHC_I2C, DeviceAddr, 1, I2C_Reload_Mode, I2C_Generate_Start_Write);
  
  /* Wait until TXIS flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;  
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TXIS) == RESET)   
 800388a:	4845      	ldr	r0, [pc, #276]	; (80039a0 <LSM303DLHC_Write+0x1ac>)
 800388c:	f04f 0102 	mov.w	r1, #2
 8003890:	f000 ff4e 	bl	8004730 <I2C_GetFlagStatus>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0e5      	beq.n	8003866 <LSM303DLHC_Write+0x72>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
  }
  
  /* Send Register address */
  I2C_SendData(LSM303DLHC_I2C, (uint8_t) RegAddr);
 800389a:	79bb      	ldrb	r3, [r7, #6]
 800389c:	4840      	ldr	r0, [pc, #256]	; (80039a0 <LSM303DLHC_Write+0x1ac>)
 800389e:	4619      	mov	r1, r3
 80038a0:	f000 ff2a 	bl	80046f8 <I2C_SendData>
  
  /* Wait until TCR flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 80038a4:	4b3d      	ldr	r3, [pc, #244]	; (800399c <LSM303DLHC_Write+0x1a8>)
 80038a6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80038aa:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TCR) == RESET)
 80038ac:	e011      	b.n	80038d2 <LSM303DLHC_Write+0xde>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 80038ae:	4b3b      	ldr	r3, [pc, #236]	; (800399c <LSM303DLHC_Write+0x1a8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	bf14      	ite	ne
 80038b6:	2200      	movne	r2, #0
 80038b8:	2201      	moveq	r2, #1
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	f103 31ff 	add.w	r1, r3, #4294967295
 80038c0:	4b36      	ldr	r3, [pc, #216]	; (800399c <LSM303DLHC_Write+0x1a8>)
 80038c2:	6019      	str	r1, [r3, #0]
 80038c4:	2a00      	cmp	r2, #0
 80038c6:	d004      	beq.n	80038d2 <LSM303DLHC_Write+0xde>
 80038c8:	f7ff fdae 	bl	8003428 <LSM303DLHC_TIMEOUT_UserCallback>
 80038cc:	4603      	mov	r3, r0
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	e05f      	b.n	8003992 <LSM303DLHC_Write+0x19e>
  /* Send Register address */
  I2C_SendData(LSM303DLHC_I2C, (uint8_t) RegAddr);
  
  /* Wait until TCR flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TCR) == RESET)
 80038d2:	4833      	ldr	r0, [pc, #204]	; (80039a0 <LSM303DLHC_Write+0x1ac>)
 80038d4:	f04f 0180 	mov.w	r1, #128	; 0x80
 80038d8:	f000 ff2a 	bl	8004730 <I2C_GetFlagStatus>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0e5      	beq.n	80038ae <LSM303DLHC_Write+0xba>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
  }
  
  /* Configure slave address, nbytes, reload, end mode and start or stop generation */
  I2C_TransferHandling(LSM303DLHC_I2C, DeviceAddr, 1, I2C_AutoEnd_Mode, I2C_No_StartStop);
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	9200      	str	r2, [sp, #0]
 80038ec:	482c      	ldr	r0, [pc, #176]	; (80039a0 <LSM303DLHC_Write+0x1ac>)
 80038ee:	4619      	mov	r1, r3
 80038f0:	f04f 0201 	mov.w	r2, #1
 80038f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038f8:	f000 fece 	bl	8004698 <I2C_TransferHandling>
       
  /* Wait until TXIS flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 80038fc:	4b27      	ldr	r3, [pc, #156]	; (800399c <LSM303DLHC_Write+0x1a8>)
 80038fe:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8003902:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TXIS) == RESET)
 8003904:	e011      	b.n	800392a <LSM303DLHC_Write+0x136>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 8003906:	4b25      	ldr	r3, [pc, #148]	; (800399c <LSM303DLHC_Write+0x1a8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	bf14      	ite	ne
 800390e:	2200      	movne	r2, #0
 8003910:	2201      	moveq	r2, #1
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	f103 31ff 	add.w	r1, r3, #4294967295
 8003918:	4b20      	ldr	r3, [pc, #128]	; (800399c <LSM303DLHC_Write+0x1a8>)
 800391a:	6019      	str	r1, [r3, #0]
 800391c:	2a00      	cmp	r2, #0
 800391e:	d004      	beq.n	800392a <LSM303DLHC_Write+0x136>
 8003920:	f7ff fd82 	bl	8003428 <LSM303DLHC_TIMEOUT_UserCallback>
 8003924:	4603      	mov	r3, r0
 8003926:	b29b      	uxth	r3, r3
 8003928:	e033      	b.n	8003992 <LSM303DLHC_Write+0x19e>
  /* Configure slave address, nbytes, reload, end mode and start or stop generation */
  I2C_TransferHandling(LSM303DLHC_I2C, DeviceAddr, 1, I2C_AutoEnd_Mode, I2C_No_StartStop);
       
  /* Wait until TXIS flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TXIS) == RESET)
 800392a:	481d      	ldr	r0, [pc, #116]	; (80039a0 <LSM303DLHC_Write+0x1ac>)
 800392c:	f04f 0102 	mov.w	r1, #2
 8003930:	f000 fefe 	bl	8004730 <I2C_GetFlagStatus>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0e5      	beq.n	8003906 <LSM303DLHC_Write+0x112>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
  }  
    
  /* Write data to TXDR */
  I2C_SendData(LSM303DLHC_I2C, *pBuffer);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	4818      	ldr	r0, [pc, #96]	; (80039a0 <LSM303DLHC_Write+0x1ac>)
 8003940:	4619      	mov	r1, r3
 8003942:	f000 fed9 	bl	80046f8 <I2C_SendData>
      
  /* Wait until STOPF flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <LSM303DLHC_Write+0x1a8>)
 8003948:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800394c:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_STOPF) == RESET)
 800394e:	e011      	b.n	8003974 <LSM303DLHC_Write+0x180>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 8003950:	4b12      	ldr	r3, [pc, #72]	; (800399c <LSM303DLHC_Write+0x1a8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf14      	ite	ne
 8003958:	2200      	movne	r2, #0
 800395a:	2201      	moveq	r2, #1
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	f103 31ff 	add.w	r1, r3, #4294967295
 8003962:	4b0e      	ldr	r3, [pc, #56]	; (800399c <LSM303DLHC_Write+0x1a8>)
 8003964:	6019      	str	r1, [r3, #0]
 8003966:	2a00      	cmp	r2, #0
 8003968:	d004      	beq.n	8003974 <LSM303DLHC_Write+0x180>
 800396a:	f7ff fd5d 	bl	8003428 <LSM303DLHC_TIMEOUT_UserCallback>
 800396e:	4603      	mov	r3, r0
 8003970:	b29b      	uxth	r3, r3
 8003972:	e00e      	b.n	8003992 <LSM303DLHC_Write+0x19e>
  /* Write data to TXDR */
  I2C_SendData(LSM303DLHC_I2C, *pBuffer);
      
  /* Wait until STOPF flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_STOPF) == RESET)
 8003974:	480a      	ldr	r0, [pc, #40]	; (80039a0 <LSM303DLHC_Write+0x1ac>)
 8003976:	f04f 0120 	mov.w	r1, #32
 800397a:	f000 fed9 	bl	8004730 <I2C_GetFlagStatus>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0e5      	beq.n	8003950 <LSM303DLHC_Write+0x15c>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
  }   
  
  /* Clear STOPF flag */
  I2C_ClearFlag(LSM303DLHC_I2C, I2C_ICR_STOPCF);
 8003984:	4806      	ldr	r0, [pc, #24]	; (80039a0 <LSM303DLHC_Write+0x1ac>)
 8003986:	f04f 0120 	mov.w	r1, #32
 800398a:	f000 fef5 	bl	8004778 <I2C_ClearFlag>
  
  return LSM303DLHC_OK;
 800398e:	f04f 0300 	mov.w	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	f107 0708 	add.w	r7, r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	200000fc 	.word	0x200000fc
 80039a0:	40005400 	.word	0x40005400

080039a4 <LSM303DLHC_Read>:
  * @param  pBuffer : pointer to the buffer that receives the data read from the LSM303DLH.
  * @param  NumByteToRead : number of bytes to read from the LSM303DLH ( NumByteToRead >1  only for the Mgnetometer readinf).
  * @retval LSM303DLHC register value
  */
uint16_t LSM303DLHC_Read(uint8_t DeviceAddr, uint8_t RegAddr, uint8_t* pBuffer, uint16_t NumByteToRead)
{    
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	603a      	str	r2, [r7, #0]
 80039ac:	4602      	mov	r2, r0
 80039ae:	71fa      	strb	r2, [r7, #7]
 80039b0:	460a      	mov	r2, r1
 80039b2:	71ba      	strb	r2, [r7, #6]
 80039b4:	80bb      	strh	r3, [r7, #4]
  /* Test on BUSY Flag */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 80039b6:	4b70      	ldr	r3, [pc, #448]	; (8003b78 <LSM303DLHC_Read+0x1d4>)
 80039b8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80039bc:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_BUSY) != RESET)
 80039be:	e011      	b.n	80039e4 <LSM303DLHC_Read+0x40>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 80039c0:	4b6d      	ldr	r3, [pc, #436]	; (8003b78 <LSM303DLHC_Read+0x1d4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bf14      	ite	ne
 80039c8:	2200      	movne	r2, #0
 80039ca:	2201      	moveq	r2, #1
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	f103 31ff 	add.w	r1, r3, #4294967295
 80039d2:	4b69      	ldr	r3, [pc, #420]	; (8003b78 <LSM303DLHC_Read+0x1d4>)
 80039d4:	6019      	str	r1, [r3, #0]
 80039d6:	2a00      	cmp	r2, #0
 80039d8:	d004      	beq.n	80039e4 <LSM303DLHC_Read+0x40>
 80039da:	f7ff fd25 	bl	8003428 <LSM303DLHC_TIMEOUT_UserCallback>
 80039de:	4603      	mov	r3, r0
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	e0c4      	b.n	8003b6e <LSM303DLHC_Read+0x1ca>
  */
uint16_t LSM303DLHC_Read(uint8_t DeviceAddr, uint8_t RegAddr, uint8_t* pBuffer, uint16_t NumByteToRead)
{    
  /* Test on BUSY Flag */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_BUSY) != RESET)
 80039e4:	4865      	ldr	r0, [pc, #404]	; (8003b7c <LSM303DLHC_Read+0x1d8>)
 80039e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039ea:	f000 fea1 	bl	8004730 <I2C_GetFlagStatus>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1e5      	bne.n	80039c0 <LSM303DLHC_Read+0x1c>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
  }
  
  /* Configure slave address, nbytes, reload, end mode and start or stop generation */
  I2C_TransferHandling(LSM303DLHC_I2C, DeviceAddr, 1, I2C_SoftEnd_Mode, I2C_Generate_Start_Write);
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039fc:	9200      	str	r2, [sp, #0]
 80039fe:	485f      	ldr	r0, [pc, #380]	; (8003b7c <LSM303DLHC_Read+0x1d8>)
 8003a00:	4619      	mov	r1, r3
 8003a02:	f04f 0201 	mov.w	r2, #1
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	f000 fe45 	bl	8004698 <I2C_TransferHandling>
  
  /* Wait until TXIS flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 8003a0e:	4b5a      	ldr	r3, [pc, #360]	; (8003b78 <LSM303DLHC_Read+0x1d4>)
 8003a10:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8003a14:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TXIS) == RESET)
 8003a16:	e011      	b.n	8003a3c <LSM303DLHC_Read+0x98>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 8003a18:	4b57      	ldr	r3, [pc, #348]	; (8003b78 <LSM303DLHC_Read+0x1d4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf14      	ite	ne
 8003a20:	2200      	movne	r2, #0
 8003a22:	2201      	moveq	r2, #1
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	f103 31ff 	add.w	r1, r3, #4294967295
 8003a2a:	4b53      	ldr	r3, [pc, #332]	; (8003b78 <LSM303DLHC_Read+0x1d4>)
 8003a2c:	6019      	str	r1, [r3, #0]
 8003a2e:	2a00      	cmp	r2, #0
 8003a30:	d004      	beq.n	8003a3c <LSM303DLHC_Read+0x98>
 8003a32:	f7ff fcf9 	bl	8003428 <LSM303DLHC_TIMEOUT_UserCallback>
 8003a36:	4603      	mov	r3, r0
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	e098      	b.n	8003b6e <LSM303DLHC_Read+0x1ca>
  /* Configure slave address, nbytes, reload, end mode and start or stop generation */
  I2C_TransferHandling(LSM303DLHC_I2C, DeviceAddr, 1, I2C_SoftEnd_Mode, I2C_Generate_Start_Write);
  
  /* Wait until TXIS flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TXIS) == RESET)
 8003a3c:	484f      	ldr	r0, [pc, #316]	; (8003b7c <LSM303DLHC_Read+0x1d8>)
 8003a3e:	f04f 0102 	mov.w	r1, #2
 8003a42:	f000 fe75 	bl	8004730 <I2C_GetFlagStatus>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0e5      	beq.n	8003a18 <LSM303DLHC_Read+0x74>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
  }
  
  if(NumByteToRead>1)
 8003a4c:	88bb      	ldrh	r3, [r7, #4]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d903      	bls.n	8003a5a <LSM303DLHC_Read+0xb6>
      RegAddr |= 0x80;
 8003a52:	79bb      	ldrb	r3, [r7, #6]
 8003a54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a58:	71bb      	strb	r3, [r7, #6]

  
  /* Send Register address */
  I2C_SendData(LSM303DLHC_I2C, (uint8_t)RegAddr);
 8003a5a:	79bb      	ldrb	r3, [r7, #6]
 8003a5c:	4847      	ldr	r0, [pc, #284]	; (8003b7c <LSM303DLHC_Read+0x1d8>)
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f000 fe4a 	bl	80046f8 <I2C_SendData>
  
  /* Wait until TC flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 8003a64:	4b44      	ldr	r3, [pc, #272]	; (8003b78 <LSM303DLHC_Read+0x1d4>)
 8003a66:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8003a6a:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TC) == RESET)
 8003a6c:	e011      	b.n	8003a92 <LSM303DLHC_Read+0xee>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 8003a6e:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <LSM303DLHC_Read+0x1d4>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bf14      	ite	ne
 8003a76:	2200      	movne	r2, #0
 8003a78:	2201      	moveq	r2, #1
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	f103 31ff 	add.w	r1, r3, #4294967295
 8003a80:	4b3d      	ldr	r3, [pc, #244]	; (8003b78 <LSM303DLHC_Read+0x1d4>)
 8003a82:	6019      	str	r1, [r3, #0]
 8003a84:	2a00      	cmp	r2, #0
 8003a86:	d004      	beq.n	8003a92 <LSM303DLHC_Read+0xee>
 8003a88:	f7ff fcce 	bl	8003428 <LSM303DLHC_TIMEOUT_UserCallback>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	e06d      	b.n	8003b6e <LSM303DLHC_Read+0x1ca>
  /* Send Register address */
  I2C_SendData(LSM303DLHC_I2C, (uint8_t)RegAddr);
  
  /* Wait until TC flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_TC) == RESET)
 8003a92:	483a      	ldr	r0, [pc, #232]	; (8003b7c <LSM303DLHC_Read+0x1d8>)
 8003a94:	f04f 0140 	mov.w	r1, #64	; 0x40
 8003a98:	f000 fe4a 	bl	8004730 <I2C_GetFlagStatus>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0e5      	beq.n	8003a6e <LSM303DLHC_Read+0xca>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
  }  
  
  /* Configure slave address, nbytes, reload, end mode and start or stop generation */
  I2C_TransferHandling(LSM303DLHC_I2C, DeviceAddr, NumByteToRead, I2C_AutoEnd_Mode, I2C_Generate_Start_Read);
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	88bb      	ldrh	r3, [r7, #4]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8003aae:	9100      	str	r1, [sp, #0]
 8003ab0:	4832      	ldr	r0, [pc, #200]	; (8003b7c <LSM303DLHC_Read+0x1d8>)
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aba:	f000 fded 	bl	8004698 <I2C_TransferHandling>
  
  /* Wait until all data are received */
  while (NumByteToRead)
 8003abe:	e02d      	b.n	8003b1c <LSM303DLHC_Read+0x178>
  {   
    /* Wait until RXNE flag is set */
    LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 8003ac0:	4b2d      	ldr	r3, [pc, #180]	; (8003b78 <LSM303DLHC_Read+0x1d4>)
 8003ac2:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8003ac6:	601a      	str	r2, [r3, #0]
    while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_RXNE) == RESET)    
 8003ac8:	e011      	b.n	8003aee <LSM303DLHC_Read+0x14a>
    {
      if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 8003aca:	4b2b      	ldr	r3, [pc, #172]	; (8003b78 <LSM303DLHC_Read+0x1d4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf14      	ite	ne
 8003ad2:	2200      	movne	r2, #0
 8003ad4:	2201      	moveq	r2, #1
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	f103 31ff 	add.w	r1, r3, #4294967295
 8003adc:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <LSM303DLHC_Read+0x1d4>)
 8003ade:	6019      	str	r1, [r3, #0]
 8003ae0:	2a00      	cmp	r2, #0
 8003ae2:	d004      	beq.n	8003aee <LSM303DLHC_Read+0x14a>
 8003ae4:	f7ff fca0 	bl	8003428 <LSM303DLHC_TIMEOUT_UserCallback>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	e03f      	b.n	8003b6e <LSM303DLHC_Read+0x1ca>
  /* Wait until all data are received */
  while (NumByteToRead)
  {   
    /* Wait until RXNE flag is set */
    LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
    while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_RXNE) == RESET)    
 8003aee:	4823      	ldr	r0, [pc, #140]	; (8003b7c <LSM303DLHC_Read+0x1d8>)
 8003af0:	f04f 0104 	mov.w	r1, #4
 8003af4:	f000 fe1c 	bl	8004730 <I2C_GetFlagStatus>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0e5      	beq.n	8003aca <LSM303DLHC_Read+0x126>
    {
      if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
    }
    
    /* Read data from RXDR */
    *pBuffer = I2C_ReceiveData(LSM303DLHC_I2C);
 8003afe:	481f      	ldr	r0, [pc, #124]	; (8003b7c <LSM303DLHC_Read+0x1d8>)
 8003b00:	f000 fe08 	bl	8004714 <I2C_ReceiveData>
 8003b04:	4603      	mov	r3, r0
 8003b06:	461a      	mov	r2, r3
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	701a      	strb	r2, [r3, #0]
    /* Point to the next location where the byte read will be saved */
    pBuffer++;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	f103 0301 	add.w	r3, r3, #1
 8003b12:	603b      	str	r3, [r7, #0]
    
    /* Decrement the read bytes counter */
    NumByteToRead--;
 8003b14:	88bb      	ldrh	r3, [r7, #4]
 8003b16:	f103 33ff 	add.w	r3, r3, #4294967295
 8003b1a:	80bb      	strh	r3, [r7, #4]
  
  /* Configure slave address, nbytes, reload, end mode and start or stop generation */
  I2C_TransferHandling(LSM303DLHC_I2C, DeviceAddr, NumByteToRead, I2C_AutoEnd_Mode, I2C_Generate_Start_Read);
  
  /* Wait until all data are received */
  while (NumByteToRead)
 8003b1c:	88bb      	ldrh	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1ce      	bne.n	8003ac0 <LSM303DLHC_Read+0x11c>
    /* Decrement the read bytes counter */
    NumByteToRead--;
  } 
  
  /* Wait until STOPF flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
 8003b22:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <LSM303DLHC_Read+0x1d4>)
 8003b24:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8003b28:	601a      	str	r2, [r3, #0]
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_STOPF) == RESET)   
 8003b2a:	e011      	b.n	8003b50 <LSM303DLHC_Read+0x1ac>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
 8003b2c:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <LSM303DLHC_Read+0x1d4>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf14      	ite	ne
 8003b34:	2200      	movne	r2, #0
 8003b36:	2201      	moveq	r2, #1
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	f103 31ff 	add.w	r1, r3, #4294967295
 8003b3e:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <LSM303DLHC_Read+0x1d4>)
 8003b40:	6019      	str	r1, [r3, #0]
 8003b42:	2a00      	cmp	r2, #0
 8003b44:	d004      	beq.n	8003b50 <LSM303DLHC_Read+0x1ac>
 8003b46:	f7ff fc6f 	bl	8003428 <LSM303DLHC_TIMEOUT_UserCallback>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	e00e      	b.n	8003b6e <LSM303DLHC_Read+0x1ca>
    NumByteToRead--;
  } 
  
  /* Wait until STOPF flag is set */
  LSM303DLHC_Timeout = LSM303DLHC_LONG_TIMEOUT;
  while(I2C_GetFlagStatus(LSM303DLHC_I2C, I2C_ISR_STOPF) == RESET)   
 8003b50:	480a      	ldr	r0, [pc, #40]	; (8003b7c <LSM303DLHC_Read+0x1d8>)
 8003b52:	f04f 0120 	mov.w	r1, #32
 8003b56:	f000 fdeb 	bl	8004730 <I2C_GetFlagStatus>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0e5      	beq.n	8003b2c <LSM303DLHC_Read+0x188>
  {
    if((LSM303DLHC_Timeout--) == 0) return LSM303DLHC_TIMEOUT_UserCallback();
  }
  
  /* Clear STOPF flag */
  I2C_ClearFlag(LSM303DLHC_I2C, I2C_ICR_STOPCF);
 8003b60:	4806      	ldr	r0, [pc, #24]	; (8003b7c <LSM303DLHC_Read+0x1d8>)
 8003b62:	f04f 0120 	mov.w	r1, #32
 8003b66:	f000 fe07 	bl	8004778 <I2C_ClearFlag>
  
  /* If all operations OK */
  return LSM303DLHC_OK;  
 8003b6a:	f04f 0300 	mov.w	r3, #0
}  
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f107 0708 	add.w	r7, r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	200000fc 	.word	0x200000fc
 8003b7c:	40005400 	.word	0x40005400

08003b80 <LSM303DLHC_LowLevel_Init>:
* @brief  Initializes the low level interface used to drive the LSM303DLHC
* @param  None
* @retval None
*/
static void LSM303DLHC_LowLevel_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08c      	sub	sp, #48	; 0x30
 8003b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  I2C_InitTypeDef  I2C_InitStructure;
  
  /* Enable the I2C periph */
  RCC_APB1PeriphClockCmd(LSM303DLHC_I2C_CLK, ENABLE);
 8003b86:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003b8a:	f04f 0101 	mov.w	r1, #1
 8003b8e:	f001 f861 	bl	8004c54 <RCC_APB1PeriphClockCmd>
  
  /* Enable SCK and SDA GPIO clocks */
  RCC_AHBPeriphClockCmd(LSM303DLHC_I2C_SCK_GPIO_CLK | LSM303DLHC_I2C_SDA_GPIO_CLK , ENABLE);
 8003b92:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003b96:	f04f 0101 	mov.w	r1, #1
 8003b9a:	f001 f81b 	bl	8004bd4 <RCC_AHBPeriphClockCmd>
  
  /* Enable INT1 GPIO clock */
  RCC_AHBPeriphClockCmd(LSM303DLHC_I2C_INT1_GPIO_CLK, ENABLE);
 8003b9e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003ba2:	f04f 0101 	mov.w	r1, #1
 8003ba6:	f001 f815 	bl	8004bd4 <RCC_AHBPeriphClockCmd>
  
  /* Enable INT2 GPIO clock */
  RCC_AHBPeriphClockCmd(LSM303DLHC_I2C_INT2_GPIO_CLK, ENABLE);
 8003baa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003bae:	f04f 0101 	mov.w	r1, #1
 8003bb2:	f001 f80f 	bl	8004bd4 <RCC_AHBPeriphClockCmd>
  
  /* Enable DRDY clock */
  RCC_AHBPeriphClockCmd(LSM303DLHC_DRDY_GPIO_CLK, ENABLE);
 8003bb6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003bba:	f04f 0101 	mov.w	r1, #1
 8003bbe:	f001 f809 	bl	8004bd4 <RCC_AHBPeriphClockCmd>
  
  GPIO_PinAFConfig(LSM303DLHC_I2C_SCK_GPIO_PORT, LSM303DLHC_I2C_SCK_SOURCE, LSM303DLHC_I2C_SCK_AF);
 8003bc2:	4854      	ldr	r0, [pc, #336]	; (8003d14 <LSM303DLHC_LowLevel_Init+0x194>)
 8003bc4:	f04f 0106 	mov.w	r1, #6
 8003bc8:	f04f 0204 	mov.w	r2, #4
 8003bcc:	f000 fc8c 	bl	80044e8 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(LSM303DLHC_I2C_SDA_GPIO_PORT, LSM303DLHC_I2C_SDA_SOURCE, LSM303DLHC_I2C_SDA_AF);
 8003bd0:	4850      	ldr	r0, [pc, #320]	; (8003d14 <LSM303DLHC_LowLevel_Init+0x194>)
 8003bd2:	f04f 0107 	mov.w	r1, #7
 8003bd6:	f04f 0204 	mov.w	r2, #4
 8003bda:	f000 fc85 	bl	80044e8 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003bde:	f04f 0302 	mov.w	r3, #2
 8003be2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
 8003bee:	f04f 0302 	mov.w	r3, #2
 8003bf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003bf6:	f04f 0303 	mov.w	r3, #3
 8003bfa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  
  /* I2C SCK pin configuration */
  GPIO_InitStructure.GPIO_Pin = LSM303DLHC_I2C_SCK_PIN;
 8003bfe:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init(LSM303DLHC_I2C_SCK_GPIO_PORT, &GPIO_InitStructure);
 8003c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c08:	4842      	ldr	r0, [pc, #264]	; (8003d14 <LSM303DLHC_LowLevel_Init+0x194>)
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	f000 fb88 	bl	8004320 <GPIO_Init>
  
  /* I2C SDA pin configuration */
  GPIO_InitStructure.GPIO_Pin =  LSM303DLHC_I2C_SDA_PIN;
 8003c10:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init(LSM303DLHC_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);
 8003c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c1a:	483e      	ldr	r0, [pc, #248]	; (8003d14 <LSM303DLHC_LowLevel_Init+0x194>)
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	f000 fb7f 	bl	8004320 <GPIO_Init>
  
  /* Mems DRDY */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003c3a:	f04f 0303 	mov.w	r3, #3
 8003c3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.GPIO_Pin = LSM303DLHC_DRDY_PIN;
 8003c42:	f04f 0304 	mov.w	r3, #4
 8003c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init(LSM303DLHC_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8003c48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c4c:	4832      	ldr	r0, [pc, #200]	; (8003d18 <LSM303DLHC_LowLevel_Init+0x198>)
 8003c4e:	4619      	mov	r1, r3
 8003c50:	f000 fb66 	bl	8004320 <GPIO_Init>
  
  /* Connect EXTI Line to Mems DRDY Pin */
  SYSCFG_EXTILineConfig(LSM303DLHC_DRDY_EXTI_PORT_SOURCE, LSM303DLHC_DRDY_EXTI_PIN_SOURCE);
 8003c54:	f04f 0004 	mov.w	r0, #4
 8003c58:	f04f 0102 	mov.w	r1, #2
 8003c5c:	f001 f868 	bl	8004d30 <SYSCFG_EXTILineConfig>
  
  EXTI_InitStructure.EXTI_Line = LSM303DLHC_DRDY_EXTI_LINE;
 8003c60:	f04f 0302 	mov.w	r3, #2
 8003c64:	623b      	str	r3, [r7, #32]
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8003c6e:	f04f 0308 	mov.w	r3, #8
 8003c72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8003c76:	f04f 0301 	mov.w	r3, #1
 8003c7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
  EXTI_Init(&EXTI_InitStructure);
 8003c7e:	f107 0320 	add.w	r3, r7, #32
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 f9c8 	bl	8004018 <EXTI_Init>
  
  /* I2C configuration -------------------------------------------------------*/
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
  I2C_InitStructure.I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	60bb      	str	r3, [r7, #8]
  I2C_InitStructure.I2C_DigitalFilter = 0x00;
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
  I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
  I2C_InitStructure.I2C_Timing = 0x00902025;
 8003cac:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <LSM303DLHC_LowLevel_Init+0x19c>)
 8003cae:	607b      	str	r3, [r7, #4]
  
  /* Apply LSM303DLHC_I2C configuration after enabling it */
  I2C_Init(LSM303DLHC_I2C, &I2C_InitStructure);
 8003cb0:	f107 0304 	add.w	r3, r7, #4
 8003cb4:	481a      	ldr	r0, [pc, #104]	; (8003d20 <LSM303DLHC_LowLevel_Init+0x1a0>)
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	f000 fc6a 	bl	8004590 <I2C_Init>
  
  /* LSM303DLHC_I2C Peripheral Enable */
  I2C_Cmd(LSM303DLHC_I2C, ENABLE);
 8003cbc:	4818      	ldr	r0, [pc, #96]	; (8003d20 <LSM303DLHC_LowLevel_Init+0x1a0>)
 8003cbe:	f04f 0101 	mov.w	r1, #1
 8003cc2:	f000 fccd 	bl	8004660 <I2C_Cmd>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.GPIO_Pin = LSM303DLHC_I2C_INT1_PIN;
 8003cc6:	f04f 0310 	mov.w	r3, #16
 8003cca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003cdc:	f04f 0303 	mov.w	r3, #3
 8003ce0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  GPIO_Init(LSM303DLHC_I2C_INT1_GPIO_PORT, &GPIO_InitStructure);
 8003cec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cf0:	4809      	ldr	r0, [pc, #36]	; (8003d18 <LSM303DLHC_LowLevel_Init+0x198>)
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	f000 fb14 	bl	8004320 <GPIO_Init>
  
  GPIO_InitStructure.GPIO_Pin = LSM303DLHC_I2C_INT2_PIN;
 8003cf8:	f04f 0320 	mov.w	r3, #32
 8003cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init(LSM303DLHC_I2C_INT2_GPIO_PORT, &GPIO_InitStructure);
 8003cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d02:	4805      	ldr	r0, [pc, #20]	; (8003d18 <LSM303DLHC_LowLevel_Init+0x198>)
 8003d04:	4619      	mov	r1, r3
 8003d06:	f000 fb0b 	bl	8004320 <GPIO_Init>
}  
 8003d0a:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	48000400 	.word	0x48000400
 8003d18:	48001000 	.word	0x48001000
 8003d1c:	00902025 	.word	0x00902025
 8003d20:	40005400 	.word	0x40005400

08003d24 <STM_EVAL_LEDInit>:
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHBPeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8003d2e:	79fa      	ldrb	r2, [r7, #7]
 8003d30:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <STM_EVAL_LEDInit+0x5c>)
 8003d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f04f 0101 	mov.w	r1, #1
 8003d3c:	f000 ff4a 	bl	8004bd4 <RCC_AHBPeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8003d40:	79fa      	ldrb	r2, [r7, #7]
 8003d42:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <STM_EVAL_LEDInit+0x60>)
 8003d44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003d48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003d4a:	f04f 0301 	mov.w	r3, #1
 8003d4e:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003d56:	f04f 0301 	mov.w	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003d5c:	f04f 0303 	mov.w	r3, #3
 8003d60:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8003d62:	79fa      	ldrb	r2, [r7, #7]
 8003d64:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <STM_EVAL_LEDInit+0x64>)
 8003d66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d6a:	f107 0308 	add.w	r3, r7, #8
 8003d6e:	4610      	mov	r0, r2
 8003d70:	4619      	mov	r1, r3
 8003d72:	f000 fad5 	bl	8004320 <GPIO_Init>
}
 8003d76:	f107 0710 	add.w	r7, r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	08004df8 	.word	0x08004df8
 8003d84:	08004de8 	.word	0x08004de8
 8003d88:	20000100 	.word	0x20000100

08003d8c <STM_EVAL_LEDOn>:
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRR = GPIO_PIN[Led];
 8003d96:	79fa      	ldrb	r2, [r7, #7]
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <STM_EVAL_LEDOn+0x28>)
 8003d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d9e:	79f9      	ldrb	r1, [r7, #7]
 8003da0:	4a05      	ldr	r2, [pc, #20]	; (8003db8 <STM_EVAL_LEDOn+0x2c>)
 8003da2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003da6:	619a      	str	r2, [r3, #24]
}
 8003da8:	f107 070c 	add.w	r7, r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000100 	.word	0x20000100
 8003db8:	08004de8 	.word	0x08004de8

08003dbc <STM_EVAL_LEDOff>:
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BRR = GPIO_PIN[Led];  
 8003dc6:	79fa      	ldrb	r2, [r7, #7]
 8003dc8:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <STM_EVAL_LEDOff+0x28>)
 8003dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dce:	79f9      	ldrb	r1, [r7, #7]
 8003dd0:	4a05      	ldr	r2, [pc, #20]	; (8003de8 <STM_EVAL_LEDOff+0x2c>)
 8003dd2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003dd6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8003dd8:	f107 070c 	add.w	r7, r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000100 	.word	0x20000100
 8003de8:	08004de8 	.word	0x08004de8

08003dec <STM_EVAL_LEDToggle>:
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8003df6:	79fa      	ldrb	r2, [r7, #7]
 8003df8:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <STM_EVAL_LEDToggle+0x38>)
 8003dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dfe:	79f9      	ldrb	r1, [r7, #7]
 8003e00:	4a08      	ldr	r2, [pc, #32]	; (8003e24 <STM_EVAL_LEDToggle+0x38>)
 8003e02:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003e06:	8a92      	ldrh	r2, [r2, #20]
 8003e08:	b291      	uxth	r1, r2
 8003e0a:	79f8      	ldrb	r0, [r7, #7]
 8003e0c:	4a06      	ldr	r2, [pc, #24]	; (8003e28 <STM_EVAL_LEDToggle+0x3c>)
 8003e0e:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8003e12:	404a      	eors	r2, r1
 8003e14:	b292      	uxth	r2, r2
 8003e16:	829a      	strh	r2, [r3, #20]
}
 8003e18:	f107 070c 	add.w	r7, r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	20000100 	.word	0x20000100
 8003e28:	08004de8 	.word	0x08004de8

08003e2c <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	71fa      	strb	r2, [r7, #7]
 8003e38:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHBPeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8003e3a:	79fa      	ldrb	r2, [r7, #7]
 8003e3c:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <STM_EVAL_PBInit+0xc4>)
 8003e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f04f 0101 	mov.w	r1, #1
 8003e48:	f000 fec4 	bl	8004bd4 <RCC_AHBPeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8003e4c:	f04f 0001 	mov.w	r0, #1
 8003e50:	f04f 0101 	mov.w	r1, #1
 8003e54:	f000 fede 	bl	8004c14 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8003e64:	79fa      	ldrb	r2, [r7, #7]
 8003e66:	4b23      	ldr	r3, [pc, #140]	; (8003ef4 <STM_EVAL_PBInit+0xc8>)
 8003e68:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003e6c:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8003e6e:	79fa      	ldrb	r2, [r7, #7]
 8003e70:	4b21      	ldr	r3, [pc, #132]	; (8003ef8 <STM_EVAL_PBInit+0xcc>)
 8003e72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e76:	f107 0318 	add.w	r3, r7, #24
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	f000 fa4f 	bl	8004320 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8003e82:	79bb      	ldrb	r3, [r7, #6]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d12e      	bne.n	8003ee6 <STM_EVAL_PBInit+0xba>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	4a1c      	ldr	r2, [pc, #112]	; (8003efc <STM_EVAL_PBInit+0xd0>)
 8003e8c:	5cd2      	ldrb	r2, [r2, r3]
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	491b      	ldr	r1, [pc, #108]	; (8003f00 <STM_EVAL_PBInit+0xd4>)
 8003e92:	5ccb      	ldrb	r3, [r1, r3]
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	f000 ff4a 	bl	8004d30 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8003e9c:	79fa      	ldrb	r2, [r7, #7]
 8003e9e:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <STM_EVAL_PBInit+0xd8>)
 8003ea0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003ea4:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8003ea6:	f04f 0300 	mov.w	r3, #0
 8003eaa:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8003eac:	f04f 0308 	mov.w	r3, #8
 8003eb0:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8003eb2:	f04f 0301 	mov.w	r3, #1
 8003eb6:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8003eb8:	f107 0310 	add.w	r3, r7, #16
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 f8ab 	bl	8004018 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	4a10      	ldr	r2, [pc, #64]	; (8003f08 <STM_EVAL_PBInit+0xdc>)
 8003ec6:	5cd3      	ldrb	r3, [r2, r3]
 8003ec8:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8003eca:	f04f 030f 	mov.w	r3, #15
 8003ece:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8003ed0:	f04f 030f 	mov.w	r3, #15
 8003ed4:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003ed6:	f04f 0301 	mov.w	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 8003edc:	f107 030c 	add.w	r3, r7, #12
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 f82f 	bl	8003f44 <NVIC_Init>
  }
}
 8003ee6:	f107 0720 	add.w	r7, r7, #32
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	08004e1c 	.word	0x08004e1c
 8003ef4:	08004e18 	.word	0x08004e18
 8003ef8:	20000120 	.word	0x20000120
 8003efc:	08004e24 	.word	0x08004e24
 8003f00:	08004e28 	.word	0x08004e28
 8003f04:	08004e20 	.word	0x08004e20
 8003f08:	08004e2c 	.word	0x08004e2c

08003f0c <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8003f16:	79fa      	ldrb	r2, [r7, #7]
 8003f18:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <STM_EVAL_PBGetState+0x30>)
 8003f1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f1e:	79f9      	ldrb	r1, [r7, #7]
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <STM_EVAL_PBGetState+0x34>)
 8003f22:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003f26:	4610      	mov	r0, r2
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f000 faa1 	bl	8004470 <GPIO_ReadInputDataBit>
 8003f2e:	4603      	mov	r3, r0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	f107 0708 	add.w	r7, r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000120 	.word	0x20000120
 8003f40:	08004e18 	.word	0x08004e18

08003f44 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	f04f 030f 	mov.w	r3, #15
 8003f5c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  //assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  //assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  //assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	78db      	ldrb	r3, [r3, #3]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d03d      	beq.n	8003fe2 <NVIC_Init+0x9e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003f66:	4b2a      	ldr	r3, [pc, #168]	; (8004010 <NVIC_Init+0xcc>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	ea6f 0303 	mvn.w	r3, r3
 8003f6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f72:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8003f76:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f1c3 0304 	rsb	r3, r3, #4
 8003f7e:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
 8003f88:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	785b      	ldrb	r3, [r3, #1]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	789b      	ldrb	r3, [r3, #2]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003fae:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003fb0:	4918      	ldr	r1, [pc, #96]	; (8004014 <NVIC_Init+0xd0>)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	18cb      	adds	r3, r1, r3
 8003fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003fc0:	4b14      	ldr	r3, [pc, #80]	; (8004014 <NVIC_Init+0xd0>)
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	7812      	ldrb	r2, [r2, #0]
 8003fc6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8003fca:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	7809      	ldrb	r1, [r1, #0]
 8003fd0:	f001 011f 	and.w	r1, r1, #31
 8003fd4:	f04f 0001 	mov.w	r0, #1
 8003fd8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003fe0:	e011      	b.n	8004006 <NVIC_Init+0xc2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <NVIC_Init+0xd0>)
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	7812      	ldrb	r2, [r2, #0]
 8003fe8:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8003fec:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	7809      	ldrb	r1, [r1, #0]
 8003ff2:	f001 011f 	and.w	r1, r1, #31
 8003ff6:	f04f 0001 	mov.w	r0, #1
 8003ffa:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003ffe:	f102 0220 	add.w	r2, r2, #32
 8004002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8004006:	f107 071c 	add.w	r7, r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	e000ed00 	.word	0xe000ed00
 8004014:	e000e100 	.word	0xe000e100

08004018 <EXTI_Init>:
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]
  //assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  //assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  //assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  //assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8004026:	4b8c      	ldr	r3, [pc, #560]	; (8004258 <EXTI_Init+0x240>)
 8004028:	60fb      	str	r3, [r7, #12]
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	799b      	ldrb	r3, [r3, #6]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 80f0 	beq.w	8004214 <EXTI_Init+0x1fc>
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800403c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004040:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8004044:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8004048:	461a      	mov	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8004052:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004056:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800405a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800405e:	6819      	ldr	r1, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	f04f 0001 	mov.w	r0, #1
 800406c:	fa00 f303 	lsl.w	r3, r0, r3
 8004070:	ea6f 0303 	mvn.w	r3, r3
 8004074:	400b      	ands	r3, r1
 8004076:	6013      	str	r3, [r2, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8004080:	ea4f 1243 	mov.w	r2, r3, lsl #5
 8004084:	4b75      	ldr	r3, [pc, #468]	; (800425c <EXTI_Init+0x244>)
 8004086:	18d3      	adds	r3, r2, r3
 8004088:	461a      	mov	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8004092:	ea4f 1143 	mov.w	r1, r3, lsl #5
 8004096:	4b71      	ldr	r3, [pc, #452]	; (800425c <EXTI_Init+0x244>)
 8004098:	18cb      	adds	r3, r1, r3
 800409a:	6819      	ldr	r1, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 031f 	and.w	r3, r3, #31
 80040a4:	f04f 0001 	mov.w	r0, #1
 80040a8:	fa00 f303 	lsl.w	r3, r0, r3
 80040ac:	ea6f 0303 	mvn.w	r3, r3
 80040b0:	400b      	ands	r3, r1
 80040b2:	6013      	str	r3, [r2, #0]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	791b      	ldrb	r3, [r3, #4]
 80040b8:	461a      	mov	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80040c2:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80040c6:	18d3      	adds	r3, r2, r3
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	18d3      	adds	r3, r2, r3
 80040cc:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	6811      	ldr	r1, [r2, #0]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	f002 021f 	and.w	r2, r2, #31
 80040dc:	f04f 0001 	mov.w	r0, #1
 80040e0:	fa00 f202 	lsl.w	r2, r0, r2
 80040e4:	430a      	orrs	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]
    
    tmp = (uint32_t)EXTI_BASE;
 80040e8:	4b5b      	ldr	r3, [pc, #364]	; (8004258 <EXTI_Init+0x240>)
 80040ea:	60fb      	str	r3, [r7, #12]

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80040f4:	ea4f 1243 	mov.w	r2, r3, lsl #5
 80040f8:	4b59      	ldr	r3, [pc, #356]	; (8004260 <EXTI_Init+0x248>)
 80040fa:	18d3      	adds	r3, r2, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8004106:	ea4f 1143 	mov.w	r1, r3, lsl #5
 800410a:	4b55      	ldr	r3, [pc, #340]	; (8004260 <EXTI_Init+0x248>)
 800410c:	18cb      	adds	r3, r1, r3
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	f04f 0001 	mov.w	r0, #1
 800411c:	fa00 f303 	lsl.w	r3, r0, r3
 8004120:	ea6f 0303 	mvn.w	r3, r3
 8004124:	400b      	ands	r3, r1
 8004126:	6013      	str	r3, [r2, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8004130:	ea4f 1243 	mov.w	r2, r3, lsl #5
 8004134:	4b4b      	ldr	r3, [pc, #300]	; (8004264 <EXTI_Init+0x24c>)
 8004136:	18d3      	adds	r3, r2, r3
 8004138:	461a      	mov	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8004142:	ea4f 1143 	mov.w	r1, r3, lsl #5
 8004146:	4b47      	ldr	r3, [pc, #284]	; (8004264 <EXTI_Init+0x24c>)
 8004148:	18cb      	adds	r3, r1, r3
 800414a:	6819      	ldr	r1, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	f04f 0001 	mov.w	r0, #1
 8004158:	fa00 f303 	lsl.w	r3, r0, r3
 800415c:	ea6f 0303 	mvn.w	r3, r3
 8004160:	400b      	ands	r3, r1
 8004162:	6013      	str	r3, [r2, #0]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	795b      	ldrb	r3, [r3, #5]
 8004168:	2b10      	cmp	r3, #16
 800416a:	d138      	bne.n	80041de <EXTI_Init+0x1c6>
    {
      /* Rising Falling edge */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8004174:	ea4f 1243 	mov.w	r2, r3, lsl #5
 8004178:	4b39      	ldr	r3, [pc, #228]	; (8004260 <EXTI_Init+0x248>)
 800417a:	18d3      	adds	r3, r2, r3
 800417c:	461a      	mov	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8004186:	ea4f 1143 	mov.w	r1, r3, lsl #5
 800418a:	4b35      	ldr	r3, [pc, #212]	; (8004260 <EXTI_Init+0x248>)
 800418c:	18cb      	adds	r3, r1, r3
 800418e:	6819      	ldr	r1, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	f04f 0001 	mov.w	r0, #1
 800419c:	fa00 f303 	lsl.w	r3, r0, r3
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6013      	str	r3, [r2, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80041ac:	ea4f 1243 	mov.w	r2, r3, lsl #5
 80041b0:	4b2c      	ldr	r3, [pc, #176]	; (8004264 <EXTI_Init+0x24c>)
 80041b2:	18d3      	adds	r3, r2, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80041be:	ea4f 1143 	mov.w	r1, r3, lsl #5
 80041c2:	4b28      	ldr	r3, [pc, #160]	; (8004264 <EXTI_Init+0x24c>)
 80041c4:	18cb      	adds	r3, r1, r3
 80041c6:	6819      	ldr	r1, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	f04f 0001 	mov.w	r0, #1
 80041d4:	fa00 f303 	lsl.w	r3, r0, r3
 80041d8:	430b      	orrs	r3, r1
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	e036      	b.n	800424c <EXTI_Init+0x234>
    }
    else
    {
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	795b      	ldrb	r3, [r3, #5]
 80041e2:	461a      	mov	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80041ec:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80041f0:	18d3      	adds	r3, r2, r3
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	18d3      	adds	r3, r2, r3
 80041f6:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	6811      	ldr	r1, [r2, #0]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	f002 021f 	and.w	r2, r2, #31
 8004206:	f04f 0001 	mov.w	r0, #1
 800420a:	fa00 f202 	lsl.w	r2, r0, r2
 800420e:	430a      	orrs	r2, r1
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	e01b      	b.n	800424c <EXTI_Init+0x234>
    }
  }
      
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	791b      	ldrb	r3, [r3, #4]
 8004218:	461a      	mov	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8004222:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8004226:	18d3      	adds	r3, r2, r3
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	18d3      	adds	r3, r2, r3
 800422c:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	6811      	ldr	r1, [r2, #0]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	f002 021f 	and.w	r2, r2, #31
 800423c:	f04f 0001 	mov.w	r0, #1
 8004240:	fa00 f202 	lsl.w	r2, r0, r2
 8004244:	ea6f 0202 	mvn.w	r2, r2
 8004248:	400a      	ands	r2, r1
 800424a:	601a      	str	r2, [r3, #0]
  }
         
}
 800424c:	f107 0714 	add.w	r7, r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40010400 	.word	0x40010400
 800425c:	40010404 	.word	0x40010404
 8004260:	40010408 	.word	0x40010408
 8004264:	4001040c 	.word	0x4001040c

08004268 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  //assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8004282:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004286:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800428a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	f04f 0101 	mov.w	r1, #1
 800429a:	fa01 f303 	lsl.w	r3, r1, r3
 800429e:	4013      	ands	r3, r2
 80042a0:	60bb      	str	r3, [r7, #8]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80042a8:	ea4f 1243 	mov.w	r2, r3, lsl #5
 80042ac:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <EXTI_GetITStatus+0x80>)
 80042ae:	18d3      	adds	r3, r2, r3
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	f04f 0101 	mov.w	r1, #1
 80042bc:	fa01 f303 	lsl.w	r3, r1, r3
 80042c0:	4013      	ands	r3, r2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d006      	beq.n	80042d4 <EXTI_GetITStatus+0x6c>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <EXTI_GetITStatus+0x6c>
  {
    bitstatus = SET;
 80042cc:	f04f 0301 	mov.w	r3, #1
 80042d0:	73fb      	strb	r3, [r7, #15]
 80042d2:	e002      	b.n	80042da <EXTI_GetITStatus+0x72>
  }
  else
  {
    bitstatus = RESET;
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042da:	7bfb      	ldrb	r3, [r7, #15]
  
}
 80042dc:	4618      	mov	r0, r3
 80042de:	f107 0714 	add.w	r7, r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr
 80042e8:	40010414 	.word	0x40010414

080042ec <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  //assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80042fa:	ea4f 1243 	mov.w	r2, r3, lsl #5
 80042fe:	4b07      	ldr	r3, [pc, #28]	; (800431c <EXTI_ClearITPendingBit+0x30>)
 8004300:	18d3      	adds	r3, r2, r3
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	f002 021f 	and.w	r2, r2, #31
 8004308:	f04f 0101 	mov.w	r1, #1
 800430c:	fa01 f202 	lsl.w	r2, r1, r2
 8004310:	601a      	str	r2, [r3, #0]
}
 8004312:	f107 070c 	add.w	r7, r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr
 800431c:	40010414 	.word	0x40010414

08004320 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
  //assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  //assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	e08c      	b.n	800445e <GPIO_Init+0x13e>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f04f 0201 	mov.w	r2, #1
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4013      	ands	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	429a      	cmp	r2, r3
 8004360:	d179      	bne.n	8004456 <GPIO_Init+0x136>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	791b      	ldrb	r3, [r3, #4]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d003      	beq.n	8004372 <GPIO_Init+0x52>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	791b      	ldrb	r3, [r3, #4]
 800436e:	2b02      	cmp	r3, #2
 8004370:	d13a      	bne.n	80043e8 <GPIO_Init+0xc8>
      {
        /* Check Speed mode parameters */
      //  assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800437c:	f04f 0103 	mov.w	r1, #3
 8004380:	fa01 f303 	lsl.w	r3, r1, r3
 8004384:	ea6f 0303 	mvn.w	r3, r3
 8004388:	401a      	ands	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	795b      	ldrb	r3, [r3, #5]
 8004396:	4619      	mov	r1, r3
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800439e:	fa01 f303 	lsl.w	r3, r1, r3
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
    //    assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	889b      	ldrh	r3, [r3, #4]
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f04f 0101 	mov.w	r1, #1
 80043b6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	ea6f 0303 	mvn.w	r3, r3
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	4013      	ands	r3, r2
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	889b      	ldrh	r3, [r3, #4]
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	799b      	ldrb	r3, [r3, #6]
 80043d4:	4619      	mov	r1, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	fa01 f303 	lsl.w	r3, r1, r3
 80043de:	b29b      	uxth	r3, r3
 80043e0:	4313      	orrs	r3, r2
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80043f2:	f04f 0103 	mov.w	r1, #3
 80043f6:	fa01 f303 	lsl.w	r3, r1, r3
 80043fa:	ea6f 0303 	mvn.w	r3, r3
 80043fe:	401a      	ands	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	791b      	ldrb	r3, [r3, #4]
 800440c:	4619      	mov	r1, r3
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004414:	fa01 f303 	lsl.w	r3, r1, r3
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	b29b      	uxth	r3, r3
 8004426:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800442a:	f04f 0103 	mov.w	r1, #3
 800442e:	fa01 f303 	lsl.w	r3, r1, r3
 8004432:	ea6f 0303 	mvn.w	r3, r3
 8004436:	401a      	ands	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	79db      	ldrb	r3, [r3, #7]
 8004444:	4619      	mov	r1, r3
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800444c:	fa01 f303 	lsl.w	r3, r1, r3
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	60da      	str	r2, [r3, #12]
  //assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  //assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f103 0301 	add.w	r3, r3, #1
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b0f      	cmp	r3, #15
 8004462:	f67f af6f 	bls.w	8004344 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8004466:	f107 071c 	add.w	r7, r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  //assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  //assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	8a1b      	ldrh	r3, [r3, #16]
 8004486:	b29a      	uxth	r2, r3
 8004488:	887b      	ldrh	r3, [r7, #2]
 800448a:	4013      	ands	r3, r2
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <GPIO_ReadInputDataBit+0x2a>
  {
    bitstatus = (uint8_t)Bit_SET;
 8004492:	f04f 0301 	mov.w	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
 8004498:	e002      	b.n	80044a0 <GPIO_ReadInputDataBit+0x30>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	f107 0714 	add.w	r7, r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop

080044b0 <GPIO_SetBits>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  //assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  //assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80044bc:	887a      	ldrh	r2, [r7, #2]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	619a      	str	r2, [r3, #24]
}
 80044c2:	f107 070c 	add.w	r7, r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <GPIO_ResetBits>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  //assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  //assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	887a      	ldrh	r2, [r7, #2]
 80044dc:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80044de:	f107 070c 	add.w	r7, r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <GPIO_PinAFConfig>:
  *        for the detailed mapping of the system and peripherals alternate 
  *        function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	460a      	mov	r2, r1
 80044f4:	807a      	strh	r2, [r7, #2]
 80044f6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  //assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  //assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  //assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8004504:	787a      	ldrb	r2, [r7, #1]
 8004506:	887b      	ldrh	r3, [r7, #2]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8004516:	887b      	ldrh	r3, [r7, #2]
 8004518:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800451c:	b29b      	uxth	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	887b      	ldrh	r3, [r7, #2]
 8004522:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8004526:	b29b      	uxth	r3, r3
 8004528:	4619      	mov	r1, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f101 0108 	add.w	r1, r1, #8
 8004530:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004534:	887b      	ldrh	r3, [r7, #2]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800453e:	f04f 000f 	mov.w	r0, #15
 8004542:	fa00 f303 	lsl.w	r3, r0, r3
 8004546:	ea6f 0303 	mvn.w	r3, r3
 800454a:	4019      	ands	r1, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f102 0208 	add.w	r2, r2, #8
 8004552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8004556:	887b      	ldrh	r3, [r7, #2]
 8004558:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800455c:	b29b      	uxth	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f102 0208 	add.w	r2, r2, #8
 8004566:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8004570:	887b      	ldrh	r3, [r7, #2]
 8004572:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8004576:	b29b      	uxth	r3, r3
 8004578:	461a      	mov	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f102 0208 	add.w	r2, r2, #8
 8004580:	68b9      	ldr	r1, [r7, #8]
 8004582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004586:	f107 0714 	add.w	r7, r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr

08004590 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *         contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]
  //assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
  //assert_param(IS_I2C_ACK(I2C_InitStruct->I2C_Ack));
  //assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

  /* Disable I2Cx Peripheral */
  I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f023 0201 	bic.w	r2, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx FILTERS Configuration ------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60fb      	str	r3, [r7, #12]
  /* Clear I2Cx CR1 register */
  tmpreg &= CR1_CLEAR_MASK;
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4b29      	ldr	r3, [pc, #164]	; (800465c <I2C_Init+0xcc>)
 80045b6:	4013      	ands	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]
  /* Configure I2Cx: analog and digital filter */
  /* Set ANFOFF bit according to I2C_AnalogFilter value */
  /* Set DFN bits according to I2C_DigitalFilter value */
  tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80045c6:	4313      	orrs	r3, r2
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMING Configuration -------------------*/
  /* Configure I2Cx: Timing */
  /* Set TIMINGR bits according to I2C_Timing */
  /* Write to I2Cx TIMING */
  I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	611a      	str	r2, [r3, #16]

  /* Enable I2Cx Peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f043 0201 	orr.w	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Clear tmpreg local variable */
  tmpreg = 0;
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
  /* Clear OAR1 register */
  I2Cx->OAR1 = (uint32_t)tmpreg;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	609a      	str	r2, [r3, #8]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	60da      	str	r2, [r3, #12]
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	699a      	ldr	r2, [r3, #24]
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
  /* Clear OAR2 register */
  I2Cx->OAR2 = (uint32_t)tmpreg;
  /* Configure I2Cx: Own Address1 and acknowledged address */
  /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
  /* Set OA1 bits according to I2C_OwnAddress1 value */
  tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
                      (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
  /* Write to I2Cx OAR1 */
  I2Cx->OAR1 = tmpreg;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	609a      	str	r2, [r3, #8]
  /* Enable Own Address1 acknowledgement */
  I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx MODE Configuration ---------------------*/
  /* Configure I2Cx: mode */
  /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
  tmpreg = I2C_InitStruct->I2C_Mode;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	60fb      	str	r3, [r7, #12]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 |= tmpreg;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx ACK Configuration ----------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	60fb      	str	r3, [r7, #12]
  /* Clear I2Cx CR2 register */
  tmpreg &= CR2_CLEAR_MASK;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800463a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800463e:	60fb      	str	r3, [r7, #12]
  /* Configure I2Cx: acknowledgement */
  /* Set NACK bit according to I2C_Ack value */
  tmpreg |= I2C_InitStruct->I2C_Ack;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	605a      	str	r2, [r3, #4]
}
 8004650:	f107 0714 	add.w	r7, r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	00cfe0ff 	.word	0x00cfe0ff

08004660 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  //assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  //assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d006      	beq.n	8004680 <I2C_Cmd+0x20>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f043 0201 	orr.w	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	e005      	b.n	800468c <I2C_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f023 0201 	bic.w	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	601a      	str	r2, [r3, #0]
  }
}
 800468c:	f107 070c 	add.w	r7, r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop

08004698 <I2C_TransferHandling>:
  *     @arg I2C_Generate_Start_Read: Generate Restart for read request.
  *     @arg I2C_Generate_Start_Write: Generate Restart for write request.
  * @retval None
  */
void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t ReloadEndMode, uint32_t StartStopMode)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	607b      	str	r3, [r7, #4]
 80046a2:	460b      	mov	r3, r1
 80046a4:	817b      	strh	r3, [r7, #10]
 80046a6:	4613      	mov	r3, r2
 80046a8:	727b      	strb	r3, [r7, #9]
  uint32_t tmpreg = 0;
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]
  //assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
  //assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
  //assert_param(IS_START_STOP_MODE(StartStopMode));
    
  /* Get the CR2 register value */
  tmpreg = I2Cx->CR2;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	617b      	str	r3, [r7, #20]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4b0e      	ldr	r3, [pc, #56]	; (80046f4 <I2C_TransferHandling+0x5c>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES) | \
 80046be:	897b      	ldrh	r3, [r7, #10]
 80046c0:	ea4f 5383 	mov.w	r3, r3, lsl #22
 80046c4:	ea4f 5393 	mov.w	r3, r3, lsr #22
 80046c8:	7a7a      	ldrb	r2, [r7, #9]
 80046ca:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80046ce:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	4313      	orrs	r3, r2
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]
            (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
  
  /* update CR2 register */
  I2Cx->CR2 = tmpreg;  
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	605a      	str	r2, [r3, #4]
}  
 80046e8:	f107 071c 	add.w	r7, r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	fc009800 	.word	0xfc009800

080046f8 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  //assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Write in the DR register the data to be sent */
  I2Cx->TXDR = (uint8_t)Data;
 8004704:	78fa      	ldrb	r2, [r7, #3]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	629a      	str	r2, [r3, #40]	; 0x28
}
 800470a:	f107 070c 	add.w	r7, r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr

08004714 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  //assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->RXDR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	b2db      	uxtb	r3, r3
}  
 8004722:	4618      	mov	r0, r3
 8004724:	f107 070c 	add.w	r7, r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop

08004730 <I2C_GetFlagStatus>:
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  *     @arg I2C_FLAG_BUSY: Bus busy
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	60bb      	str	r3, [r7, #8]
  FlagStatus bitstatus = RESET;
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  //assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  //assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
  
  /* Get the ISR register value */
  tmpreg = I2Cx->ISR;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	60bb      	str	r3, [r7, #8]
  
  /* Get flag status */
  tmpreg &= I2C_FLAG;
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	4013      	ands	r3, r2
 8004752:	60bb      	str	r3, [r7, #8]
  
  if(tmpreg != 0)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <I2C_GetFlagStatus+0x32>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800475a:	f04f 0301 	mov.w	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
 8004760:	e002      	b.n	8004768 <I2C_GetFlagStatus+0x38>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
}  
 800476a:	4618      	mov	r0, r3
 800476c:	f107 0714 	add.w	r7, r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop

08004778 <I2C_ClearFlag>:
  *     @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
  *     @arg I2C_FLAG_ALERT: SMBus Alert
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{ 
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  //assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  //assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));

  /* Clear the selected flag */
  I2Cx->ICR = I2C_FLAG;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	61da      	str	r2, [r3, #28]
  }
 8004788:	f107 070c 	add.w	r7, r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop

08004794 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8004794:	b480      	push	{r7}
 8004796:	b08b      	sub	sp, #44	; 0x2c
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	623b      	str	r3, [r7, #32]
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	61fb      	str	r3, [r7, #28]
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80047cc:	4b93      	ldr	r3, [pc, #588]	; (8004a1c <RCC_GetClocksFreq+0x288>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 030c 	and.w	r3, r3, #12
 80047d4:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d007      	beq.n	80047ec <RCC_GetClocksFreq+0x58>
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d009      	beq.n	80047f4 <RCC_GetClocksFreq+0x60>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d133      	bne.n	800484c <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a8e      	ldr	r2, [pc, #568]	; (8004a20 <RCC_GetClocksFreq+0x28c>)
 80047e8:	601a      	str	r2, [r3, #0]
      break;
 80047ea:	e033      	b.n	8004854 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a8c      	ldr	r2, [pc, #560]	; (8004a20 <RCC_GetClocksFreq+0x28c>)
 80047f0:	601a      	str	r2, [r3, #0]
      break;
 80047f2:	e02f      	b.n	8004854 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80047f4:	4b89      	ldr	r3, [pc, #548]	; (8004a1c <RCC_GetClocksFreq+0x288>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80047fc:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80047fe:	4b87      	ldr	r3, [pc, #540]	; (8004a1c <RCC_GetClocksFreq+0x288>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004806:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800480e:	f103 0302 	add.w	r3, r3, #2
 8004812:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d105      	bne.n	8004826 <RCC_GetClocksFreq+0x92>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	4a81      	ldr	r2, [pc, #516]	; (8004a24 <RCC_GetClocksFreq+0x290>)
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
 8004824:	e00e      	b.n	8004844 <RCC_GetClocksFreq+0xb0>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8004826:	4b7d      	ldr	r3, [pc, #500]	; (8004a1c <RCC_GetClocksFreq+0x288>)
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	f103 0301 	add.w	r3, r3, #1
 8004832:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 8004834:	4a7a      	ldr	r2, [pc, #488]	; (8004a20 <RCC_GetClocksFreq+0x28c>)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	fb02 f303 	mul.w	r3, r2, r3
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004848:	601a      	str	r2, [r3, #0]
      break;
 800484a:	e003      	b.n	8004854 <RCC_GetClocksFreq+0xc0>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a74      	ldr	r2, [pc, #464]	; (8004a20 <RCC_GetClocksFreq+0x28c>)
 8004850:	601a      	str	r2, [r3, #0]
      break;
 8004852:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8004854:	4b71      	ldr	r3, [pc, #452]	; (8004a1c <RCC_GetClocksFreq+0x288>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800485c:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8004864:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 8004866:	4a70      	ldr	r2, [pc, #448]	; (8004a28 <RCC_GetClocksFreq+0x294>)
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	18d3      	adds	r3, r2, r3
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	fa22 f203 	lsr.w	r2, r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8004880:	4b66      	ldr	r3, [pc, #408]	; (8004a1c <RCC_GetClocksFreq+0x288>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004888:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8004890:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8004892:	4a65      	ldr	r2, [pc, #404]	; (8004a28 <RCC_GetClocksFreq+0x294>)
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	18d3      	adds	r3, r2, r3
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	fa22 f203 	lsr.w	r2, r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80048ac:	4b5b      	ldr	r3, [pc, #364]	; (8004a1c <RCC_GetClocksFreq+0x288>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80048b4:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80048bc:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 80048be:	4a5a      	ldr	r2, [pc, #360]	; (8004a28 <RCC_GetClocksFreq+0x294>)
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	18d3      	adds	r3, r2, r3
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	fa22 f203 	lsr.w	r2, r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80048d8:	4b50      	ldr	r3, [pc, #320]	; (8004a1c <RCC_GetClocksFreq+0x288>)
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048e0:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80048e8:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80048ea:	4b50      	ldr	r3, [pc, #320]	; (8004a2c <RCC_GetClocksFreq+0x298>)
 80048ec:	6a3a      	ldr	r2, [r7, #32]
 80048ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d006      	beq.n	800490e <RCC_GetClocksFreq+0x17a>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 8004900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	fbb2 f2f3 	udiv	r2, r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	611a      	str	r2, [r3, #16]
 800490c:	e003      	b.n	8004916 <RCC_GetClocksFreq+0x182>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 8004916:	4b41      	ldr	r3, [pc, #260]	; (8004a1c <RCC_GetClocksFreq+0x288>)
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 800491e:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	ea4f 2353 	mov.w	r3, r3, lsr #9
 8004926:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 8004928:	4b40      	ldr	r3, [pc, #256]	; (8004a2c <RCC_GetClocksFreq+0x298>)
 800492a:	6a3a      	ldr	r2, [r7, #32]
 800492c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004930:	b29b      	uxth	r3, r3
 8004932:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	2b00      	cmp	r3, #0
 800493c:	d006      	beq.n	800494c <RCC_GetClocksFreq+0x1b8>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 800493e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	fbb2 f2f3 	udiv	r2, r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	615a      	str	r2, [r3, #20]
 800494a:	e003      	b.n	8004954 <RCC_GetClocksFreq+0x1c0>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8004954:	4b31      	ldr	r3, [pc, #196]	; (8004a1c <RCC_GetClocksFreq+0x288>)
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	f003 0310 	and.w	r3, r3, #16
 800495c:	2b00      	cmp	r3, #0
 800495e:	d103      	bne.n	8004968 <RCC_GetClocksFreq+0x1d4>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a2f      	ldr	r2, [pc, #188]	; (8004a20 <RCC_GetClocksFreq+0x28c>)
 8004964:	619a      	str	r2, [r3, #24]
 8004966:	e003      	b.n	8004970 <RCC_GetClocksFreq+0x1dc>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8004970:	4b2a      	ldr	r3, [pc, #168]	; (8004a1c <RCC_GetClocksFreq+0x288>)
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b00      	cmp	r3, #0
 800497a:	d103      	bne.n	8004984 <RCC_GetClocksFreq+0x1f0>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a28      	ldr	r2, [pc, #160]	; (8004a20 <RCC_GetClocksFreq+0x28c>)
 8004980:	61da      	str	r2, [r3, #28]
 8004982:	e003      	b.n	800498c <RCC_GetClocksFreq+0x1f8>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 800498c:	4b23      	ldr	r3, [pc, #140]	; (8004a1c <RCC_GetClocksFreq+0x288>)
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00e      	beq.n	80049b6 <RCC_GetClocksFreq+0x222>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	429a      	cmp	r2, r3
 80049a0:	d109      	bne.n	80049b6 <RCC_GetClocksFreq+0x222>
  && (apb2presc == ahbpresc)) 
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d105      	bne.n	80049b6 <RCC_GetClocksFreq+0x222>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	ea4f 0243 	mov.w	r2, r3, lsl #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	621a      	str	r2, [r3, #32]
 80049b4:	e003      	b.n	80049be <RCC_GetClocksFreq+0x22a>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80049be:	4b17      	ldr	r3, [pc, #92]	; (8004a1c <RCC_GetClocksFreq+0x288>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00e      	beq.n	80049e8 <RCC_GetClocksFreq+0x254>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d109      	bne.n	80049e8 <RCC_GetClocksFreq+0x254>
  && (apb2presc == ahbpresc))
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d105      	bne.n	80049e8 <RCC_GetClocksFreq+0x254>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	ea4f 0243 	mov.w	r2, r3, lsl #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24
 80049e6:	e003      	b.n	80049f0 <RCC_GetClocksFreq+0x25c>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80049f0:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <RCC_GetClocksFreq+0x288>)
 80049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d104      	bne.n	8004a06 <RCC_GetClocksFreq+0x272>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	629a      	str	r2, [r3, #40]	; 0x28
 8004a04:	e028      	b.n	8004a58 <RCC_GetClocksFreq+0x2c4>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8004a06:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <RCC_GetClocksFreq+0x288>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d10e      	bne.n	8004a30 <RCC_GetClocksFreq+0x29c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	629a      	str	r2, [r3, #40]	; 0x28
 8004a1a:	e01d      	b.n	8004a58 <RCC_GetClocksFreq+0x2c4>
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	007a1200 	.word	0x007a1200
 8004a24:	003d0900 	.word	0x003d0900
 8004a28:	20000124 	.word	0x20000124
 8004a2c:	20000134 	.word	0x20000134
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8004a30:	4b66      	ldr	r3, [pc, #408]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d104      	bne.n	8004a46 <RCC_GetClocksFreq+0x2b2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28
 8004a44:	e008      	b.n	8004a58 <RCC_GetClocksFreq+0x2c4>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8004a46:	4b61      	ldr	r3, [pc, #388]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d102      	bne.n	8004a58 <RCC_GetClocksFreq+0x2c4>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a5e      	ldr	r2, [pc, #376]	; (8004bd0 <RCC_GetClocksFreq+0x43c>)
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8004a58:	4b5c      	ldr	r3, [pc, #368]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <RCC_GetClocksFreq+0x2da>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a6c:	e021      	b.n	8004ab2 <RCC_GetClocksFreq+0x31e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8004a6e:	4b57      	ldr	r3, [pc, #348]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7a:	d104      	bne.n	8004a86 <RCC_GetClocksFreq+0x2f2>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a84:	e015      	b.n	8004ab2 <RCC_GetClocksFreq+0x31e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8004a86:	4b51      	ldr	r3, [pc, #324]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a92:	d104      	bne.n	8004a9e <RCC_GetClocksFreq+0x30a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004a9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a9c:	e009      	b.n	8004ab2 <RCC_GetClocksFreq+0x31e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8004a9e:	4b4b      	ldr	r3, [pc, #300]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004aa6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004aaa:	d102      	bne.n	8004ab2 <RCC_GetClocksFreq+0x31e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a48      	ldr	r2, [pc, #288]	; (8004bd0 <RCC_GetClocksFreq+0x43c>)
 8004ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8004ab2:	4b46      	ldr	r3, [pc, #280]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d104      	bne.n	8004ac8 <RCC_GetClocksFreq+0x334>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
 8004ac6:	e021      	b.n	8004b0c <RCC_GetClocksFreq+0x378>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8004ac8:	4b40      	ldr	r3, [pc, #256]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004ad0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ad4:	d104      	bne.n	8004ae0 <RCC_GetClocksFreq+0x34c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30
 8004ade:	e015      	b.n	8004b0c <RCC_GetClocksFreq+0x378>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8004ae0:	4b3a      	ldr	r3, [pc, #232]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004ae8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004aec:	d104      	bne.n	8004af8 <RCC_GetClocksFreq+0x364>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
 8004af6:	e009      	b.n	8004b0c <RCC_GetClocksFreq+0x378>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8004af8:	4b34      	ldr	r3, [pc, #208]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004b00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b04:	d102      	bne.n	8004b0c <RCC_GetClocksFreq+0x378>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a31      	ldr	r2, [pc, #196]	; (8004bd0 <RCC_GetClocksFreq+0x43c>)
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8004b0c:	4b2f      	ldr	r3, [pc, #188]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d104      	bne.n	8004b22 <RCC_GetClocksFreq+0x38e>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	635a      	str	r2, [r3, #52]	; 0x34
 8004b20:	e021      	b.n	8004b66 <RCC_GetClocksFreq+0x3d2>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8004b22:	4b2a      	ldr	r3, [pc, #168]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b2e:	d104      	bne.n	8004b3a <RCC_GetClocksFreq+0x3a6>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	635a      	str	r2, [r3, #52]	; 0x34
 8004b38:	e015      	b.n	8004b66 <RCC_GetClocksFreq+0x3d2>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8004b3a:	4b24      	ldr	r3, [pc, #144]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b46:	d104      	bne.n	8004b52 <RCC_GetClocksFreq+0x3be>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004b4e:	635a      	str	r2, [r3, #52]	; 0x34
 8004b50:	e009      	b.n	8004b66 <RCC_GetClocksFreq+0x3d2>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8004b52:	4b1e      	ldr	r3, [pc, #120]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b5e:	d102      	bne.n	8004b66 <RCC_GetClocksFreq+0x3d2>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a1b      	ldr	r2, [pc, #108]	; (8004bd0 <RCC_GetClocksFreq+0x43c>)
 8004b64:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8004b66:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d104      	bne.n	8004b7c <RCC_GetClocksFreq+0x3e8>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	639a      	str	r2, [r3, #56]	; 0x38
 8004b7a:	e021      	b.n	8004bc0 <RCC_GetClocksFreq+0x42c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8004b7c:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004b84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b88:	d104      	bne.n	8004b94 <RCC_GetClocksFreq+0x400>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	639a      	str	r2, [r3, #56]	; 0x38
 8004b92:	e015      	b.n	8004bc0 <RCC_GetClocksFreq+0x42c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8004b94:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004b9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ba0:	d104      	bne.n	8004bac <RCC_GetClocksFreq+0x418>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004ba8:	639a      	str	r2, [r3, #56]	; 0x38
 8004baa:	e009      	b.n	8004bc0 <RCC_GetClocksFreq+0x42c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8004bac:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <RCC_GetClocksFreq+0x438>)
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004bb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bb8:	d102      	bne.n	8004bc0 <RCC_GetClocksFreq+0x42c>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a04      	ldr	r2, [pc, #16]	; (8004bd0 <RCC_GetClocksFreq+0x43c>)
 8004bbe:	639a      	str	r2, [r3, #56]	; 0x38
  } 
}
 8004bc0:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	007a1200 	.word	0x007a1200

08004bd4 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  //assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  //assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d006      	beq.n	8004bf4 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8004be6:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <RCC_AHBPeriphClockCmd+0x3c>)
 8004be8:	4a09      	ldr	r2, [pc, #36]	; (8004c10 <RCC_AHBPeriphClockCmd+0x3c>)
 8004bea:	6951      	ldr	r1, [r2, #20]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	615a      	str	r2, [r3, #20]
 8004bf2:	e007      	b.n	8004c04 <RCC_AHBPeriphClockCmd+0x30>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8004bf4:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <RCC_AHBPeriphClockCmd+0x3c>)
 8004bf6:	4a06      	ldr	r2, [pc, #24]	; (8004c10 <RCC_AHBPeriphClockCmd+0x3c>)
 8004bf8:	6951      	ldr	r1, [r2, #20]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	ea6f 0202 	mvn.w	r2, r2
 8004c00:	400a      	ands	r2, r1
 8004c02:	615a      	str	r2, [r3, #20]
  }
}
 8004c04:	f107 070c 	add.w	r7, r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	40021000 	.word	0x40021000

08004c14 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  //assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  //assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d006      	beq.n	8004c34 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8004c26:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <RCC_APB2PeriphClockCmd+0x3c>)
 8004c28:	4a09      	ldr	r2, [pc, #36]	; (8004c50 <RCC_APB2PeriphClockCmd+0x3c>)
 8004c2a:	6991      	ldr	r1, [r2, #24]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	619a      	str	r2, [r3, #24]
 8004c32:	e007      	b.n	8004c44 <RCC_APB2PeriphClockCmd+0x30>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <RCC_APB2PeriphClockCmd+0x3c>)
 8004c36:	4a06      	ldr	r2, [pc, #24]	; (8004c50 <RCC_APB2PeriphClockCmd+0x3c>)
 8004c38:	6991      	ldr	r1, [r2, #24]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	ea6f 0202 	mvn.w	r2, r2
 8004c40:	400a      	ands	r2, r1
 8004c42:	619a      	str	r2, [r3, #24]
  }
}
 8004c44:	f107 070c 	add.w	r7, r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40021000 	.word	0x40021000

08004c54 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  //assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  //assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d006      	beq.n	8004c74 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8004c66:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <RCC_APB1PeriphClockCmd+0x3c>)
 8004c68:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <RCC_APB1PeriphClockCmd+0x3c>)
 8004c6a:	69d1      	ldr	r1, [r2, #28]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	61da      	str	r2, [r3, #28]
 8004c72:	e007      	b.n	8004c84 <RCC_APB1PeriphClockCmd+0x30>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8004c74:	4b06      	ldr	r3, [pc, #24]	; (8004c90 <RCC_APB1PeriphClockCmd+0x3c>)
 8004c76:	4a06      	ldr	r2, [pc, #24]	; (8004c90 <RCC_APB1PeriphClockCmd+0x3c>)
 8004c78:	69d1      	ldr	r1, [r2, #28]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	ea6f 0202 	mvn.w	r2, r2
 8004c80:	400a      	ands	r2, r1
 8004c82:	61da      	str	r2, [r3, #28]
  }
}
 8004c84:	f107 070c 	add.w	r7, r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40021000 	.word	0x40021000

08004c94 <SPI_SendData8>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t spixbase = 0x00;
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  ////assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f103 030c 	add.w	r3, r3, #12
 8004cb0:	60fb      	str	r3, [r7, #12]
  
  *(__IO uint8_t *) spixbase = Data;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	701a      	strb	r2, [r3, #0]
}
 8004cb8:	f107 0714 	add.w	r7, r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop

08004cc4 <SPI_ReceiveData8>:
  * @brief  Returns the most recent received data by the SPIx peripheral. 
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The value of the received data.
  */
uint8_t SPI_ReceiveData8(SPI_TypeDef* SPIx)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t spixbase = 0x00;
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  ////assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  spixbase = (uint32_t)SPIx; 
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	60fb      	str	r3, [r7, #12]
  spixbase += 0x0C;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f103 030c 	add.w	r3, r3, #12
 8004cdc:	60fb      	str	r3, [r7, #12]
  
  return *(__IO uint8_t *) spixbase;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	b2db      	uxtb	r3, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f107 0714 	add.w	r7, r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc80      	pop	{r7}
 8004cee:	4770      	bx	lr

08004cf0 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.   
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  //assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  //assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	891b      	ldrh	r3, [r3, #8]
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	887b      	ldrh	r3, [r7, #2]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8004d12:	f04f 0301 	mov.w	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
 8004d18:	e002      	b.n	8004d20 <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8004d1a:	f04f 0300 	mov.w	r3, #0
 8004d1e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	f107 0714 	add.w	r7, r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop

08004d30 <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8004d30:	b490      	push	{r4, r7}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	71fa      	strb	r2, [r7, #7]
 8004d3c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  //assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  //assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8004d44:	79bb      	ldrb	r3, [r7, #6]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004d4e:	f04f 020f 	mov.w	r2, #15
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8004d58:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <SYSCFG_EXTILineConfig+0x94>)
 8004d5a:	79ba      	ldrb	r2, [r7, #6]
 8004d5c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	4918      	ldr	r1, [pc, #96]	; (8004dc4 <SYSCFG_EXTILineConfig+0x94>)
 8004d64:	79b8      	ldrb	r0, [r7, #6]
 8004d66:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8004d6a:	b2c0      	uxtb	r0, r0
 8004d6c:	f100 0002 	add.w	r0, r0, #2
 8004d70:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8004d74:	68f9      	ldr	r1, [r7, #12]
 8004d76:	ea6f 0101 	mvn.w	r1, r1
 8004d7a:	4001      	ands	r1, r0
 8004d7c:	f102 0202 	add.w	r2, r2, #2
 8004d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8004d84:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <SYSCFG_EXTILineConfig+0x94>)
 8004d86:	79ba      	ldrb	r2, [r7, #6]
 8004d88:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	490d      	ldr	r1, [pc, #52]	; (8004dc4 <SYSCFG_EXTILineConfig+0x94>)
 8004d90:	79b8      	ldrb	r0, [r7, #6]
 8004d92:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8004d96:	b2c0      	uxtb	r0, r0
 8004d98:	f100 0002 	add.w	r0, r0, #2
 8004d9c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8004da0:	79fc      	ldrb	r4, [r7, #7]
 8004da2:	79b9      	ldrb	r1, [r7, #6]
 8004da4:	f001 0103 	and.w	r1, r1, #3
 8004da8:	ea4f 0181 	mov.w	r1, r1, lsl #2
 8004dac:	fa04 f101 	lsl.w	r1, r4, r1
 8004db0:	4301      	orrs	r1, r0
 8004db2:	f102 0202 	add.w	r2, r2, #2
 8004db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004dba:	f107 0710 	add.w	r7, r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc90      	pop	{r4, r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	40010000 	.word	0x40010000

08004dc8 <atanhi>:
 8004dc8:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?

08004dd8 <atanlo>:
 8004dd8:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

08004de8 <GPIO_PIN>:
 8004de8:	01000200 80000400 40000800 20001000     ...........@... 

08004df8 <GPIO_CLK>:
 8004df8:	00200000 00200000 00200000 00200000     .. ... ... ... .
 8004e08:	00200000 00200000 00200000 00200000     .. ... ... ... .

08004e18 <BUTTON_PIN>:
 8004e18:	00000001                                ....

08004e1c <BUTTON_CLK>:
 8004e1c:	00020000                                ....

08004e20 <BUTTON_EXTI_LINE>:
 8004e20:	00000000                                ....

08004e24 <BUTTON_PORT_SOURCE>:
 8004e24:	00000000                                ....

08004e28 <BUTTON_PIN_SOURCE>:
 8004e28:	00000000                                ....

08004e2c <BUTTON_IRQn>:
 8004e2c:	00000006 736f6361 00000000 74727173     ....acos....sqrt
 8004e3c:	00000000 00000043                       ....C...

08004e44 <_init>:
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	bf00      	nop
 8004e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4a:	bc08      	pop	{r3}
 8004e4c:	469e      	mov	lr, r3
 8004e4e:	4770      	bx	lr

08004e50 <_fini>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	bf00      	nop
 8004e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e56:	bc08      	pop	{r3}
 8004e58:	469e      	mov	lr, r3
 8004e5a:	4770      	bx	lr
